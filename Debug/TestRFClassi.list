
TestRFClassi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005420  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000788  0800552c  0800552c  0001552c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005cb4  08005cb4  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08005cb4  08005cb4  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005cb4  08005cb4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005cb4  08005cb4  00015cb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005cb8  08005cb8  00015cb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005cbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000090  20000070  08005d2c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000100  08005d2c  00020100  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000145c4  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002a8d  00000000  00000000  0003465d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001180  00000000  00000000  000370f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001058  00000000  00000000  00038270  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001bbac  00000000  00000000  000392c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000cef0  00000000  00000000  00054e74  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008edd7  00000000  00000000  00061d64  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f0b3b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005218  00000000  00000000  000f0bb8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08005514 	.word	0x08005514

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08005514 	.word	0x08005514

0800014c <_Z9printdataPh>:
  * @retval int
  */
#define NUM_BYTES 32
uint8_t tx[NUM_BYTES];

void printdata(uint8_t* dati){
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	for (int i=0 ; i< NUM_BYTES; i++){
 8000154:	2300      	movs	r3, #0
 8000156:	60fb      	str	r3, [r7, #12]
 8000158:	68fb      	ldr	r3, [r7, #12]
 800015a:	2b1f      	cmp	r3, #31
 800015c:	dc11      	bgt.n	8000182 <_Z9printdataPh+0x36>
		printf(" %d",dati[i]);
 800015e:	68fb      	ldr	r3, [r7, #12]
 8000160:	687a      	ldr	r2, [r7, #4]
 8000162:	4413      	add	r3, r2
 8000164:	781b      	ldrb	r3, [r3, #0]
 8000166:	4619      	mov	r1, r3
 8000168:	4809      	ldr	r0, [pc, #36]	; (8000190 <_Z9printdataPh+0x44>)
 800016a:	f004 f965 	bl	8004438 <iprintf>
		if (i<(NUM_BYTES-1)){
 800016e:	68fb      	ldr	r3, [r7, #12]
 8000170:	2b1e      	cmp	r3, #30
 8000172:	dc02      	bgt.n	800017a <_Z9printdataPh+0x2e>
			printf(" -");
 8000174:	4807      	ldr	r0, [pc, #28]	; (8000194 <_Z9printdataPh+0x48>)
 8000176:	f004 f95f 	bl	8004438 <iprintf>
	for (int i=0 ; i< NUM_BYTES; i++){
 800017a:	68fb      	ldr	r3, [r7, #12]
 800017c:	3301      	adds	r3, #1
 800017e:	60fb      	str	r3, [r7, #12]
 8000180:	e7ea      	b.n	8000158 <_Z9printdataPh+0xc>
		}
	}
	printf("\r\n");
 8000182:	4805      	ldr	r0, [pc, #20]	; (8000198 <_Z9printdataPh+0x4c>)
 8000184:	f004 f9cc 	bl	8004520 <puts>
}
 8000188:	bf00      	nop
 800018a:	3710      	adds	r7, #16
 800018c:	46bd      	mov	sp, r7
 800018e:	bd80      	pop	{r7, pc}
 8000190:	0800552c 	.word	0x0800552c
 8000194:	08005530 	.word	0x08005530
 8000198:	08005534 	.word	0x08005534

0800019c <main>:
    	return 0;
    }
}

int main(void)
{
 800019c:	b5b0      	push	{r4, r5, r7, lr}
 800019e:	b0f0      	sub	sp, #448	; 0x1c0
 80001a0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001a2:	f000 fcef 	bl	8000b84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001a6:	f000 fa29 	bl	80005fc <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001aa:	f000 fa77 	bl	800069c <_ZL12MX_GPIO_Initv>
  //MX_SPI1_Init(); moved into SPIRFF24 class
  //MX_USART1_UART_Init();
  //MX_TIM1_Init(); moved into TimerRF24 class
  /* USER CODE BEGIN 2 */
	for (int i=0 ; i< NUM_BYTES; i++){
 80001ae:	2300      	movs	r3, #0
 80001b0:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 80001b4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80001b8:	2b1f      	cmp	r3, #31
 80001ba:	dc0b      	bgt.n	80001d4 <main+0x38>
		tx[i]=0;
 80001bc:	4ada      	ldr	r2, [pc, #872]	; (8000528 <main+0x38c>)
 80001be:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80001c2:	4413      	add	r3, r2
 80001c4:	2200      	movs	r2, #0
 80001c6:	701a      	strb	r2, [r3, #0]
	for (int i=0 ; i< NUM_BYTES; i++){
 80001c8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80001cc:	3301      	adds	r3, #1
 80001ce:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 80001d2:	e7ef      	b.n	80001b4 <main+0x18>
	}

  bool radioNumber = 1;
 80001d4:	2301      	movs	r3, #1
 80001d6:	f887 319f 	strb.w	r3, [r7, #415]	; 0x19f
  RF24 radio(ce_pin_GPIO_Port, ce_pin_Pin, csn_pin_GPIO_Port, csn_pin_Pin);
 80001da:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 80001de:	4bd3      	ldr	r3, [pc, #844]	; (800052c <main+0x390>)
 80001e0:	9301      	str	r3, [sp, #4]
 80001e2:	2310      	movs	r3, #16
 80001e4:	9300      	str	r3, [sp, #0]
 80001e6:	4bd2      	ldr	r3, [pc, #840]	; (8000530 <main+0x394>)
 80001e8:	2201      	movs	r2, #1
 80001ea:	49d2      	ldr	r1, [pc, #840]	; (8000534 <main+0x398>)
 80001ec:	f002 fe82 	bl	8002ef4 <_ZN4RF24C1EP12GPIO_TypeDeftS1_tm>
  uint8_t addresses[][6] = {"1Node","2Node"};
 80001f0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80001f4:	4ad0      	ldr	r2, [pc, #832]	; (8000538 <main+0x39c>)
 80001f6:	ca07      	ldmia	r2, {r0, r1, r2}
 80001f8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  radio.begin();
 80001fc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000200:	4618      	mov	r0, r3
 8000202:	f003 f93f 	bl	8003484 <_ZN4RF245beginEv>
  huart1 = radio.uartRF24.gethUART();
 8000206:	4ccd      	ldr	r4, [pc, #820]	; (800053c <main+0x3a0>)
 8000208:	463a      	mov	r2, r7
 800020a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800020e:	33d0      	adds	r3, #208	; 0xd0
 8000210:	4619      	mov	r1, r3
 8000212:	4610      	mov	r0, r2
 8000214:	f004 f856 	bl	80042c4 <_ZN9UART_RF248gethUARTEv>
 8000218:	463b      	mov	r3, r7
 800021a:	461d      	mov	r5, r3
 800021c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800021e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000220:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000222:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000224:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000226:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000228:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800022c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  radio.setAutoAck(1);                    // Ensure autoACK is enabled
 8000230:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000234:	2101      	movs	r1, #1
 8000236:	4618      	mov	r0, r3
 8000238:	f003 fc3f 	bl	8003aba <_ZN4RF2410setAutoAckEb>
  //radio.enableAckPayload();               // Allow optional ack payloads
  radio.setDataRate(RF24_2MBPS);
 800023c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000240:	2101      	movs	r1, #1
 8000242:	4618      	mov	r0, r3
 8000244:	f003 fca7 	bl	8003b96 <_ZN4RF2411setDataRateE15rf24_datarate_e>
  radio.setPALevel(RF24_PA_HIGH);
 8000248:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800024c:	2201      	movs	r2, #1
 800024e:	2102      	movs	r1, #2
 8000250:	4618      	mov	r0, r3
 8000252:	f003 fc53 	bl	8003afc <_ZN4RF2410setPALevelEhb>
  radio.setRetries(15, 15);                // Smallest time between retries, max no. of retries
 8000256:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800025a:	220f      	movs	r2, #15
 800025c:	210f      	movs	r1, #15
 800025e:	4618      	mov	r0, r3
 8000260:	f003 fd2f 	bl	8003cc2 <_ZN4RF2410setRetriesEhh>
  radio.setPayloadSize(NUM_BYTES);        // Here we are sending NUM_BYTES-bytes payloads to test the call-response speed
 8000264:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000268:	2120      	movs	r1, #32
 800026a:	4618      	mov	r0, r3
 800026c:	f002 fead 	bl	8002fca <_ZN4RF2414setPayloadSizeEh>

  if(radioNumber){
 8000270:	f897 319f 	ldrb.w	r3, [r7, #415]	; 0x19f
 8000274:	2b00      	cmp	r3, #0
 8000276:	d011      	beq.n	800029c <main+0x100>
      radio.openWritingPipe(addresses[1]);
 8000278:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800027c:	1d9a      	adds	r2, r3, #6
 800027e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000282:	4611      	mov	r1, r2
 8000284:	4618      	mov	r0, r3
 8000286:	f003 fb19 	bl	80038bc <_ZN4RF2415openWritingPipeEPKh>
      radio.openReadingPipe(1,addresses[0]);
 800028a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800028e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000292:	2101      	movs	r1, #1
 8000294:	4618      	mov	r0, r3
 8000296:	f003 fb59 	bl	800394c <_ZN4RF2415openReadingPipeEhPKh>
 800029a:	e010      	b.n	80002be <main+0x122>
    }else{
      radio.openWritingPipe(addresses[0]);
 800029c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80002a0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80002a4:	4611      	mov	r1, r2
 80002a6:	4618      	mov	r0, r3
 80002a8:	f003 fb08 	bl	80038bc <_ZN4RF2415openWritingPipeEPKh>
      radio.openReadingPipe(1,addresses[1]);
 80002ac:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80002b0:	1d9a      	adds	r2, r3, #6
 80002b2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80002b6:	2101      	movs	r1, #1
 80002b8:	4618      	mov	r0, r3
 80002ba:	f003 fb47 	bl	800394c <_ZN4RF2415openReadingPipeEhPKh>
    }

  radio.startListening();
 80002be:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80002c2:	4618      	mov	r0, r3
 80002c4:	f003 f98a 	bl	80035dc <_ZN4RF2414startListeningEv>
  radio.printDetails();
 80002c8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80002cc:	4618      	mov	r0, r3
 80002ce:	f002 feaf 	bl	8003030 <_ZN4RF2412printDetailsEv>
  printf("RF24/examples/GettingStarted -- STM32\r\n");
 80002d2:	489b      	ldr	r0, [pc, #620]	; (8000540 <main+0x3a4>)
 80002d4:	f004 f924 	bl	8004520 <puts>
  printf("*** PRESS 'T' to begin transmitting to the other node\r\n");
 80002d8:	489a      	ldr	r0, [pc, #616]	; (8000544 <main+0x3a8>)
 80002da:	f004 f921 	bl	8004520 <puts>
  radio.printPrettyDetails();
 80002de:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80002e2:	4618      	mov	r0, r3
 80002e4:	f002 ff5e 	bl	80031a4 <_ZN4RF2418printPrettyDetailsEv>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  bool role = 0;
 80002e8:	2300      	movs	r3, #0
 80002ea:	f887 31b3 	strb.w	r3, [r7, #435]	; 0x1b3
	  scanf("%s %s", buf,buf2);
	  printf("\r\nHello, %s %s!\r\n", buf,buf2);*/
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (role == 1)  {
 80002ee:	f897 31b3 	ldrb.w	r3, [r7, #435]	; 0x1b3
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	f000 80a3 	beq.w	800043e <main+0x2a2>

		  radio.stopListening();                                    // First, stop listening so we can talk.
 80002f8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80002fc:	4618      	mov	r0, r3
 80002fe:	f003 f9a3 	bl	8003648 <_ZN4RF2413stopListeningEv>

		  printf(" \r\nNow sending");
 8000302:	4891      	ldr	r0, [pc, #580]	; (8000548 <main+0x3ac>)
 8000304:	f004 f898 	bl	8004438 <iprintf>
		  tx[0]=tx[0]+1;
 8000308:	4b87      	ldr	r3, [pc, #540]	; (8000528 <main+0x38c>)
 800030a:	781b      	ldrb	r3, [r3, #0]
 800030c:	3301      	adds	r3, #1
 800030e:	b2da      	uxtb	r2, r3
 8000310:	4b85      	ldr	r3, [pc, #532]	; (8000528 <main+0x38c>)
 8000312:	701a      	strb	r2, [r3, #0]
		  for (int i= 1; i<NUM_BYTES; i++){
 8000314:	2301      	movs	r3, #1
 8000316:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 800031a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800031e:	2b1f      	cmp	r3, #31
 8000320:	dc12      	bgt.n	8000348 <main+0x1ac>
			  tx[i]=tx[i-1]+1;
 8000322:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8000326:	3b01      	subs	r3, #1
 8000328:	4a7f      	ldr	r2, [pc, #508]	; (8000528 <main+0x38c>)
 800032a:	5cd3      	ldrb	r3, [r2, r3]
 800032c:	3301      	adds	r3, #1
 800032e:	b2d9      	uxtb	r1, r3
 8000330:	4a7d      	ldr	r2, [pc, #500]	; (8000528 <main+0x38c>)
 8000332:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8000336:	4413      	add	r3, r2
 8000338:	460a      	mov	r2, r1
 800033a:	701a      	strb	r2, [r3, #0]
		  for (int i= 1; i<NUM_BYTES; i++){
 800033c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8000340:	3301      	adds	r3, #1
 8000342:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 8000346:	e7e8      	b.n	800031a <main+0x17e>
		  }
		  printdata(tx);
 8000348:	4877      	ldr	r0, [pc, #476]	; (8000528 <main+0x38c>)
 800034a:	f7ff feff 	bl	800014c <_Z9printdataPh>

		  unsigned long start_time = getCurrentMicros();                             // Take the time, and send it.  This will block until complete
 800034e:	f000 f9c7 	bl	80006e0 <_Z16getCurrentMicrosv>
 8000352:	f8c7 0198 	str.w	r0, [r7, #408]	; 0x198

		  if (!radio.write( &tx, NUM_BYTES )){
 8000356:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800035a:	2220      	movs	r2, #32
 800035c:	4972      	ldr	r1, [pc, #456]	; (8000528 <main+0x38c>)
 800035e:	4618      	mov	r0, r3
 8000360:	f003 fa37 	bl	80037d2 <_ZN4RF245writeEPKvh>
 8000364:	4603      	mov	r3, r0
 8000366:	f083 0301 	eor.w	r3, r3, #1
 800036a:	b2db      	uxtb	r3, r3
 800036c:	2b00      	cmp	r3, #0
 800036e:	d003      	beq.n	8000378 <main+0x1dc>
			  printf("failed\r\n");
 8000370:	4876      	ldr	r0, [pc, #472]	; (800054c <main+0x3b0>)
 8000372:	f004 f8d5 	bl	8004520 <puts>
 8000376:	e002      	b.n	800037e <main+0x1e2>
		  } else {
			  printf("sent ok!\r\n");
 8000378:	4875      	ldr	r0, [pc, #468]	; (8000550 <main+0x3b4>)
 800037a:	f004 f8d1 	bl	8004520 <puts>
		  }

		  radio.startListening();                                    // Now, continue listening
 800037e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000382:	4618      	mov	r0, r3
 8000384:	f003 f92a 	bl	80035dc <_ZN4RF2414startListeningEv>

		  unsigned long started_waiting_at = getCurrentMicros();               // Set up a timeout period, get the current microseconds
 8000388:	f000 f9aa 	bl	80006e0 <_Z16getCurrentMicrosv>
 800038c:	f8c7 0194 	str.w	r0, [r7, #404]	; 0x194
		  unsigned long istante;
		  bool timeout = false;                                   // Set up a variable to indicate if a response was received or not
 8000390:	2300      	movs	r3, #0
 8000392:	f887 31ab 	strb.w	r3, [r7, #427]	; 0x1ab

		  while ( ! radio.available() ){                             // While nothing is received
 8000396:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800039a:	4618      	mov	r0, r3
 800039c:	f003 fa4c 	bl	8003838 <_ZN4RF249availableEv>
 80003a0:	4603      	mov	r3, r0
 80003a2:	f083 0301 	eor.w	r3, r3, #1
 80003a6:	b2db      	uxtb	r3, r3
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d00e      	beq.n	80003ca <main+0x22e>
			  istante = getCurrentMicros();
 80003ac:	f000 f998 	bl	80006e0 <_Z16getCurrentMicrosv>
 80003b0:	f8c7 0190 	str.w	r0, [r7, #400]	; 0x190
			  if (istante - started_waiting_at > 200000 ){            // If waited longer than 200ms, indicate timeout and exit while loop
 80003b4:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 80003b8:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80003bc:	1ad3      	subs	r3, r2, r3
 80003be:	4a65      	ldr	r2, [pc, #404]	; (8000554 <main+0x3b8>)
 80003c0:	4293      	cmp	r3, r2
 80003c2:	d9e8      	bls.n	8000396 <main+0x1fa>
				  timeout = true;
 80003c4:	2301      	movs	r3, #1
 80003c6:	f887 31ab 	strb.w	r3, [r7, #427]	; 0x1ab
				  break;
			  }
		  }

		  if ( timeout ){                                             // Describe the results
 80003ca:	f897 31ab 	ldrb.w	r3, [r7, #427]	; 0x1ab
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d003      	beq.n	80003da <main+0x23e>
			  printf("Failed, response timed out. \r\n");
 80003d2:	4861      	ldr	r0, [pc, #388]	; (8000558 <main+0x3bc>)
 80003d4:	f004 f8a4 	bl	8004520 <puts>
 80003d8:	e031      	b.n	800043e <main+0x2a2>
		  }else{
			  printf("Success, time out has not been triggered. \r\n");
 80003da:	4860      	ldr	r0, [pc, #384]	; (800055c <main+0x3c0>)
 80003dc:	f004 f8a0 	bl	8004520 <puts>
		        uint8_t rx[NUM_BYTES];                                 // Grab the response, compare, and send to debugging spew
		        for (int i=0 ; i< NUM_BYTES; i++){
 80003e0:	2300      	movs	r3, #0
 80003e2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80003e6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80003ea:	2b1f      	cmp	r3, #31
 80003ec:	dc0c      	bgt.n	8000408 <main+0x26c>
		          rx[i]=0;
 80003ee:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80003f2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80003f6:	4413      	add	r3, r2
 80003f8:	2200      	movs	r2, #0
 80003fa:	701a      	strb	r2, [r3, #0]
		        for (int i=0 ; i< NUM_BYTES; i++){
 80003fc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8000400:	3301      	adds	r3, #1
 8000402:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000406:	e7ee      	b.n	80003e6 <main+0x24a>
		        }
		        radio.read( &rx, NUM_BYTES );
 8000408:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800040c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000410:	2220      	movs	r2, #32
 8000412:	4618      	mov	r0, r3
 8000414:	f003 fa3b 	bl	800388e <_ZN4RF244readEPvh>
		        printf("Sent:\t\t");
 8000418:	4851      	ldr	r0, [pc, #324]	; (8000560 <main+0x3c4>)
 800041a:	f004 f80d 	bl	8004438 <iprintf>
		        printdata(tx);
 800041e:	4842      	ldr	r0, [pc, #264]	; (8000528 <main+0x38c>)
 8000420:	f7ff fe94 	bl	800014c <_Z9printdataPh>
		        printf("Got response:\t");
 8000424:	484f      	ldr	r0, [pc, #316]	; (8000564 <main+0x3c8>)
 8000426:	f004 f807 	bl	8004438 <iprintf>
		        printdata(rx);
 800042a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800042e:	4618      	mov	r0, r3
 8000430:	f7ff fe8c 	bl	800014c <_Z9printdataPh>
		        radio.flush_tx();
 8000434:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000438:	4618      	mov	r0, r3
 800043a:	f002 fc61 	bl	8002d00 <_ZN4RF248flush_txEv>
		  //delay(100);
	  }

	  /****************** Pong Back Role ***************************/

	  if ( role == 0 )
 800043e:	f897 31b3 	ldrb.w	r3, [r7, #435]	; 0x1b3
 8000442:	f083 0301 	eor.w	r3, r3, #1
 8000446:	b2db      	uxtb	r3, r3
 8000448:	2b00      	cmp	r3, #0
 800044a:	d046      	beq.n	80004da <main+0x33e>
	  {
		  //unsigned long got_time;
		  uint8_t rx[NUM_BYTES];                                 // Grab the response, compare, and send to debugging spew
		  for (int i=0 ; i< NUM_BYTES; i++){
 800044c:	2300      	movs	r3, #0
 800044e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000452:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8000456:	2b1f      	cmp	r3, #31
 8000458:	dc0c      	bgt.n	8000474 <main+0x2d8>
			  rx[i]=0;
 800045a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800045e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8000462:	4413      	add	r3, r2
 8000464:	2200      	movs	r2, #0
 8000466:	701a      	strb	r2, [r3, #0]
		  for (int i=0 ; i< NUM_BYTES; i++){
 8000468:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800046c:	3301      	adds	r3, #1
 800046e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000472:	e7ee      	b.n	8000452 <main+0x2b6>
		  }
		  if( radio.available()){
 8000474:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000478:	4618      	mov	r0, r3
 800047a:	f003 f9dd 	bl	8003838 <_ZN4RF249availableEv>
 800047e:	4603      	mov	r3, r0
 8000480:	2b00      	cmp	r3, #0
 8000482:	d02a      	beq.n	80004da <main+0x33e>
			  while (radio.available()) {             // While there is data ready
 8000484:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000488:	4618      	mov	r0, r3
 800048a:	f003 f9d5 	bl	8003838 <_ZN4RF249availableEv>
 800048e:	4603      	mov	r3, r0
 8000490:	2b00      	cmp	r3, #0
 8000492:	d008      	beq.n	80004a6 <main+0x30a>
				  radio.read( &rx, NUM_BYTES );       // Get the payload
 8000494:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000498:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800049c:	2220      	movs	r2, #32
 800049e:	4618      	mov	r0, r3
 80004a0:	f003 f9f5 	bl	800388e <_ZN4RF244readEPvh>
			  while (radio.available()) {             // While there is data ready
 80004a4:	e7ee      	b.n	8000484 <main+0x2e8>
			  }
			  radio.stopListening();                                        // First, stop listening so we can talk
 80004a6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80004aa:	4618      	mov	r0, r3
 80004ac:	f003 f8cc 	bl	8003648 <_ZN4RF2413stopListeningEv>
			  radio.write( &rx, NUM_BYTES );              // Send the final one back.
 80004b0:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80004b4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80004b8:	2220      	movs	r2, #32
 80004ba:	4618      	mov	r0, r3
 80004bc:	f003 f989 	bl	80037d2 <_ZN4RF245writeEPKvh>
			  radio.startListening();                                       // Now, resume listening so we catch the next packets.
 80004c0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80004c4:	4618      	mov	r0, r3
 80004c6:	f003 f889 	bl	80035dc <_ZN4RF2414startListeningEv>
			  printf("Sent response: ");
 80004ca:	4827      	ldr	r0, [pc, #156]	; (8000568 <main+0x3cc>)
 80004cc:	f003 ffb4 	bl	8004438 <iprintf>
			  printdata(rx);
 80004d0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80004d4:	4618      	mov	r0, r3
 80004d6:	f7ff fe39 	bl	800014c <_Z9printdataPh>

	  /****************** Change Roles via Serial Commands ***************************/
	  uint8_t c;
	  //scanf("%c", &c );
	  //c=getFromSerial();
	  c=getchar();
 80004da:	f003 ff63 	bl	80043a4 <getchar>
 80004de:	4603      	mov	r3, r0
 80004e0:	f887 318f 	strb.w	r3, [r7, #399]	; 0x18f
	  //printf("YOU TYPED %c %d\r\n",c,c);
	  if (1)
	  {
		  //uint8_t c = buf[0];
		  //char c = toupper(Serial.read());
		  if ( (c == 'T' || c=='t') && role == 0 ){
 80004e4:	f897 318f 	ldrb.w	r3, [r7, #399]	; 0x18f
 80004e8:	2b54      	cmp	r3, #84	; 0x54
 80004ea:	d003      	beq.n	80004f4 <main+0x358>
 80004ec:	f897 318f 	ldrb.w	r3, [r7, #399]	; 0x18f
 80004f0:	2b74      	cmp	r3, #116	; 0x74
 80004f2:	d13d      	bne.n	8000570 <main+0x3d4>
 80004f4:	f897 31b3 	ldrb.w	r3, [r7, #435]	; 0x1b3
 80004f8:	f083 0301 	eor.w	r3, r3, #1
 80004fc:	b2db      	uxtb	r3, r3
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d036      	beq.n	8000570 <main+0x3d4>
			  radio.flush_tx();
 8000502:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000506:	4618      	mov	r0, r3
 8000508:	f002 fbfa 	bl	8002d00 <_ZN4RF248flush_txEv>
		  	  tx[0]=0;
 800050c:	4b06      	ldr	r3, [pc, #24]	; (8000528 <main+0x38c>)
 800050e:	2200      	movs	r2, #0
 8000510:	701a      	strb	r2, [r3, #0]
		  	  printf("*** CHANGING TO TRANSMIT ROLE -- PRESS 'R' TO SWITCH BACK\r\n");
 8000512:	4816      	ldr	r0, [pc, #88]	; (800056c <main+0x3d0>)
 8000514:	f004 f804 	bl	8004520 <puts>
			  role = 1;                  // Become the primary transmitter (ping out)
 8000518:	2301      	movs	r3, #1
 800051a:	f887 31b3 	strb.w	r3, [r7, #435]	; 0x1b3
			  c=0;
 800051e:	2300      	movs	r3, #0
 8000520:	f887 318f 	strb.w	r3, [r7, #399]	; 0x18f
 8000524:	e060      	b.n	80005e8 <main+0x44c>
 8000526:	bf00      	nop
 8000528:	200000cc 	.word	0x200000cc
 800052c:	00989680 	.word	0x00989680
 8000530:	40010800 	.word	0x40010800
 8000534:	40010c00 	.word	0x40010c00
 8000538:	080056d4 	.word	0x080056d4
 800053c:	2000008c 	.word	0x2000008c
 8000540:	08005538 	.word	0x08005538
 8000544:	08005560 	.word	0x08005560
 8000548:	08005598 	.word	0x08005598
 800054c:	080055a8 	.word	0x080055a8
 8000550:	080055b0 	.word	0x080055b0
 8000554:	00030d40 	.word	0x00030d40
 8000558:	080055bc 	.word	0x080055bc
 800055c:	080055dc 	.word	0x080055dc
 8000560:	08005608 	.word	0x08005608
 8000564:	08005610 	.word	0x08005610
 8000568:	08005620 	.word	0x08005620
 800056c:	08005630 	.word	0x08005630

		  }else
			  if ( (c == 'R' || c == 'r') && role == 1 ){
 8000570:	f897 318f 	ldrb.w	r3, [r7, #399]	; 0x18f
 8000574:	2b52      	cmp	r3, #82	; 0x52
 8000576:	d003      	beq.n	8000580 <main+0x3e4>
 8000578:	f897 318f 	ldrb.w	r3, [r7, #399]	; 0x18f
 800057c:	2b72      	cmp	r3, #114	; 0x72
 800057e:	d11a      	bne.n	80005b6 <main+0x41a>
 8000580:	f897 31b3 	ldrb.w	r3, [r7, #435]	; 0x1b3
 8000584:	2b00      	cmp	r3, #0
 8000586:	d016      	beq.n	80005b6 <main+0x41a>
				  radio.flush_tx();
 8000588:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800058c:	4618      	mov	r0, r3
 800058e:	f002 fbb7 	bl	8002d00 <_ZN4RF248flush_txEv>
			  	  tx[0]=0;
 8000592:	4b16      	ldr	r3, [pc, #88]	; (80005ec <main+0x450>)
 8000594:	2200      	movs	r2, #0
 8000596:	701a      	strb	r2, [r3, #0]
			  	  printf("*** CHANGING TO RECEIVE ROLE -- PRESS 'T' TO SWITCH BACK\r\n");
 8000598:	4815      	ldr	r0, [pc, #84]	; (80005f0 <main+0x454>)
 800059a:	f003 ffc1 	bl	8004520 <puts>
				  role = 0;                // Become the primary receiver (pong back)
 800059e:	2300      	movs	r3, #0
 80005a0:	f887 31b3 	strb.w	r3, [r7, #435]	; 0x1b3
				  radio.startListening();
 80005a4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80005a8:	4618      	mov	r0, r3
 80005aa:	f003 f817 	bl	80035dc <_ZN4RF2414startListeningEv>
				  c=0;
 80005ae:	2300      	movs	r3, #0
 80005b0:	f887 318f 	strb.w	r3, [r7, #399]	; 0x18f
 80005b4:	e018      	b.n	80005e8 <main+0x44c>
			  }else {
				    if ( (c == 'P' || c == 'p')  ){
 80005b6:	f897 318f 	ldrb.w	r3, [r7, #399]	; 0x18f
 80005ba:	2b50      	cmp	r3, #80	; 0x50
 80005bc:	d004      	beq.n	80005c8 <main+0x42c>
 80005be:	f897 318f 	ldrb.w	r3, [r7, #399]	; 0x18f
 80005c2:	2b70      	cmp	r3, #112	; 0x70
 80005c4:	f47f ae93 	bne.w	80002ee <main+0x152>
				      printf("*** PRINTIG DEBUG INFO ***\r\n");
 80005c8:	480a      	ldr	r0, [pc, #40]	; (80005f4 <main+0x458>)
 80005ca:	f003 ffa9 	bl	8004520 <puts>
				      radio.printDetails();                   // Dump the configuration of the rf unit for debugging
 80005ce:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80005d2:	4618      	mov	r0, r3
 80005d4:	f002 fd2c 	bl	8003030 <_ZN4RF2412printDetailsEv>
				      printf("*** ***** ***");
 80005d8:	4807      	ldr	r0, [pc, #28]	; (80005f8 <main+0x45c>)
 80005da:	f003 ff2d 	bl	8004438 <iprintf>
				      radio.printPrettyDetails();
 80005de:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80005e2:	4618      	mov	r0, r3
 80005e4:	f002 fdde 	bl	80031a4 <_ZN4RF2418printPrettyDetailsEv>
				    }
			  }
	  }
  }
 80005e8:	e681      	b.n	80002ee <main+0x152>
 80005ea:	bf00      	nop
 80005ec:	200000cc 	.word	0x200000cc
 80005f0:	0800566c 	.word	0x0800566c
 80005f4:	080056a8 	.word	0x080056a8
 80005f8:	080056c4 	.word	0x080056c4

080005fc <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b090      	sub	sp, #64	; 0x40
 8000600:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000602:	f107 0318 	add.w	r3, r7, #24
 8000606:	2228      	movs	r2, #40	; 0x28
 8000608:	2100      	movs	r1, #0
 800060a:	4618      	mov	r0, r3
 800060c:	f003 ff0b 	bl	8004426 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000610:	1d3b      	adds	r3, r7, #4
 8000612:	2200      	movs	r2, #0
 8000614:	601a      	str	r2, [r3, #0]
 8000616:	605a      	str	r2, [r3, #4]
 8000618:	609a      	str	r2, [r3, #8]
 800061a:	60da      	str	r2, [r3, #12]
 800061c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800061e:	2301      	movs	r3, #1
 8000620:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000622:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000626:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000628:	2300      	movs	r3, #0
 800062a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800062c:	2301      	movs	r3, #1
 800062e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000630:	2302      	movs	r3, #2
 8000632:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000634:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000638:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800063a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800063e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000640:	f107 0318 	add.w	r3, r7, #24
 8000644:	4618      	mov	r0, r3
 8000646:	f000 fd77 	bl	8001138 <HAL_RCC_OscConfig>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	bf14      	ite	ne
 8000650:	2301      	movne	r3, #1
 8000652:	2300      	moveq	r3, #0
 8000654:	b2db      	uxtb	r3, r3
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <_Z18SystemClock_Configv+0x62>
  {
    Error_Handler();
 800065a:	f000 f88b 	bl	8000774 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800065e:	230f      	movs	r3, #15
 8000660:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000662:	2302      	movs	r3, #2
 8000664:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000666:	2300      	movs	r3, #0
 8000668:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800066a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800066e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000670:	2300      	movs	r3, #0
 8000672:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000674:	1d3b      	adds	r3, r7, #4
 8000676:	2102      	movs	r1, #2
 8000678:	4618      	mov	r0, r3
 800067a:	f000 ffdd 	bl	8001638 <HAL_RCC_ClockConfig>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	bf14      	ite	ne
 8000684:	2301      	movne	r3, #1
 8000686:	2300      	moveq	r3, #0
 8000688:	b2db      	uxtb	r3, r3
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <_Z18SystemClock_Configv+0x96>
  {
    Error_Handler();
 800068e:	f000 f871 	bl	8000774 <Error_Handler>
  }
}
 8000692:	bf00      	nop
 8000694:	3740      	adds	r7, #64	; 0x40
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
	...

0800069c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800069c:	b480      	push	{r7}
 800069e:	b083      	sub	sp, #12
 80006a0:	af00      	add	r7, sp, #0
  //GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006a2:	4b0e      	ldr	r3, [pc, #56]	; (80006dc <_ZL12MX_GPIO_Initv+0x40>)
 80006a4:	699b      	ldr	r3, [r3, #24]
 80006a6:	4a0d      	ldr	r2, [pc, #52]	; (80006dc <_ZL12MX_GPIO_Initv+0x40>)
 80006a8:	f043 0320 	orr.w	r3, r3, #32
 80006ac:	6193      	str	r3, [r2, #24]
 80006ae:	4b0b      	ldr	r3, [pc, #44]	; (80006dc <_ZL12MX_GPIO_Initv+0x40>)
 80006b0:	699b      	ldr	r3, [r3, #24]
 80006b2:	f003 0320 	and.w	r3, r3, #32
 80006b6:	607b      	str	r3, [r7, #4]
 80006b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ba:	4b08      	ldr	r3, [pc, #32]	; (80006dc <_ZL12MX_GPIO_Initv+0x40>)
 80006bc:	699b      	ldr	r3, [r3, #24]
 80006be:	4a07      	ldr	r2, [pc, #28]	; (80006dc <_ZL12MX_GPIO_Initv+0x40>)
 80006c0:	f043 0304 	orr.w	r3, r3, #4
 80006c4:	6193      	str	r3, [r2, #24]
 80006c6:	4b05      	ldr	r3, [pc, #20]	; (80006dc <_ZL12MX_GPIO_Initv+0x40>)
 80006c8:	699b      	ldr	r3, [r3, #24]
 80006ca:	f003 0304 	and.w	r3, r3, #4
 80006ce:	603b      	str	r3, [r7, #0]
 80006d0:	683b      	ldr	r3, [r7, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(ce_pin_GPIO_Port, &GPIO_InitStruct);
*/
}
 80006d2:	bf00      	nop
 80006d4:	370c      	adds	r7, #12
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bc80      	pop	{r7}
 80006da:	4770      	bx	lr
 80006dc:	40021000 	.word	0x40021000

080006e0 <_Z16getCurrentMicrosv>:

/* USER CODE BEGIN 4 */
uint32_t getCurrentMicros(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b084      	sub	sp, #16
 80006e4:	af00      	add	r7, sp, #0
  /* Ensure COUNTFLAG is reset by reading SysTick control and status register */
  LL_SYSTICK_IsActiveCounterFlag();
 80006e6:	f000 f833 	bl	8000750 <_ZL30LL_SYSTICK_IsActiveCounterFlagv>
  uint32_t m = HAL_GetTick();
 80006ea:	f000 faa3 	bl	8000c34 <HAL_GetTick>
 80006ee:	60f8      	str	r0, [r7, #12]
  const uint32_t tms = SysTick->LOAD + 1;
 80006f0:	4b16      	ldr	r3, [pc, #88]	; (800074c <_Z16getCurrentMicrosv+0x6c>)
 80006f2:	685b      	ldr	r3, [r3, #4]
 80006f4:	3301      	adds	r3, #1
 80006f6:	60bb      	str	r3, [r7, #8]
  __IO uint32_t u = tms - SysTick->VAL;
 80006f8:	4b14      	ldr	r3, [pc, #80]	; (800074c <_Z16getCurrentMicrosv+0x6c>)
 80006fa:	689b      	ldr	r3, [r3, #8]
 80006fc:	68ba      	ldr	r2, [r7, #8]
 80006fe:	1ad3      	subs	r3, r2, r3
 8000700:	607b      	str	r3, [r7, #4]
  if (LL_SYSTICK_IsActiveCounterFlag()) {
 8000702:	f000 f825 	bl	8000750 <_ZL30LL_SYSTICK_IsActiveCounterFlagv>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	bf14      	ite	ne
 800070c:	2301      	movne	r3, #1
 800070e:	2300      	moveq	r3, #0
 8000710:	b2db      	uxtb	r3, r3
 8000712:	2b00      	cmp	r3, #0
 8000714:	d007      	beq.n	8000726 <_Z16getCurrentMicrosv+0x46>
    m = HAL_GetTick();
 8000716:	f000 fa8d 	bl	8000c34 <HAL_GetTick>
 800071a:	60f8      	str	r0, [r7, #12]
    u = tms - SysTick->VAL;
 800071c:	4b0b      	ldr	r3, [pc, #44]	; (800074c <_Z16getCurrentMicrosv+0x6c>)
 800071e:	689b      	ldr	r3, [r3, #8]
 8000720:	68ba      	ldr	r2, [r7, #8]
 8000722:	1ad3      	subs	r3, r2, r3
 8000724:	607b      	str	r3, [r7, #4]
  }
  return (m * 1000 + (u * 1000) / tms);
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800072c:	fb02 f203 	mul.w	r2, r2, r3
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000736:	fb01 f103 	mul.w	r1, r1, r3
 800073a:	68bb      	ldr	r3, [r7, #8]
 800073c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000740:	4413      	add	r3, r2
}
 8000742:	4618      	mov	r0, r3
 8000744:	3710      	adds	r7, #16
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	e000e010 	.word	0xe000e010

08000750 <_ZL30LL_SYSTICK_IsActiveCounterFlagv>:

static inline uint32_t LL_SYSTICK_IsActiveCounterFlag(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  return ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == (SysTick_CTRL_COUNTFLAG_Msk));
 8000754:	4b06      	ldr	r3, [pc, #24]	; (8000770 <_ZL30LL_SYSTICK_IsActiveCounterFlagv+0x20>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800075c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000760:	bf0c      	ite	eq
 8000762:	2301      	moveq	r3, #1
 8000764:	2300      	movne	r3, #0
 8000766:	b2db      	uxtb	r3, r3
}
 8000768:	4618      	mov	r0, r3
 800076a:	46bd      	mov	sp, r7
 800076c:	bc80      	pop	{r7}
 800076e:	4770      	bx	lr
 8000770:	e000e010 	.word	0xe000e010

08000774 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000778:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800077a:	e7fe      	b.n	800077a <Error_Handler+0x6>

0800077c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800077c:	b480      	push	{r7}
 800077e:	b085      	sub	sp, #20
 8000780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000782:	4b15      	ldr	r3, [pc, #84]	; (80007d8 <HAL_MspInit+0x5c>)
 8000784:	699b      	ldr	r3, [r3, #24]
 8000786:	4a14      	ldr	r2, [pc, #80]	; (80007d8 <HAL_MspInit+0x5c>)
 8000788:	f043 0301 	orr.w	r3, r3, #1
 800078c:	6193      	str	r3, [r2, #24]
 800078e:	4b12      	ldr	r3, [pc, #72]	; (80007d8 <HAL_MspInit+0x5c>)
 8000790:	699b      	ldr	r3, [r3, #24]
 8000792:	f003 0301 	and.w	r3, r3, #1
 8000796:	60bb      	str	r3, [r7, #8]
 8000798:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800079a:	4b0f      	ldr	r3, [pc, #60]	; (80007d8 <HAL_MspInit+0x5c>)
 800079c:	69db      	ldr	r3, [r3, #28]
 800079e:	4a0e      	ldr	r2, [pc, #56]	; (80007d8 <HAL_MspInit+0x5c>)
 80007a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007a4:	61d3      	str	r3, [r2, #28]
 80007a6:	4b0c      	ldr	r3, [pc, #48]	; (80007d8 <HAL_MspInit+0x5c>)
 80007a8:	69db      	ldr	r3, [r3, #28]
 80007aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ae:	607b      	str	r3, [r7, #4]
 80007b0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80007b2:	4b0a      	ldr	r3, [pc, #40]	; (80007dc <HAL_MspInit+0x60>)
 80007b4:	685b      	ldr	r3, [r3, #4]
 80007b6:	60fb      	str	r3, [r7, #12]
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80007be:	60fb      	str	r3, [r7, #12]
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007c6:	60fb      	str	r3, [r7, #12]
 80007c8:	4a04      	ldr	r2, [pc, #16]	; (80007dc <HAL_MspInit+0x60>)
 80007ca:	68fb      	ldr	r3, [r7, #12]
 80007cc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ce:	bf00      	nop
 80007d0:	3714      	adds	r7, #20
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bc80      	pop	{r7}
 80007d6:	4770      	bx	lr
 80007d8:	40021000 	.word	0x40021000
 80007dc:	40010000 	.word	0x40010000

080007e0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b088      	sub	sp, #32
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e8:	f107 0310 	add.w	r3, r7, #16
 80007ec:	2200      	movs	r2, #0
 80007ee:	601a      	str	r2, [r3, #0]
 80007f0:	605a      	str	r2, [r3, #4]
 80007f2:	609a      	str	r2, [r3, #8]
 80007f4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	4a1b      	ldr	r2, [pc, #108]	; (8000868 <HAL_SPI_MspInit+0x88>)
 80007fc:	4293      	cmp	r3, r2
 80007fe:	d12f      	bne.n	8000860 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000800:	4b1a      	ldr	r3, [pc, #104]	; (800086c <HAL_SPI_MspInit+0x8c>)
 8000802:	699b      	ldr	r3, [r3, #24]
 8000804:	4a19      	ldr	r2, [pc, #100]	; (800086c <HAL_SPI_MspInit+0x8c>)
 8000806:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800080a:	6193      	str	r3, [r2, #24]
 800080c:	4b17      	ldr	r3, [pc, #92]	; (800086c <HAL_SPI_MspInit+0x8c>)
 800080e:	699b      	ldr	r3, [r3, #24]
 8000810:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000814:	60fb      	str	r3, [r7, #12]
 8000816:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000818:	4b14      	ldr	r3, [pc, #80]	; (800086c <HAL_SPI_MspInit+0x8c>)
 800081a:	699b      	ldr	r3, [r3, #24]
 800081c:	4a13      	ldr	r2, [pc, #76]	; (800086c <HAL_SPI_MspInit+0x8c>)
 800081e:	f043 0304 	orr.w	r3, r3, #4
 8000822:	6193      	str	r3, [r2, #24]
 8000824:	4b11      	ldr	r3, [pc, #68]	; (800086c <HAL_SPI_MspInit+0x8c>)
 8000826:	699b      	ldr	r3, [r3, #24]
 8000828:	f003 0304 	and.w	r3, r3, #4
 800082c:	60bb      	str	r3, [r7, #8]
 800082e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000830:	23a0      	movs	r3, #160	; 0xa0
 8000832:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000834:	2302      	movs	r3, #2
 8000836:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000838:	2303      	movs	r3, #3
 800083a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800083c:	f107 0310 	add.w	r3, r7, #16
 8000840:	4619      	mov	r1, r3
 8000842:	480b      	ldr	r0, [pc, #44]	; (8000870 <HAL_SPI_MspInit+0x90>)
 8000844:	f000 fb06 	bl	8000e54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000848:	2340      	movs	r3, #64	; 0x40
 800084a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800084c:	2300      	movs	r3, #0
 800084e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000850:	2300      	movs	r3, #0
 8000852:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000854:	f107 0310 	add.w	r3, r7, #16
 8000858:	4619      	mov	r1, r3
 800085a:	4805      	ldr	r0, [pc, #20]	; (8000870 <HAL_SPI_MspInit+0x90>)
 800085c:	f000 fafa 	bl	8000e54 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000860:	bf00      	nop
 8000862:	3720      	adds	r7, #32
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	40013000 	.word	0x40013000
 800086c:	40021000 	.word	0x40021000
 8000870:	40010800 	.word	0x40010800

08000874 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000874:	b480      	push	{r7}
 8000876:	b085      	sub	sp, #20
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a09      	ldr	r2, [pc, #36]	; (80008a8 <HAL_TIM_Base_MspInit+0x34>)
 8000882:	4293      	cmp	r3, r2
 8000884:	d10b      	bne.n	800089e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000886:	4b09      	ldr	r3, [pc, #36]	; (80008ac <HAL_TIM_Base_MspInit+0x38>)
 8000888:	699b      	ldr	r3, [r3, #24]
 800088a:	4a08      	ldr	r2, [pc, #32]	; (80008ac <HAL_TIM_Base_MspInit+0x38>)
 800088c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000890:	6193      	str	r3, [r2, #24]
 8000892:	4b06      	ldr	r3, [pc, #24]	; (80008ac <HAL_TIM_Base_MspInit+0x38>)
 8000894:	699b      	ldr	r3, [r3, #24]
 8000896:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800089a:	60fb      	str	r3, [r7, #12]
 800089c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800089e:	bf00      	nop
 80008a0:	3714      	adds	r7, #20
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bc80      	pop	{r7}
 80008a6:	4770      	bx	lr
 80008a8:	40012c00 	.word	0x40012c00
 80008ac:	40021000 	.word	0x40021000

080008b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b088      	sub	sp, #32
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b8:	f107 0310 	add.w	r3, r7, #16
 80008bc:	2200      	movs	r2, #0
 80008be:	601a      	str	r2, [r3, #0]
 80008c0:	605a      	str	r2, [r3, #4]
 80008c2:	609a      	str	r2, [r3, #8]
 80008c4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	4a1c      	ldr	r2, [pc, #112]	; (800093c <HAL_UART_MspInit+0x8c>)
 80008cc:	4293      	cmp	r3, r2
 80008ce:	d131      	bne.n	8000934 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80008d0:	4b1b      	ldr	r3, [pc, #108]	; (8000940 <HAL_UART_MspInit+0x90>)
 80008d2:	699b      	ldr	r3, [r3, #24]
 80008d4:	4a1a      	ldr	r2, [pc, #104]	; (8000940 <HAL_UART_MspInit+0x90>)
 80008d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008da:	6193      	str	r3, [r2, #24]
 80008dc:	4b18      	ldr	r3, [pc, #96]	; (8000940 <HAL_UART_MspInit+0x90>)
 80008de:	699b      	ldr	r3, [r3, #24]
 80008e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008e4:	60fb      	str	r3, [r7, #12]
 80008e6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e8:	4b15      	ldr	r3, [pc, #84]	; (8000940 <HAL_UART_MspInit+0x90>)
 80008ea:	699b      	ldr	r3, [r3, #24]
 80008ec:	4a14      	ldr	r2, [pc, #80]	; (8000940 <HAL_UART_MspInit+0x90>)
 80008ee:	f043 0304 	orr.w	r3, r3, #4
 80008f2:	6193      	str	r3, [r2, #24]
 80008f4:	4b12      	ldr	r3, [pc, #72]	; (8000940 <HAL_UART_MspInit+0x90>)
 80008f6:	699b      	ldr	r3, [r3, #24]
 80008f8:	f003 0304 	and.w	r3, r3, #4
 80008fc:	60bb      	str	r3, [r7, #8]
 80008fe:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000900:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000904:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000906:	2302      	movs	r3, #2
 8000908:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800090a:	2303      	movs	r3, #3
 800090c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800090e:	f107 0310 	add.w	r3, r7, #16
 8000912:	4619      	mov	r1, r3
 8000914:	480b      	ldr	r0, [pc, #44]	; (8000944 <HAL_UART_MspInit+0x94>)
 8000916:	f000 fa9d 	bl	8000e54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800091a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800091e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000920:	2300      	movs	r3, #0
 8000922:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000924:	2300      	movs	r3, #0
 8000926:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000928:	f107 0310 	add.w	r3, r7, #16
 800092c:	4619      	mov	r1, r3
 800092e:	4805      	ldr	r0, [pc, #20]	; (8000944 <HAL_UART_MspInit+0x94>)
 8000930:	f000 fa90 	bl	8000e54 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000934:	bf00      	nop
 8000936:	3720      	adds	r7, #32
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	40013800 	.word	0x40013800
 8000940:	40021000 	.word	0x40021000
 8000944:	40010800 	.word	0x40010800

08000948 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800094c:	e7fe      	b.n	800094c <NMI_Handler+0x4>

0800094e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800094e:	b480      	push	{r7}
 8000950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000952:	e7fe      	b.n	8000952 <HardFault_Handler+0x4>

08000954 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000958:	e7fe      	b.n	8000958 <MemManage_Handler+0x4>

0800095a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800095a:	b480      	push	{r7}
 800095c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800095e:	e7fe      	b.n	800095e <BusFault_Handler+0x4>

08000960 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000964:	e7fe      	b.n	8000964 <UsageFault_Handler+0x4>

08000966 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000966:	b480      	push	{r7}
 8000968:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800096a:	bf00      	nop
 800096c:	46bd      	mov	sp, r7
 800096e:	bc80      	pop	{r7}
 8000970:	4770      	bx	lr

08000972 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000972:	b480      	push	{r7}
 8000974:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000976:	bf00      	nop
 8000978:	46bd      	mov	sp, r7
 800097a:	bc80      	pop	{r7}
 800097c:	4770      	bx	lr

0800097e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800097e:	b480      	push	{r7}
 8000980:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000982:	bf00      	nop
 8000984:	46bd      	mov	sp, r7
 8000986:	bc80      	pop	{r7}
 8000988:	4770      	bx	lr

0800098a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800098a:	b580      	push	{r7, lr}
 800098c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800098e:	f000 f93f 	bl	8000c10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000992:	bf00      	nop
 8000994:	bd80      	pop	{r7, pc}
	...

08000998 <__io_putchar>:
extern int errno;
//extern int __io_putchar(int ch) __attribute__((weak));
extern UART_HandleTypeDef huart1; // access huart1 instance

__attribute__((weak)) int __io_putchar(int ch)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b084      	sub	sp, #16
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 80009a0:	1d39      	adds	r1, r7, #4
 80009a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80009a6:	2201      	movs	r2, #1
 80009a8:	4807      	ldr	r0, [pc, #28]	; (80009c8 <__io_putchar+0x30>)
 80009aa:	f001 fda2 	bl	80024f2 <HAL_UART_Transmit>
 80009ae:	4603      	mov	r3, r0
 80009b0:	73fb      	strb	r3, [r7, #15]
    return (status == HAL_OK ? ch : 0);
 80009b2:	7bfb      	ldrb	r3, [r7, #15]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d101      	bne.n	80009bc <__io_putchar+0x24>
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	e000      	b.n	80009be <__io_putchar+0x26>
 80009bc:	2300      	movs	r3, #0
}
 80009be:	4618      	mov	r0, r3
 80009c0:	3710      	adds	r7, #16
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	2000008c 	.word	0x2000008c

080009cc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}
#define STDIN_FILENO 0

int _read(int fd, char* ptr, int len) {
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b086      	sub	sp, #24
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	60f8      	str	r0, [r7, #12]
 80009d4:	60b9      	str	r1, [r7, #8]
 80009d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d117      	bne.n	8000a0e <_read+0x42>
    hstatus = HAL_UART_Receive(&huart1, (uint8_t *) ptr, 1, 0xFF);
 80009de:	23ff      	movs	r3, #255	; 0xff
 80009e0:	2201      	movs	r2, #1
 80009e2:	68b9      	ldr	r1, [r7, #8]
 80009e4:	480f      	ldr	r0, [pc, #60]	; (8000a24 <_read+0x58>)
 80009e6:	f001 fe16 	bl	8002616 <HAL_UART_Receive>
 80009ea:	4603      	mov	r3, r0
 80009ec:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80009ee:	7dfb      	ldrb	r3, [r7, #23]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d101      	bne.n	80009f8 <_read+0x2c>
    	return 1;
 80009f4:	2301      	movs	r3, #1
 80009f6:	e011      	b.n	8000a1c <_read+0x50>
    else
    {
    	*ptr=0;
 80009f8:	68bb      	ldr	r3, [r7, #8]
 80009fa:	2200      	movs	r2, #0
 80009fc:	701a      	strb	r2, [r3, #0]
    	errno = EIO;
 80009fe:	f003 fccb 	bl	8004398 <__errno>
 8000a02:	4602      	mov	r2, r0
 8000a04:	2305      	movs	r3, #5
 8000a06:	6013      	str	r3, [r2, #0]
    	return -1;
 8000a08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a0c:	e006      	b.n	8000a1c <_read+0x50>
    }
  }
  errno = EBADF;
 8000a0e:	f003 fcc3 	bl	8004398 <__errno>
 8000a12:	4602      	mov	r2, r0
 8000a14:	2309      	movs	r3, #9
 8000a16:	6013      	str	r3, [r2, #0]
  return -1;
 8000a18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	3718      	adds	r7, #24
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	2000008c 	.word	0x2000008c

08000a28 <_write>:
		// *ptr++ = __io_getchar();
return len;
}*/

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b086      	sub	sp, #24
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	60f8      	str	r0, [r7, #12]
 8000a30:	60b9      	str	r1, [r7, #8]
 8000a32:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a34:	2300      	movs	r3, #0
 8000a36:	617b      	str	r3, [r7, #20]
 8000a38:	e009      	b.n	8000a4e <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000a3a:	68bb      	ldr	r3, [r7, #8]
 8000a3c:	1c5a      	adds	r2, r3, #1
 8000a3e:	60ba      	str	r2, [r7, #8]
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	4618      	mov	r0, r3
 8000a44:	f7ff ffa8 	bl	8000998 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a48:	697b      	ldr	r3, [r7, #20]
 8000a4a:	3301      	adds	r3, #1
 8000a4c:	617b      	str	r3, [r7, #20]
 8000a4e:	697a      	ldr	r2, [r7, #20]
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	429a      	cmp	r2, r3
 8000a54:	dbf1      	blt.n	8000a3a <_write+0x12>
	}
	return len;
 8000a56:	687b      	ldr	r3, [r7, #4]
}
 8000a58:	4618      	mov	r0, r3
 8000a5a:	3718      	adds	r7, #24
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}

08000a60 <_close>:

int _close(int file)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b083      	sub	sp, #12
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
	return -1;
 8000a68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	370c      	adds	r7, #12
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bc80      	pop	{r7}
 8000a74:	4770      	bx	lr

08000a76 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a76:	b480      	push	{r7}
 8000a78:	b083      	sub	sp, #12
 8000a7a:	af00      	add	r7, sp, #0
 8000a7c:	6078      	str	r0, [r7, #4]
 8000a7e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a86:	605a      	str	r2, [r3, #4]
	return 0;
 8000a88:	2300      	movs	r3, #0
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	370c      	adds	r7, #12
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bc80      	pop	{r7}
 8000a92:	4770      	bx	lr

08000a94 <_isatty>:

int _isatty(int file)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
	return 1;
 8000a9c:	2301      	movs	r3, #1
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	370c      	adds	r7, #12
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bc80      	pop	{r7}
 8000aa6:	4770      	bx	lr

08000aa8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b085      	sub	sp, #20
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	60f8      	str	r0, [r7, #12]
 8000ab0:	60b9      	str	r1, [r7, #8]
 8000ab2:	607a      	str	r2, [r7, #4]
	return 0;
 8000ab4:	2300      	movs	r3, #0
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	3714      	adds	r7, #20
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bc80      	pop	{r7}
 8000abe:	4770      	bx	lr

08000ac0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b086      	sub	sp, #24
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ac8:	4a14      	ldr	r2, [pc, #80]	; (8000b1c <_sbrk+0x5c>)
 8000aca:	4b15      	ldr	r3, [pc, #84]	; (8000b20 <_sbrk+0x60>)
 8000acc:	1ad3      	subs	r3, r2, r3
 8000ace:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ad4:	4b13      	ldr	r3, [pc, #76]	; (8000b24 <_sbrk+0x64>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d102      	bne.n	8000ae2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000adc:	4b11      	ldr	r3, [pc, #68]	; (8000b24 <_sbrk+0x64>)
 8000ade:	4a12      	ldr	r2, [pc, #72]	; (8000b28 <_sbrk+0x68>)
 8000ae0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ae2:	4b10      	ldr	r3, [pc, #64]	; (8000b24 <_sbrk+0x64>)
 8000ae4:	681a      	ldr	r2, [r3, #0]
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	4413      	add	r3, r2
 8000aea:	693a      	ldr	r2, [r7, #16]
 8000aec:	429a      	cmp	r2, r3
 8000aee:	d207      	bcs.n	8000b00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000af0:	f003 fc52 	bl	8004398 <__errno>
 8000af4:	4602      	mov	r2, r0
 8000af6:	230c      	movs	r3, #12
 8000af8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000afa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000afe:	e009      	b.n	8000b14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b00:	4b08      	ldr	r3, [pc, #32]	; (8000b24 <_sbrk+0x64>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b06:	4b07      	ldr	r3, [pc, #28]	; (8000b24 <_sbrk+0x64>)
 8000b08:	681a      	ldr	r2, [r3, #0]
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	4413      	add	r3, r2
 8000b0e:	4a05      	ldr	r2, [pc, #20]	; (8000b24 <_sbrk+0x64>)
 8000b10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b12:	68fb      	ldr	r3, [r7, #12]
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	3718      	adds	r7, #24
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	20005000 	.word	0x20005000
 8000b20:	00000400 	.word	0x00000400
 8000b24:	200000ec 	.word	0x200000ec
 8000b28:	20000100 	.word	0x20000100

08000b2c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b30:	bf00      	nop
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bc80      	pop	{r7}
 8000b36:	4770      	bx	lr

08000b38 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000b38:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000b3a:	e003      	b.n	8000b44 <LoopCopyDataInit>

08000b3c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000b3c:	4b0b      	ldr	r3, [pc, #44]	; (8000b6c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000b3e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000b40:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000b42:	3104      	adds	r1, #4

08000b44 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000b44:	480a      	ldr	r0, [pc, #40]	; (8000b70 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000b46:	4b0b      	ldr	r3, [pc, #44]	; (8000b74 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000b48:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000b4a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000b4c:	d3f6      	bcc.n	8000b3c <CopyDataInit>
  ldr r2, =_sbss
 8000b4e:	4a0a      	ldr	r2, [pc, #40]	; (8000b78 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000b50:	e002      	b.n	8000b58 <LoopFillZerobss>

08000b52 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000b52:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000b54:	f842 3b04 	str.w	r3, [r2], #4

08000b58 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000b58:	4b08      	ldr	r3, [pc, #32]	; (8000b7c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000b5a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000b5c:	d3f9      	bcc.n	8000b52 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b5e:	f7ff ffe5 	bl	8000b2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b62:	f003 fc31 	bl	80043c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b66:	f7ff fb19 	bl	800019c <main>
  bx lr
 8000b6a:	4770      	bx	lr
  ldr r3, =_sidata
 8000b6c:	08005cbc 	.word	0x08005cbc
  ldr r0, =_sdata
 8000b70:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000b74:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8000b78:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8000b7c:	20000100 	.word	0x20000100

08000b80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b80:	e7fe      	b.n	8000b80 <ADC1_2_IRQHandler>
	...

08000b84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b88:	4b08      	ldr	r3, [pc, #32]	; (8000bac <HAL_Init+0x28>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4a07      	ldr	r2, [pc, #28]	; (8000bac <HAL_Init+0x28>)
 8000b8e:	f043 0310 	orr.w	r3, r3, #16
 8000b92:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b94:	2003      	movs	r0, #3
 8000b96:	f000 f929 	bl	8000dec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b9a:	2000      	movs	r0, #0
 8000b9c:	f000 f808 	bl	8000bb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ba0:	f7ff fdec 	bl	800077c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ba4:	2300      	movs	r3, #0
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	40022000 	.word	0x40022000

08000bb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bb8:	4b12      	ldr	r3, [pc, #72]	; (8000c04 <HAL_InitTick+0x54>)
 8000bba:	681a      	ldr	r2, [r3, #0]
 8000bbc:	4b12      	ldr	r3, [pc, #72]	; (8000c08 <HAL_InitTick+0x58>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bca:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f000 f933 	bl	8000e3a <HAL_SYSTICK_Config>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	e00e      	b.n	8000bfc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	2b0f      	cmp	r3, #15
 8000be2:	d80a      	bhi.n	8000bfa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000be4:	2200      	movs	r2, #0
 8000be6:	6879      	ldr	r1, [r7, #4]
 8000be8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bec:	f000 f909 	bl	8000e02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bf0:	4a06      	ldr	r2, [pc, #24]	; (8000c0c <HAL_InitTick+0x5c>)
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	e000      	b.n	8000bfc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bfa:	2301      	movs	r3, #1
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	3708      	adds	r7, #8
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	20000000 	.word	0x20000000
 8000c08:	20000008 	.word	0x20000008
 8000c0c:	20000004 	.word	0x20000004

08000c10 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c14:	4b05      	ldr	r3, [pc, #20]	; (8000c2c <HAL_IncTick+0x1c>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	461a      	mov	r2, r3
 8000c1a:	4b05      	ldr	r3, [pc, #20]	; (8000c30 <HAL_IncTick+0x20>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4413      	add	r3, r2
 8000c20:	4a03      	ldr	r2, [pc, #12]	; (8000c30 <HAL_IncTick+0x20>)
 8000c22:	6013      	str	r3, [r2, #0]
}
 8000c24:	bf00      	nop
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bc80      	pop	{r7}
 8000c2a:	4770      	bx	lr
 8000c2c:	20000008 	.word	0x20000008
 8000c30:	200000f8 	.word	0x200000f8

08000c34 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  return uwTick;
 8000c38:	4b02      	ldr	r3, [pc, #8]	; (8000c44 <HAL_GetTick+0x10>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bc80      	pop	{r7}
 8000c42:	4770      	bx	lr
 8000c44:	200000f8 	.word	0x200000f8

08000c48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b084      	sub	sp, #16
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c50:	f7ff fff0 	bl	8000c34 <HAL_GetTick>
 8000c54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000c60:	d005      	beq.n	8000c6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c62:	4b09      	ldr	r3, [pc, #36]	; (8000c88 <HAL_Delay+0x40>)
 8000c64:	781b      	ldrb	r3, [r3, #0]
 8000c66:	461a      	mov	r2, r3
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	4413      	add	r3, r2
 8000c6c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c6e:	bf00      	nop
 8000c70:	f7ff ffe0 	bl	8000c34 <HAL_GetTick>
 8000c74:	4602      	mov	r2, r0
 8000c76:	68bb      	ldr	r3, [r7, #8]
 8000c78:	1ad3      	subs	r3, r2, r3
 8000c7a:	68fa      	ldr	r2, [r7, #12]
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	d8f7      	bhi.n	8000c70 <HAL_Delay+0x28>
  {
  }
}
 8000c80:	bf00      	nop
 8000c82:	3710      	adds	r7, #16
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	20000008 	.word	0x20000008

08000c8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b085      	sub	sp, #20
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	f003 0307 	and.w	r3, r3, #7
 8000c9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c9c:	4b0c      	ldr	r3, [pc, #48]	; (8000cd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000c9e:	68db      	ldr	r3, [r3, #12]
 8000ca0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ca2:	68ba      	ldr	r2, [r7, #8]
 8000ca4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ca8:	4013      	ands	r3, r2
 8000caa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cb4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cbe:	4a04      	ldr	r2, [pc, #16]	; (8000cd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	60d3      	str	r3, [r2, #12]
}
 8000cc4:	bf00      	nop
 8000cc6:	3714      	adds	r7, #20
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bc80      	pop	{r7}
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	e000ed00 	.word	0xe000ed00

08000cd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cd8:	4b04      	ldr	r3, [pc, #16]	; (8000cec <__NVIC_GetPriorityGrouping+0x18>)
 8000cda:	68db      	ldr	r3, [r3, #12]
 8000cdc:	0a1b      	lsrs	r3, r3, #8
 8000cde:	f003 0307 	and.w	r3, r3, #7
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bc80      	pop	{r7}
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	e000ed00 	.word	0xe000ed00

08000cf0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	6039      	str	r1, [r7, #0]
 8000cfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	db0a      	blt.n	8000d1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	b2da      	uxtb	r2, r3
 8000d08:	490c      	ldr	r1, [pc, #48]	; (8000d3c <__NVIC_SetPriority+0x4c>)
 8000d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0e:	0112      	lsls	r2, r2, #4
 8000d10:	b2d2      	uxtb	r2, r2
 8000d12:	440b      	add	r3, r1
 8000d14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d18:	e00a      	b.n	8000d30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	b2da      	uxtb	r2, r3
 8000d1e:	4908      	ldr	r1, [pc, #32]	; (8000d40 <__NVIC_SetPriority+0x50>)
 8000d20:	79fb      	ldrb	r3, [r7, #7]
 8000d22:	f003 030f 	and.w	r3, r3, #15
 8000d26:	3b04      	subs	r3, #4
 8000d28:	0112      	lsls	r2, r2, #4
 8000d2a:	b2d2      	uxtb	r2, r2
 8000d2c:	440b      	add	r3, r1
 8000d2e:	761a      	strb	r2, [r3, #24]
}
 8000d30:	bf00      	nop
 8000d32:	370c      	adds	r7, #12
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bc80      	pop	{r7}
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	e000e100 	.word	0xe000e100
 8000d40:	e000ed00 	.word	0xe000ed00

08000d44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b089      	sub	sp, #36	; 0x24
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	60f8      	str	r0, [r7, #12]
 8000d4c:	60b9      	str	r1, [r7, #8]
 8000d4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	f003 0307 	and.w	r3, r3, #7
 8000d56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d58:	69fb      	ldr	r3, [r7, #28]
 8000d5a:	f1c3 0307 	rsb	r3, r3, #7
 8000d5e:	2b04      	cmp	r3, #4
 8000d60:	bf28      	it	cs
 8000d62:	2304      	movcs	r3, #4
 8000d64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d66:	69fb      	ldr	r3, [r7, #28]
 8000d68:	3304      	adds	r3, #4
 8000d6a:	2b06      	cmp	r3, #6
 8000d6c:	d902      	bls.n	8000d74 <NVIC_EncodePriority+0x30>
 8000d6e:	69fb      	ldr	r3, [r7, #28]
 8000d70:	3b03      	subs	r3, #3
 8000d72:	e000      	b.n	8000d76 <NVIC_EncodePriority+0x32>
 8000d74:	2300      	movs	r3, #0
 8000d76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d7c:	69bb      	ldr	r3, [r7, #24]
 8000d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d82:	43da      	mvns	r2, r3
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	401a      	ands	r2, r3
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d8c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	fa01 f303 	lsl.w	r3, r1, r3
 8000d96:	43d9      	mvns	r1, r3
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d9c:	4313      	orrs	r3, r2
         );
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3724      	adds	r7, #36	; 0x24
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bc80      	pop	{r7}
 8000da6:	4770      	bx	lr

08000da8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	3b01      	subs	r3, #1
 8000db4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000db8:	d301      	bcc.n	8000dbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dba:	2301      	movs	r3, #1
 8000dbc:	e00f      	b.n	8000dde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dbe:	4a0a      	ldr	r2, [pc, #40]	; (8000de8 <SysTick_Config+0x40>)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	3b01      	subs	r3, #1
 8000dc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dc6:	210f      	movs	r1, #15
 8000dc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000dcc:	f7ff ff90 	bl	8000cf0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dd0:	4b05      	ldr	r3, [pc, #20]	; (8000de8 <SysTick_Config+0x40>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dd6:	4b04      	ldr	r3, [pc, #16]	; (8000de8 <SysTick_Config+0x40>)
 8000dd8:	2207      	movs	r2, #7
 8000dda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ddc:	2300      	movs	r3, #0
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	e000e010 	.word	0xe000e010

08000dec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000df4:	6878      	ldr	r0, [r7, #4]
 8000df6:	f7ff ff49 	bl	8000c8c <__NVIC_SetPriorityGrouping>
}
 8000dfa:	bf00      	nop
 8000dfc:	3708      	adds	r7, #8
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}

08000e02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e02:	b580      	push	{r7, lr}
 8000e04:	b086      	sub	sp, #24
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	4603      	mov	r3, r0
 8000e0a:	60b9      	str	r1, [r7, #8]
 8000e0c:	607a      	str	r2, [r7, #4]
 8000e0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e10:	2300      	movs	r3, #0
 8000e12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e14:	f7ff ff5e 	bl	8000cd4 <__NVIC_GetPriorityGrouping>
 8000e18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e1a:	687a      	ldr	r2, [r7, #4]
 8000e1c:	68b9      	ldr	r1, [r7, #8]
 8000e1e:	6978      	ldr	r0, [r7, #20]
 8000e20:	f7ff ff90 	bl	8000d44 <NVIC_EncodePriority>
 8000e24:	4602      	mov	r2, r0
 8000e26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e2a:	4611      	mov	r1, r2
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f7ff ff5f 	bl	8000cf0 <__NVIC_SetPriority>
}
 8000e32:	bf00      	nop
 8000e34:	3718      	adds	r7, #24
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}

08000e3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e3a:	b580      	push	{r7, lr}
 8000e3c:	b082      	sub	sp, #8
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e42:	6878      	ldr	r0, [r7, #4]
 8000e44:	f7ff ffb0 	bl	8000da8 <SysTick_Config>
 8000e48:	4603      	mov	r3, r0
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3708      	adds	r7, #8
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
	...

08000e54 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b08b      	sub	sp, #44	; 0x2c
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
 8000e5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000e62:	2300      	movs	r3, #0
 8000e64:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e66:	e127      	b.n	80010b8 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000e68:	2201      	movs	r2, #1
 8000e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e70:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	69fa      	ldr	r2, [r7, #28]
 8000e78:	4013      	ands	r3, r2
 8000e7a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000e7c:	69ba      	ldr	r2, [r7, #24]
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	429a      	cmp	r2, r3
 8000e82:	f040 8116 	bne.w	80010b2 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	2b12      	cmp	r3, #18
 8000e8c:	d034      	beq.n	8000ef8 <HAL_GPIO_Init+0xa4>
 8000e8e:	2b12      	cmp	r3, #18
 8000e90:	d80d      	bhi.n	8000eae <HAL_GPIO_Init+0x5a>
 8000e92:	2b02      	cmp	r3, #2
 8000e94:	d02b      	beq.n	8000eee <HAL_GPIO_Init+0x9a>
 8000e96:	2b02      	cmp	r3, #2
 8000e98:	d804      	bhi.n	8000ea4 <HAL_GPIO_Init+0x50>
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d031      	beq.n	8000f02 <HAL_GPIO_Init+0xae>
 8000e9e:	2b01      	cmp	r3, #1
 8000ea0:	d01c      	beq.n	8000edc <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000ea2:	e048      	b.n	8000f36 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000ea4:	2b03      	cmp	r3, #3
 8000ea6:	d043      	beq.n	8000f30 <HAL_GPIO_Init+0xdc>
 8000ea8:	2b11      	cmp	r3, #17
 8000eaa:	d01b      	beq.n	8000ee4 <HAL_GPIO_Init+0x90>
          break;
 8000eac:	e043      	b.n	8000f36 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000eae:	4a89      	ldr	r2, [pc, #548]	; (80010d4 <HAL_GPIO_Init+0x280>)
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	d026      	beq.n	8000f02 <HAL_GPIO_Init+0xae>
 8000eb4:	4a87      	ldr	r2, [pc, #540]	; (80010d4 <HAL_GPIO_Init+0x280>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d806      	bhi.n	8000ec8 <HAL_GPIO_Init+0x74>
 8000eba:	4a87      	ldr	r2, [pc, #540]	; (80010d8 <HAL_GPIO_Init+0x284>)
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	d020      	beq.n	8000f02 <HAL_GPIO_Init+0xae>
 8000ec0:	4a86      	ldr	r2, [pc, #536]	; (80010dc <HAL_GPIO_Init+0x288>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d01d      	beq.n	8000f02 <HAL_GPIO_Init+0xae>
          break;
 8000ec6:	e036      	b.n	8000f36 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000ec8:	4a85      	ldr	r2, [pc, #532]	; (80010e0 <HAL_GPIO_Init+0x28c>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d019      	beq.n	8000f02 <HAL_GPIO_Init+0xae>
 8000ece:	4a85      	ldr	r2, [pc, #532]	; (80010e4 <HAL_GPIO_Init+0x290>)
 8000ed0:	4293      	cmp	r3, r2
 8000ed2:	d016      	beq.n	8000f02 <HAL_GPIO_Init+0xae>
 8000ed4:	4a84      	ldr	r2, [pc, #528]	; (80010e8 <HAL_GPIO_Init+0x294>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d013      	beq.n	8000f02 <HAL_GPIO_Init+0xae>
          break;
 8000eda:	e02c      	b.n	8000f36 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	68db      	ldr	r3, [r3, #12]
 8000ee0:	623b      	str	r3, [r7, #32]
          break;
 8000ee2:	e028      	b.n	8000f36 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	68db      	ldr	r3, [r3, #12]
 8000ee8:	3304      	adds	r3, #4
 8000eea:	623b      	str	r3, [r7, #32]
          break;
 8000eec:	e023      	b.n	8000f36 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	68db      	ldr	r3, [r3, #12]
 8000ef2:	3308      	adds	r3, #8
 8000ef4:	623b      	str	r3, [r7, #32]
          break;
 8000ef6:	e01e      	b.n	8000f36 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	68db      	ldr	r3, [r3, #12]
 8000efc:	330c      	adds	r3, #12
 8000efe:	623b      	str	r3, [r7, #32]
          break;
 8000f00:	e019      	b.n	8000f36 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	689b      	ldr	r3, [r3, #8]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d102      	bne.n	8000f10 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000f0a:	2304      	movs	r3, #4
 8000f0c:	623b      	str	r3, [r7, #32]
          break;
 8000f0e:	e012      	b.n	8000f36 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	689b      	ldr	r3, [r3, #8]
 8000f14:	2b01      	cmp	r3, #1
 8000f16:	d105      	bne.n	8000f24 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f18:	2308      	movs	r3, #8
 8000f1a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	69fa      	ldr	r2, [r7, #28]
 8000f20:	611a      	str	r2, [r3, #16]
          break;
 8000f22:	e008      	b.n	8000f36 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f24:	2308      	movs	r3, #8
 8000f26:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	69fa      	ldr	r2, [r7, #28]
 8000f2c:	615a      	str	r2, [r3, #20]
          break;
 8000f2e:	e002      	b.n	8000f36 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000f30:	2300      	movs	r3, #0
 8000f32:	623b      	str	r3, [r7, #32]
          break;
 8000f34:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f36:	69bb      	ldr	r3, [r7, #24]
 8000f38:	2bff      	cmp	r3, #255	; 0xff
 8000f3a:	d801      	bhi.n	8000f40 <HAL_GPIO_Init+0xec>
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	e001      	b.n	8000f44 <HAL_GPIO_Init+0xf0>
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	3304      	adds	r3, #4
 8000f44:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f46:	69bb      	ldr	r3, [r7, #24]
 8000f48:	2bff      	cmp	r3, #255	; 0xff
 8000f4a:	d802      	bhi.n	8000f52 <HAL_GPIO_Init+0xfe>
 8000f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	e002      	b.n	8000f58 <HAL_GPIO_Init+0x104>
 8000f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f54:	3b08      	subs	r3, #8
 8000f56:	009b      	lsls	r3, r3, #2
 8000f58:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	210f      	movs	r1, #15
 8000f60:	693b      	ldr	r3, [r7, #16]
 8000f62:	fa01 f303 	lsl.w	r3, r1, r3
 8000f66:	43db      	mvns	r3, r3
 8000f68:	401a      	ands	r2, r3
 8000f6a:	6a39      	ldr	r1, [r7, #32]
 8000f6c:	693b      	ldr	r3, [r7, #16]
 8000f6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f72:	431a      	orrs	r2, r3
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	f000 8096 	beq.w	80010b2 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f86:	4b59      	ldr	r3, [pc, #356]	; (80010ec <HAL_GPIO_Init+0x298>)
 8000f88:	699b      	ldr	r3, [r3, #24]
 8000f8a:	4a58      	ldr	r2, [pc, #352]	; (80010ec <HAL_GPIO_Init+0x298>)
 8000f8c:	f043 0301 	orr.w	r3, r3, #1
 8000f90:	6193      	str	r3, [r2, #24]
 8000f92:	4b56      	ldr	r3, [pc, #344]	; (80010ec <HAL_GPIO_Init+0x298>)
 8000f94:	699b      	ldr	r3, [r3, #24]
 8000f96:	f003 0301 	and.w	r3, r3, #1
 8000f9a:	60bb      	str	r3, [r7, #8]
 8000f9c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000f9e:	4a54      	ldr	r2, [pc, #336]	; (80010f0 <HAL_GPIO_Init+0x29c>)
 8000fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa2:	089b      	lsrs	r3, r3, #2
 8000fa4:	3302      	adds	r3, #2
 8000fa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000faa:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fae:	f003 0303 	and.w	r3, r3, #3
 8000fb2:	009b      	lsls	r3, r3, #2
 8000fb4:	220f      	movs	r2, #15
 8000fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fba:	43db      	mvns	r3, r3
 8000fbc:	68fa      	ldr	r2, [r7, #12]
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4a4b      	ldr	r2, [pc, #300]	; (80010f4 <HAL_GPIO_Init+0x2a0>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d013      	beq.n	8000ff2 <HAL_GPIO_Init+0x19e>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4a4a      	ldr	r2, [pc, #296]	; (80010f8 <HAL_GPIO_Init+0x2a4>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d00d      	beq.n	8000fee <HAL_GPIO_Init+0x19a>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4a49      	ldr	r2, [pc, #292]	; (80010fc <HAL_GPIO_Init+0x2a8>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d007      	beq.n	8000fea <HAL_GPIO_Init+0x196>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4a48      	ldr	r2, [pc, #288]	; (8001100 <HAL_GPIO_Init+0x2ac>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d101      	bne.n	8000fe6 <HAL_GPIO_Init+0x192>
 8000fe2:	2303      	movs	r3, #3
 8000fe4:	e006      	b.n	8000ff4 <HAL_GPIO_Init+0x1a0>
 8000fe6:	2304      	movs	r3, #4
 8000fe8:	e004      	b.n	8000ff4 <HAL_GPIO_Init+0x1a0>
 8000fea:	2302      	movs	r3, #2
 8000fec:	e002      	b.n	8000ff4 <HAL_GPIO_Init+0x1a0>
 8000fee:	2301      	movs	r3, #1
 8000ff0:	e000      	b.n	8000ff4 <HAL_GPIO_Init+0x1a0>
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ff6:	f002 0203 	and.w	r2, r2, #3
 8000ffa:	0092      	lsls	r2, r2, #2
 8000ffc:	4093      	lsls	r3, r2
 8000ffe:	68fa      	ldr	r2, [r7, #12]
 8001000:	4313      	orrs	r3, r2
 8001002:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001004:	493a      	ldr	r1, [pc, #232]	; (80010f0 <HAL_GPIO_Init+0x29c>)
 8001006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001008:	089b      	lsrs	r3, r3, #2
 800100a:	3302      	adds	r3, #2
 800100c:	68fa      	ldr	r2, [r7, #12]
 800100e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800101a:	2b00      	cmp	r3, #0
 800101c:	d006      	beq.n	800102c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800101e:	4b39      	ldr	r3, [pc, #228]	; (8001104 <HAL_GPIO_Init+0x2b0>)
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	4938      	ldr	r1, [pc, #224]	; (8001104 <HAL_GPIO_Init+0x2b0>)
 8001024:	69bb      	ldr	r3, [r7, #24]
 8001026:	4313      	orrs	r3, r2
 8001028:	600b      	str	r3, [r1, #0]
 800102a:	e006      	b.n	800103a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800102c:	4b35      	ldr	r3, [pc, #212]	; (8001104 <HAL_GPIO_Init+0x2b0>)
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	69bb      	ldr	r3, [r7, #24]
 8001032:	43db      	mvns	r3, r3
 8001034:	4933      	ldr	r1, [pc, #204]	; (8001104 <HAL_GPIO_Init+0x2b0>)
 8001036:	4013      	ands	r3, r2
 8001038:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001042:	2b00      	cmp	r3, #0
 8001044:	d006      	beq.n	8001054 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001046:	4b2f      	ldr	r3, [pc, #188]	; (8001104 <HAL_GPIO_Init+0x2b0>)
 8001048:	685a      	ldr	r2, [r3, #4]
 800104a:	492e      	ldr	r1, [pc, #184]	; (8001104 <HAL_GPIO_Init+0x2b0>)
 800104c:	69bb      	ldr	r3, [r7, #24]
 800104e:	4313      	orrs	r3, r2
 8001050:	604b      	str	r3, [r1, #4]
 8001052:	e006      	b.n	8001062 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001054:	4b2b      	ldr	r3, [pc, #172]	; (8001104 <HAL_GPIO_Init+0x2b0>)
 8001056:	685a      	ldr	r2, [r3, #4]
 8001058:	69bb      	ldr	r3, [r7, #24]
 800105a:	43db      	mvns	r3, r3
 800105c:	4929      	ldr	r1, [pc, #164]	; (8001104 <HAL_GPIO_Init+0x2b0>)
 800105e:	4013      	ands	r3, r2
 8001060:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800106a:	2b00      	cmp	r3, #0
 800106c:	d006      	beq.n	800107c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800106e:	4b25      	ldr	r3, [pc, #148]	; (8001104 <HAL_GPIO_Init+0x2b0>)
 8001070:	689a      	ldr	r2, [r3, #8]
 8001072:	4924      	ldr	r1, [pc, #144]	; (8001104 <HAL_GPIO_Init+0x2b0>)
 8001074:	69bb      	ldr	r3, [r7, #24]
 8001076:	4313      	orrs	r3, r2
 8001078:	608b      	str	r3, [r1, #8]
 800107a:	e006      	b.n	800108a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800107c:	4b21      	ldr	r3, [pc, #132]	; (8001104 <HAL_GPIO_Init+0x2b0>)
 800107e:	689a      	ldr	r2, [r3, #8]
 8001080:	69bb      	ldr	r3, [r7, #24]
 8001082:	43db      	mvns	r3, r3
 8001084:	491f      	ldr	r1, [pc, #124]	; (8001104 <HAL_GPIO_Init+0x2b0>)
 8001086:	4013      	ands	r3, r2
 8001088:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001092:	2b00      	cmp	r3, #0
 8001094:	d006      	beq.n	80010a4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001096:	4b1b      	ldr	r3, [pc, #108]	; (8001104 <HAL_GPIO_Init+0x2b0>)
 8001098:	68da      	ldr	r2, [r3, #12]
 800109a:	491a      	ldr	r1, [pc, #104]	; (8001104 <HAL_GPIO_Init+0x2b0>)
 800109c:	69bb      	ldr	r3, [r7, #24]
 800109e:	4313      	orrs	r3, r2
 80010a0:	60cb      	str	r3, [r1, #12]
 80010a2:	e006      	b.n	80010b2 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80010a4:	4b17      	ldr	r3, [pc, #92]	; (8001104 <HAL_GPIO_Init+0x2b0>)
 80010a6:	68da      	ldr	r2, [r3, #12]
 80010a8:	69bb      	ldr	r3, [r7, #24]
 80010aa:	43db      	mvns	r3, r3
 80010ac:	4915      	ldr	r1, [pc, #84]	; (8001104 <HAL_GPIO_Init+0x2b0>)
 80010ae:	4013      	ands	r3, r2
 80010b0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80010b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b4:	3301      	adds	r3, #1
 80010b6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010be:	fa22 f303 	lsr.w	r3, r2, r3
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	f47f aed0 	bne.w	8000e68 <HAL_GPIO_Init+0x14>
  }
}
 80010c8:	bf00      	nop
 80010ca:	372c      	adds	r7, #44	; 0x2c
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bc80      	pop	{r7}
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	10210000 	.word	0x10210000
 80010d8:	10110000 	.word	0x10110000
 80010dc:	10120000 	.word	0x10120000
 80010e0:	10310000 	.word	0x10310000
 80010e4:	10320000 	.word	0x10320000
 80010e8:	10220000 	.word	0x10220000
 80010ec:	40021000 	.word	0x40021000
 80010f0:	40010000 	.word	0x40010000
 80010f4:	40010800 	.word	0x40010800
 80010f8:	40010c00 	.word	0x40010c00
 80010fc:	40011000 	.word	0x40011000
 8001100:	40011400 	.word	0x40011400
 8001104:	40010400 	.word	0x40010400

08001108 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
 8001110:	460b      	mov	r3, r1
 8001112:	807b      	strh	r3, [r7, #2]
 8001114:	4613      	mov	r3, r2
 8001116:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001118:	787b      	ldrb	r3, [r7, #1]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d003      	beq.n	8001126 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800111e:	887a      	ldrh	r2, [r7, #2]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001124:	e003      	b.n	800112e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001126:	887b      	ldrh	r3, [r7, #2]
 8001128:	041a      	lsls	r2, r3, #16
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	611a      	str	r2, [r3, #16]
}
 800112e:	bf00      	nop
 8001130:	370c      	adds	r7, #12
 8001132:	46bd      	mov	sp, r7
 8001134:	bc80      	pop	{r7}
 8001136:	4770      	bx	lr

08001138 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b086      	sub	sp, #24
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d101      	bne.n	800114a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001146:	2301      	movs	r3, #1
 8001148:	e26c      	b.n	8001624 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f003 0301 	and.w	r3, r3, #1
 8001152:	2b00      	cmp	r3, #0
 8001154:	f000 8087 	beq.w	8001266 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001158:	4b92      	ldr	r3, [pc, #584]	; (80013a4 <HAL_RCC_OscConfig+0x26c>)
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f003 030c 	and.w	r3, r3, #12
 8001160:	2b04      	cmp	r3, #4
 8001162:	d00c      	beq.n	800117e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001164:	4b8f      	ldr	r3, [pc, #572]	; (80013a4 <HAL_RCC_OscConfig+0x26c>)
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f003 030c 	and.w	r3, r3, #12
 800116c:	2b08      	cmp	r3, #8
 800116e:	d112      	bne.n	8001196 <HAL_RCC_OscConfig+0x5e>
 8001170:	4b8c      	ldr	r3, [pc, #560]	; (80013a4 <HAL_RCC_OscConfig+0x26c>)
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001178:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800117c:	d10b      	bne.n	8001196 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800117e:	4b89      	ldr	r3, [pc, #548]	; (80013a4 <HAL_RCC_OscConfig+0x26c>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001186:	2b00      	cmp	r3, #0
 8001188:	d06c      	beq.n	8001264 <HAL_RCC_OscConfig+0x12c>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d168      	bne.n	8001264 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001192:	2301      	movs	r3, #1
 8001194:	e246      	b.n	8001624 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800119e:	d106      	bne.n	80011ae <HAL_RCC_OscConfig+0x76>
 80011a0:	4b80      	ldr	r3, [pc, #512]	; (80013a4 <HAL_RCC_OscConfig+0x26c>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a7f      	ldr	r2, [pc, #508]	; (80013a4 <HAL_RCC_OscConfig+0x26c>)
 80011a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011aa:	6013      	str	r3, [r2, #0]
 80011ac:	e02e      	b.n	800120c <HAL_RCC_OscConfig+0xd4>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d10c      	bne.n	80011d0 <HAL_RCC_OscConfig+0x98>
 80011b6:	4b7b      	ldr	r3, [pc, #492]	; (80013a4 <HAL_RCC_OscConfig+0x26c>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4a7a      	ldr	r2, [pc, #488]	; (80013a4 <HAL_RCC_OscConfig+0x26c>)
 80011bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011c0:	6013      	str	r3, [r2, #0]
 80011c2:	4b78      	ldr	r3, [pc, #480]	; (80013a4 <HAL_RCC_OscConfig+0x26c>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4a77      	ldr	r2, [pc, #476]	; (80013a4 <HAL_RCC_OscConfig+0x26c>)
 80011c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011cc:	6013      	str	r3, [r2, #0]
 80011ce:	e01d      	b.n	800120c <HAL_RCC_OscConfig+0xd4>
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011d8:	d10c      	bne.n	80011f4 <HAL_RCC_OscConfig+0xbc>
 80011da:	4b72      	ldr	r3, [pc, #456]	; (80013a4 <HAL_RCC_OscConfig+0x26c>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a71      	ldr	r2, [pc, #452]	; (80013a4 <HAL_RCC_OscConfig+0x26c>)
 80011e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011e4:	6013      	str	r3, [r2, #0]
 80011e6:	4b6f      	ldr	r3, [pc, #444]	; (80013a4 <HAL_RCC_OscConfig+0x26c>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a6e      	ldr	r2, [pc, #440]	; (80013a4 <HAL_RCC_OscConfig+0x26c>)
 80011ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011f0:	6013      	str	r3, [r2, #0]
 80011f2:	e00b      	b.n	800120c <HAL_RCC_OscConfig+0xd4>
 80011f4:	4b6b      	ldr	r3, [pc, #428]	; (80013a4 <HAL_RCC_OscConfig+0x26c>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a6a      	ldr	r2, [pc, #424]	; (80013a4 <HAL_RCC_OscConfig+0x26c>)
 80011fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011fe:	6013      	str	r3, [r2, #0]
 8001200:	4b68      	ldr	r3, [pc, #416]	; (80013a4 <HAL_RCC_OscConfig+0x26c>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a67      	ldr	r2, [pc, #412]	; (80013a4 <HAL_RCC_OscConfig+0x26c>)
 8001206:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800120a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d013      	beq.n	800123c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001214:	f7ff fd0e 	bl	8000c34 <HAL_GetTick>
 8001218:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800121a:	e008      	b.n	800122e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800121c:	f7ff fd0a 	bl	8000c34 <HAL_GetTick>
 8001220:	4602      	mov	r2, r0
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	1ad3      	subs	r3, r2, r3
 8001226:	2b64      	cmp	r3, #100	; 0x64
 8001228:	d901      	bls.n	800122e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800122a:	2303      	movs	r3, #3
 800122c:	e1fa      	b.n	8001624 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800122e:	4b5d      	ldr	r3, [pc, #372]	; (80013a4 <HAL_RCC_OscConfig+0x26c>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001236:	2b00      	cmp	r3, #0
 8001238:	d0f0      	beq.n	800121c <HAL_RCC_OscConfig+0xe4>
 800123a:	e014      	b.n	8001266 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800123c:	f7ff fcfa 	bl	8000c34 <HAL_GetTick>
 8001240:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001242:	e008      	b.n	8001256 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001244:	f7ff fcf6 	bl	8000c34 <HAL_GetTick>
 8001248:	4602      	mov	r2, r0
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	1ad3      	subs	r3, r2, r3
 800124e:	2b64      	cmp	r3, #100	; 0x64
 8001250:	d901      	bls.n	8001256 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001252:	2303      	movs	r3, #3
 8001254:	e1e6      	b.n	8001624 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001256:	4b53      	ldr	r3, [pc, #332]	; (80013a4 <HAL_RCC_OscConfig+0x26c>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800125e:	2b00      	cmp	r3, #0
 8001260:	d1f0      	bne.n	8001244 <HAL_RCC_OscConfig+0x10c>
 8001262:	e000      	b.n	8001266 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001264:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f003 0302 	and.w	r3, r3, #2
 800126e:	2b00      	cmp	r3, #0
 8001270:	d063      	beq.n	800133a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001272:	4b4c      	ldr	r3, [pc, #304]	; (80013a4 <HAL_RCC_OscConfig+0x26c>)
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	f003 030c 	and.w	r3, r3, #12
 800127a:	2b00      	cmp	r3, #0
 800127c:	d00b      	beq.n	8001296 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800127e:	4b49      	ldr	r3, [pc, #292]	; (80013a4 <HAL_RCC_OscConfig+0x26c>)
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	f003 030c 	and.w	r3, r3, #12
 8001286:	2b08      	cmp	r3, #8
 8001288:	d11c      	bne.n	80012c4 <HAL_RCC_OscConfig+0x18c>
 800128a:	4b46      	ldr	r3, [pc, #280]	; (80013a4 <HAL_RCC_OscConfig+0x26c>)
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001292:	2b00      	cmp	r3, #0
 8001294:	d116      	bne.n	80012c4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001296:	4b43      	ldr	r3, [pc, #268]	; (80013a4 <HAL_RCC_OscConfig+0x26c>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f003 0302 	and.w	r3, r3, #2
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d005      	beq.n	80012ae <HAL_RCC_OscConfig+0x176>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	691b      	ldr	r3, [r3, #16]
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d001      	beq.n	80012ae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	e1ba      	b.n	8001624 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012ae:	4b3d      	ldr	r3, [pc, #244]	; (80013a4 <HAL_RCC_OscConfig+0x26c>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	695b      	ldr	r3, [r3, #20]
 80012ba:	00db      	lsls	r3, r3, #3
 80012bc:	4939      	ldr	r1, [pc, #228]	; (80013a4 <HAL_RCC_OscConfig+0x26c>)
 80012be:	4313      	orrs	r3, r2
 80012c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012c2:	e03a      	b.n	800133a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	691b      	ldr	r3, [r3, #16]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d020      	beq.n	800130e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012cc:	4b36      	ldr	r3, [pc, #216]	; (80013a8 <HAL_RCC_OscConfig+0x270>)
 80012ce:	2201      	movs	r2, #1
 80012d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012d2:	f7ff fcaf 	bl	8000c34 <HAL_GetTick>
 80012d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012d8:	e008      	b.n	80012ec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012da:	f7ff fcab 	bl	8000c34 <HAL_GetTick>
 80012de:	4602      	mov	r2, r0
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	1ad3      	subs	r3, r2, r3
 80012e4:	2b02      	cmp	r3, #2
 80012e6:	d901      	bls.n	80012ec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80012e8:	2303      	movs	r3, #3
 80012ea:	e19b      	b.n	8001624 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012ec:	4b2d      	ldr	r3, [pc, #180]	; (80013a4 <HAL_RCC_OscConfig+0x26c>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f003 0302 	and.w	r3, r3, #2
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d0f0      	beq.n	80012da <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012f8:	4b2a      	ldr	r3, [pc, #168]	; (80013a4 <HAL_RCC_OscConfig+0x26c>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	695b      	ldr	r3, [r3, #20]
 8001304:	00db      	lsls	r3, r3, #3
 8001306:	4927      	ldr	r1, [pc, #156]	; (80013a4 <HAL_RCC_OscConfig+0x26c>)
 8001308:	4313      	orrs	r3, r2
 800130a:	600b      	str	r3, [r1, #0]
 800130c:	e015      	b.n	800133a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800130e:	4b26      	ldr	r3, [pc, #152]	; (80013a8 <HAL_RCC_OscConfig+0x270>)
 8001310:	2200      	movs	r2, #0
 8001312:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001314:	f7ff fc8e 	bl	8000c34 <HAL_GetTick>
 8001318:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800131a:	e008      	b.n	800132e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800131c:	f7ff fc8a 	bl	8000c34 <HAL_GetTick>
 8001320:	4602      	mov	r2, r0
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	1ad3      	subs	r3, r2, r3
 8001326:	2b02      	cmp	r3, #2
 8001328:	d901      	bls.n	800132e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800132a:	2303      	movs	r3, #3
 800132c:	e17a      	b.n	8001624 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800132e:	4b1d      	ldr	r3, [pc, #116]	; (80013a4 <HAL_RCC_OscConfig+0x26c>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f003 0302 	and.w	r3, r3, #2
 8001336:	2b00      	cmp	r3, #0
 8001338:	d1f0      	bne.n	800131c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f003 0308 	and.w	r3, r3, #8
 8001342:	2b00      	cmp	r3, #0
 8001344:	d03a      	beq.n	80013bc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	699b      	ldr	r3, [r3, #24]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d019      	beq.n	8001382 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800134e:	4b17      	ldr	r3, [pc, #92]	; (80013ac <HAL_RCC_OscConfig+0x274>)
 8001350:	2201      	movs	r2, #1
 8001352:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001354:	f7ff fc6e 	bl	8000c34 <HAL_GetTick>
 8001358:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800135a:	e008      	b.n	800136e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800135c:	f7ff fc6a 	bl	8000c34 <HAL_GetTick>
 8001360:	4602      	mov	r2, r0
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	1ad3      	subs	r3, r2, r3
 8001366:	2b02      	cmp	r3, #2
 8001368:	d901      	bls.n	800136e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800136a:	2303      	movs	r3, #3
 800136c:	e15a      	b.n	8001624 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800136e:	4b0d      	ldr	r3, [pc, #52]	; (80013a4 <HAL_RCC_OscConfig+0x26c>)
 8001370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001372:	f003 0302 	and.w	r3, r3, #2
 8001376:	2b00      	cmp	r3, #0
 8001378:	d0f0      	beq.n	800135c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800137a:	2001      	movs	r0, #1
 800137c:	f000 fada 	bl	8001934 <RCC_Delay>
 8001380:	e01c      	b.n	80013bc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001382:	4b0a      	ldr	r3, [pc, #40]	; (80013ac <HAL_RCC_OscConfig+0x274>)
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001388:	f7ff fc54 	bl	8000c34 <HAL_GetTick>
 800138c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800138e:	e00f      	b.n	80013b0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001390:	f7ff fc50 	bl	8000c34 <HAL_GetTick>
 8001394:	4602      	mov	r2, r0
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	2b02      	cmp	r3, #2
 800139c:	d908      	bls.n	80013b0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800139e:	2303      	movs	r3, #3
 80013a0:	e140      	b.n	8001624 <HAL_RCC_OscConfig+0x4ec>
 80013a2:	bf00      	nop
 80013a4:	40021000 	.word	0x40021000
 80013a8:	42420000 	.word	0x42420000
 80013ac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013b0:	4b9e      	ldr	r3, [pc, #632]	; (800162c <HAL_RCC_OscConfig+0x4f4>)
 80013b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013b4:	f003 0302 	and.w	r3, r3, #2
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d1e9      	bne.n	8001390 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f003 0304 	and.w	r3, r3, #4
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	f000 80a6 	beq.w	8001516 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013ca:	2300      	movs	r3, #0
 80013cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013ce:	4b97      	ldr	r3, [pc, #604]	; (800162c <HAL_RCC_OscConfig+0x4f4>)
 80013d0:	69db      	ldr	r3, [r3, #28]
 80013d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d10d      	bne.n	80013f6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013da:	4b94      	ldr	r3, [pc, #592]	; (800162c <HAL_RCC_OscConfig+0x4f4>)
 80013dc:	69db      	ldr	r3, [r3, #28]
 80013de:	4a93      	ldr	r2, [pc, #588]	; (800162c <HAL_RCC_OscConfig+0x4f4>)
 80013e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013e4:	61d3      	str	r3, [r2, #28]
 80013e6:	4b91      	ldr	r3, [pc, #580]	; (800162c <HAL_RCC_OscConfig+0x4f4>)
 80013e8:	69db      	ldr	r3, [r3, #28]
 80013ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ee:	60bb      	str	r3, [r7, #8]
 80013f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013f2:	2301      	movs	r3, #1
 80013f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013f6:	4b8e      	ldr	r3, [pc, #568]	; (8001630 <HAL_RCC_OscConfig+0x4f8>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d118      	bne.n	8001434 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001402:	4b8b      	ldr	r3, [pc, #556]	; (8001630 <HAL_RCC_OscConfig+0x4f8>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a8a      	ldr	r2, [pc, #552]	; (8001630 <HAL_RCC_OscConfig+0x4f8>)
 8001408:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800140c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800140e:	f7ff fc11 	bl	8000c34 <HAL_GetTick>
 8001412:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001414:	e008      	b.n	8001428 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001416:	f7ff fc0d 	bl	8000c34 <HAL_GetTick>
 800141a:	4602      	mov	r2, r0
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	1ad3      	subs	r3, r2, r3
 8001420:	2b64      	cmp	r3, #100	; 0x64
 8001422:	d901      	bls.n	8001428 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001424:	2303      	movs	r3, #3
 8001426:	e0fd      	b.n	8001624 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001428:	4b81      	ldr	r3, [pc, #516]	; (8001630 <HAL_RCC_OscConfig+0x4f8>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001430:	2b00      	cmp	r3, #0
 8001432:	d0f0      	beq.n	8001416 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	68db      	ldr	r3, [r3, #12]
 8001438:	2b01      	cmp	r3, #1
 800143a:	d106      	bne.n	800144a <HAL_RCC_OscConfig+0x312>
 800143c:	4b7b      	ldr	r3, [pc, #492]	; (800162c <HAL_RCC_OscConfig+0x4f4>)
 800143e:	6a1b      	ldr	r3, [r3, #32]
 8001440:	4a7a      	ldr	r2, [pc, #488]	; (800162c <HAL_RCC_OscConfig+0x4f4>)
 8001442:	f043 0301 	orr.w	r3, r3, #1
 8001446:	6213      	str	r3, [r2, #32]
 8001448:	e02d      	b.n	80014a6 <HAL_RCC_OscConfig+0x36e>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	68db      	ldr	r3, [r3, #12]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d10c      	bne.n	800146c <HAL_RCC_OscConfig+0x334>
 8001452:	4b76      	ldr	r3, [pc, #472]	; (800162c <HAL_RCC_OscConfig+0x4f4>)
 8001454:	6a1b      	ldr	r3, [r3, #32]
 8001456:	4a75      	ldr	r2, [pc, #468]	; (800162c <HAL_RCC_OscConfig+0x4f4>)
 8001458:	f023 0301 	bic.w	r3, r3, #1
 800145c:	6213      	str	r3, [r2, #32]
 800145e:	4b73      	ldr	r3, [pc, #460]	; (800162c <HAL_RCC_OscConfig+0x4f4>)
 8001460:	6a1b      	ldr	r3, [r3, #32]
 8001462:	4a72      	ldr	r2, [pc, #456]	; (800162c <HAL_RCC_OscConfig+0x4f4>)
 8001464:	f023 0304 	bic.w	r3, r3, #4
 8001468:	6213      	str	r3, [r2, #32]
 800146a:	e01c      	b.n	80014a6 <HAL_RCC_OscConfig+0x36e>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	68db      	ldr	r3, [r3, #12]
 8001470:	2b05      	cmp	r3, #5
 8001472:	d10c      	bne.n	800148e <HAL_RCC_OscConfig+0x356>
 8001474:	4b6d      	ldr	r3, [pc, #436]	; (800162c <HAL_RCC_OscConfig+0x4f4>)
 8001476:	6a1b      	ldr	r3, [r3, #32]
 8001478:	4a6c      	ldr	r2, [pc, #432]	; (800162c <HAL_RCC_OscConfig+0x4f4>)
 800147a:	f043 0304 	orr.w	r3, r3, #4
 800147e:	6213      	str	r3, [r2, #32]
 8001480:	4b6a      	ldr	r3, [pc, #424]	; (800162c <HAL_RCC_OscConfig+0x4f4>)
 8001482:	6a1b      	ldr	r3, [r3, #32]
 8001484:	4a69      	ldr	r2, [pc, #420]	; (800162c <HAL_RCC_OscConfig+0x4f4>)
 8001486:	f043 0301 	orr.w	r3, r3, #1
 800148a:	6213      	str	r3, [r2, #32]
 800148c:	e00b      	b.n	80014a6 <HAL_RCC_OscConfig+0x36e>
 800148e:	4b67      	ldr	r3, [pc, #412]	; (800162c <HAL_RCC_OscConfig+0x4f4>)
 8001490:	6a1b      	ldr	r3, [r3, #32]
 8001492:	4a66      	ldr	r2, [pc, #408]	; (800162c <HAL_RCC_OscConfig+0x4f4>)
 8001494:	f023 0301 	bic.w	r3, r3, #1
 8001498:	6213      	str	r3, [r2, #32]
 800149a:	4b64      	ldr	r3, [pc, #400]	; (800162c <HAL_RCC_OscConfig+0x4f4>)
 800149c:	6a1b      	ldr	r3, [r3, #32]
 800149e:	4a63      	ldr	r2, [pc, #396]	; (800162c <HAL_RCC_OscConfig+0x4f4>)
 80014a0:	f023 0304 	bic.w	r3, r3, #4
 80014a4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	68db      	ldr	r3, [r3, #12]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d015      	beq.n	80014da <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ae:	f7ff fbc1 	bl	8000c34 <HAL_GetTick>
 80014b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014b4:	e00a      	b.n	80014cc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014b6:	f7ff fbbd 	bl	8000c34 <HAL_GetTick>
 80014ba:	4602      	mov	r2, r0
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	1ad3      	subs	r3, r2, r3
 80014c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d901      	bls.n	80014cc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80014c8:	2303      	movs	r3, #3
 80014ca:	e0ab      	b.n	8001624 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014cc:	4b57      	ldr	r3, [pc, #348]	; (800162c <HAL_RCC_OscConfig+0x4f4>)
 80014ce:	6a1b      	ldr	r3, [r3, #32]
 80014d0:	f003 0302 	and.w	r3, r3, #2
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d0ee      	beq.n	80014b6 <HAL_RCC_OscConfig+0x37e>
 80014d8:	e014      	b.n	8001504 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014da:	f7ff fbab 	bl	8000c34 <HAL_GetTick>
 80014de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014e0:	e00a      	b.n	80014f8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014e2:	f7ff fba7 	bl	8000c34 <HAL_GetTick>
 80014e6:	4602      	mov	r2, r0
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	1ad3      	subs	r3, r2, r3
 80014ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d901      	bls.n	80014f8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80014f4:	2303      	movs	r3, #3
 80014f6:	e095      	b.n	8001624 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014f8:	4b4c      	ldr	r3, [pc, #304]	; (800162c <HAL_RCC_OscConfig+0x4f4>)
 80014fa:	6a1b      	ldr	r3, [r3, #32]
 80014fc:	f003 0302 	and.w	r3, r3, #2
 8001500:	2b00      	cmp	r3, #0
 8001502:	d1ee      	bne.n	80014e2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001504:	7dfb      	ldrb	r3, [r7, #23]
 8001506:	2b01      	cmp	r3, #1
 8001508:	d105      	bne.n	8001516 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800150a:	4b48      	ldr	r3, [pc, #288]	; (800162c <HAL_RCC_OscConfig+0x4f4>)
 800150c:	69db      	ldr	r3, [r3, #28]
 800150e:	4a47      	ldr	r2, [pc, #284]	; (800162c <HAL_RCC_OscConfig+0x4f4>)
 8001510:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001514:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	69db      	ldr	r3, [r3, #28]
 800151a:	2b00      	cmp	r3, #0
 800151c:	f000 8081 	beq.w	8001622 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001520:	4b42      	ldr	r3, [pc, #264]	; (800162c <HAL_RCC_OscConfig+0x4f4>)
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f003 030c 	and.w	r3, r3, #12
 8001528:	2b08      	cmp	r3, #8
 800152a:	d061      	beq.n	80015f0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	69db      	ldr	r3, [r3, #28]
 8001530:	2b02      	cmp	r3, #2
 8001532:	d146      	bne.n	80015c2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001534:	4b3f      	ldr	r3, [pc, #252]	; (8001634 <HAL_RCC_OscConfig+0x4fc>)
 8001536:	2200      	movs	r2, #0
 8001538:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800153a:	f7ff fb7b 	bl	8000c34 <HAL_GetTick>
 800153e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001540:	e008      	b.n	8001554 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001542:	f7ff fb77 	bl	8000c34 <HAL_GetTick>
 8001546:	4602      	mov	r2, r0
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	1ad3      	subs	r3, r2, r3
 800154c:	2b02      	cmp	r3, #2
 800154e:	d901      	bls.n	8001554 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001550:	2303      	movs	r3, #3
 8001552:	e067      	b.n	8001624 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001554:	4b35      	ldr	r3, [pc, #212]	; (800162c <HAL_RCC_OscConfig+0x4f4>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800155c:	2b00      	cmp	r3, #0
 800155e:	d1f0      	bne.n	8001542 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6a1b      	ldr	r3, [r3, #32]
 8001564:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001568:	d108      	bne.n	800157c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800156a:	4b30      	ldr	r3, [pc, #192]	; (800162c <HAL_RCC_OscConfig+0x4f4>)
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	492d      	ldr	r1, [pc, #180]	; (800162c <HAL_RCC_OscConfig+0x4f4>)
 8001578:	4313      	orrs	r3, r2
 800157a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800157c:	4b2b      	ldr	r3, [pc, #172]	; (800162c <HAL_RCC_OscConfig+0x4f4>)
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6a19      	ldr	r1, [r3, #32]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800158c:	430b      	orrs	r3, r1
 800158e:	4927      	ldr	r1, [pc, #156]	; (800162c <HAL_RCC_OscConfig+0x4f4>)
 8001590:	4313      	orrs	r3, r2
 8001592:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001594:	4b27      	ldr	r3, [pc, #156]	; (8001634 <HAL_RCC_OscConfig+0x4fc>)
 8001596:	2201      	movs	r2, #1
 8001598:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800159a:	f7ff fb4b 	bl	8000c34 <HAL_GetTick>
 800159e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015a0:	e008      	b.n	80015b4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015a2:	f7ff fb47 	bl	8000c34 <HAL_GetTick>
 80015a6:	4602      	mov	r2, r0
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	d901      	bls.n	80015b4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80015b0:	2303      	movs	r3, #3
 80015b2:	e037      	b.n	8001624 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015b4:	4b1d      	ldr	r3, [pc, #116]	; (800162c <HAL_RCC_OscConfig+0x4f4>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d0f0      	beq.n	80015a2 <HAL_RCC_OscConfig+0x46a>
 80015c0:	e02f      	b.n	8001622 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015c2:	4b1c      	ldr	r3, [pc, #112]	; (8001634 <HAL_RCC_OscConfig+0x4fc>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015c8:	f7ff fb34 	bl	8000c34 <HAL_GetTick>
 80015cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015ce:	e008      	b.n	80015e2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015d0:	f7ff fb30 	bl	8000c34 <HAL_GetTick>
 80015d4:	4602      	mov	r2, r0
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	2b02      	cmp	r3, #2
 80015dc:	d901      	bls.n	80015e2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80015de:	2303      	movs	r3, #3
 80015e0:	e020      	b.n	8001624 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015e2:	4b12      	ldr	r3, [pc, #72]	; (800162c <HAL_RCC_OscConfig+0x4f4>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d1f0      	bne.n	80015d0 <HAL_RCC_OscConfig+0x498>
 80015ee:	e018      	b.n	8001622 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	69db      	ldr	r3, [r3, #28]
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d101      	bne.n	80015fc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80015f8:	2301      	movs	r3, #1
 80015fa:	e013      	b.n	8001624 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80015fc:	4b0b      	ldr	r3, [pc, #44]	; (800162c <HAL_RCC_OscConfig+0x4f4>)
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6a1b      	ldr	r3, [r3, #32]
 800160c:	429a      	cmp	r2, r3
 800160e:	d106      	bne.n	800161e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800161a:	429a      	cmp	r2, r3
 800161c:	d001      	beq.n	8001622 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e000      	b.n	8001624 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001622:	2300      	movs	r3, #0
}
 8001624:	4618      	mov	r0, r3
 8001626:	3718      	adds	r7, #24
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	40021000 	.word	0x40021000
 8001630:	40007000 	.word	0x40007000
 8001634:	42420060 	.word	0x42420060

08001638 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d101      	bne.n	800164c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	e0d0      	b.n	80017ee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800164c:	4b6a      	ldr	r3, [pc, #424]	; (80017f8 <HAL_RCC_ClockConfig+0x1c0>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f003 0307 	and.w	r3, r3, #7
 8001654:	683a      	ldr	r2, [r7, #0]
 8001656:	429a      	cmp	r2, r3
 8001658:	d910      	bls.n	800167c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800165a:	4b67      	ldr	r3, [pc, #412]	; (80017f8 <HAL_RCC_ClockConfig+0x1c0>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f023 0207 	bic.w	r2, r3, #7
 8001662:	4965      	ldr	r1, [pc, #404]	; (80017f8 <HAL_RCC_ClockConfig+0x1c0>)
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	4313      	orrs	r3, r2
 8001668:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800166a:	4b63      	ldr	r3, [pc, #396]	; (80017f8 <HAL_RCC_ClockConfig+0x1c0>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 0307 	and.w	r3, r3, #7
 8001672:	683a      	ldr	r2, [r7, #0]
 8001674:	429a      	cmp	r2, r3
 8001676:	d001      	beq.n	800167c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001678:	2301      	movs	r3, #1
 800167a:	e0b8      	b.n	80017ee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f003 0302 	and.w	r3, r3, #2
 8001684:	2b00      	cmp	r3, #0
 8001686:	d020      	beq.n	80016ca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 0304 	and.w	r3, r3, #4
 8001690:	2b00      	cmp	r3, #0
 8001692:	d005      	beq.n	80016a0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001694:	4b59      	ldr	r3, [pc, #356]	; (80017fc <HAL_RCC_ClockConfig+0x1c4>)
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	4a58      	ldr	r2, [pc, #352]	; (80017fc <HAL_RCC_ClockConfig+0x1c4>)
 800169a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800169e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f003 0308 	and.w	r3, r3, #8
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d005      	beq.n	80016b8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016ac:	4b53      	ldr	r3, [pc, #332]	; (80017fc <HAL_RCC_ClockConfig+0x1c4>)
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	4a52      	ldr	r2, [pc, #328]	; (80017fc <HAL_RCC_ClockConfig+0x1c4>)
 80016b2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80016b6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016b8:	4b50      	ldr	r3, [pc, #320]	; (80017fc <HAL_RCC_ClockConfig+0x1c4>)
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	494d      	ldr	r1, [pc, #308]	; (80017fc <HAL_RCC_ClockConfig+0x1c4>)
 80016c6:	4313      	orrs	r3, r2
 80016c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 0301 	and.w	r3, r3, #1
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d040      	beq.n	8001758 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d107      	bne.n	80016ee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016de:	4b47      	ldr	r3, [pc, #284]	; (80017fc <HAL_RCC_ClockConfig+0x1c4>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d115      	bne.n	8001716 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e07f      	b.n	80017ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	2b02      	cmp	r3, #2
 80016f4:	d107      	bne.n	8001706 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016f6:	4b41      	ldr	r3, [pc, #260]	; (80017fc <HAL_RCC_ClockConfig+0x1c4>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d109      	bne.n	8001716 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e073      	b.n	80017ee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001706:	4b3d      	ldr	r3, [pc, #244]	; (80017fc <HAL_RCC_ClockConfig+0x1c4>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 0302 	and.w	r3, r3, #2
 800170e:	2b00      	cmp	r3, #0
 8001710:	d101      	bne.n	8001716 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e06b      	b.n	80017ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001716:	4b39      	ldr	r3, [pc, #228]	; (80017fc <HAL_RCC_ClockConfig+0x1c4>)
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	f023 0203 	bic.w	r2, r3, #3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	4936      	ldr	r1, [pc, #216]	; (80017fc <HAL_RCC_ClockConfig+0x1c4>)
 8001724:	4313      	orrs	r3, r2
 8001726:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001728:	f7ff fa84 	bl	8000c34 <HAL_GetTick>
 800172c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800172e:	e00a      	b.n	8001746 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001730:	f7ff fa80 	bl	8000c34 <HAL_GetTick>
 8001734:	4602      	mov	r2, r0
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	f241 3288 	movw	r2, #5000	; 0x1388
 800173e:	4293      	cmp	r3, r2
 8001740:	d901      	bls.n	8001746 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e053      	b.n	80017ee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001746:	4b2d      	ldr	r3, [pc, #180]	; (80017fc <HAL_RCC_ClockConfig+0x1c4>)
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	f003 020c 	and.w	r2, r3, #12
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	429a      	cmp	r2, r3
 8001756:	d1eb      	bne.n	8001730 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001758:	4b27      	ldr	r3, [pc, #156]	; (80017f8 <HAL_RCC_ClockConfig+0x1c0>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f003 0307 	and.w	r3, r3, #7
 8001760:	683a      	ldr	r2, [r7, #0]
 8001762:	429a      	cmp	r2, r3
 8001764:	d210      	bcs.n	8001788 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001766:	4b24      	ldr	r3, [pc, #144]	; (80017f8 <HAL_RCC_ClockConfig+0x1c0>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f023 0207 	bic.w	r2, r3, #7
 800176e:	4922      	ldr	r1, [pc, #136]	; (80017f8 <HAL_RCC_ClockConfig+0x1c0>)
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	4313      	orrs	r3, r2
 8001774:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001776:	4b20      	ldr	r3, [pc, #128]	; (80017f8 <HAL_RCC_ClockConfig+0x1c0>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 0307 	and.w	r3, r3, #7
 800177e:	683a      	ldr	r2, [r7, #0]
 8001780:	429a      	cmp	r2, r3
 8001782:	d001      	beq.n	8001788 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e032      	b.n	80017ee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 0304 	and.w	r3, r3, #4
 8001790:	2b00      	cmp	r3, #0
 8001792:	d008      	beq.n	80017a6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001794:	4b19      	ldr	r3, [pc, #100]	; (80017fc <HAL_RCC_ClockConfig+0x1c4>)
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	4916      	ldr	r1, [pc, #88]	; (80017fc <HAL_RCC_ClockConfig+0x1c4>)
 80017a2:	4313      	orrs	r3, r2
 80017a4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 0308 	and.w	r3, r3, #8
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d009      	beq.n	80017c6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80017b2:	4b12      	ldr	r3, [pc, #72]	; (80017fc <HAL_RCC_ClockConfig+0x1c4>)
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	691b      	ldr	r3, [r3, #16]
 80017be:	00db      	lsls	r3, r3, #3
 80017c0:	490e      	ldr	r1, [pc, #56]	; (80017fc <HAL_RCC_ClockConfig+0x1c4>)
 80017c2:	4313      	orrs	r3, r2
 80017c4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80017c6:	f000 f821 	bl	800180c <HAL_RCC_GetSysClockFreq>
 80017ca:	4601      	mov	r1, r0
 80017cc:	4b0b      	ldr	r3, [pc, #44]	; (80017fc <HAL_RCC_ClockConfig+0x1c4>)
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	091b      	lsrs	r3, r3, #4
 80017d2:	f003 030f 	and.w	r3, r3, #15
 80017d6:	4a0a      	ldr	r2, [pc, #40]	; (8001800 <HAL_RCC_ClockConfig+0x1c8>)
 80017d8:	5cd3      	ldrb	r3, [r2, r3]
 80017da:	fa21 f303 	lsr.w	r3, r1, r3
 80017de:	4a09      	ldr	r2, [pc, #36]	; (8001804 <HAL_RCC_ClockConfig+0x1cc>)
 80017e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80017e2:	4b09      	ldr	r3, [pc, #36]	; (8001808 <HAL_RCC_ClockConfig+0x1d0>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4618      	mov	r0, r3
 80017e8:	f7ff f9e2 	bl	8000bb0 <HAL_InitTick>

  return HAL_OK;
 80017ec:	2300      	movs	r3, #0
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3710      	adds	r7, #16
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	40022000 	.word	0x40022000
 80017fc:	40021000 	.word	0x40021000
 8001800:	08005af8 	.word	0x08005af8
 8001804:	20000000 	.word	0x20000000
 8001808:	20000004 	.word	0x20000004

0800180c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800180c:	b490      	push	{r4, r7}
 800180e:	b08a      	sub	sp, #40	; 0x28
 8001810:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001812:	4b2a      	ldr	r3, [pc, #168]	; (80018bc <HAL_RCC_GetSysClockFreq+0xb0>)
 8001814:	1d3c      	adds	r4, r7, #4
 8001816:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001818:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800181c:	4b28      	ldr	r3, [pc, #160]	; (80018c0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800181e:	881b      	ldrh	r3, [r3, #0]
 8001820:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001822:	2300      	movs	r3, #0
 8001824:	61fb      	str	r3, [r7, #28]
 8001826:	2300      	movs	r3, #0
 8001828:	61bb      	str	r3, [r7, #24]
 800182a:	2300      	movs	r3, #0
 800182c:	627b      	str	r3, [r7, #36]	; 0x24
 800182e:	2300      	movs	r3, #0
 8001830:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001832:	2300      	movs	r3, #0
 8001834:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001836:	4b23      	ldr	r3, [pc, #140]	; (80018c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800183c:	69fb      	ldr	r3, [r7, #28]
 800183e:	f003 030c 	and.w	r3, r3, #12
 8001842:	2b04      	cmp	r3, #4
 8001844:	d002      	beq.n	800184c <HAL_RCC_GetSysClockFreq+0x40>
 8001846:	2b08      	cmp	r3, #8
 8001848:	d003      	beq.n	8001852 <HAL_RCC_GetSysClockFreq+0x46>
 800184a:	e02d      	b.n	80018a8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800184c:	4b1e      	ldr	r3, [pc, #120]	; (80018c8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800184e:	623b      	str	r3, [r7, #32]
      break;
 8001850:	e02d      	b.n	80018ae <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	0c9b      	lsrs	r3, r3, #18
 8001856:	f003 030f 	and.w	r3, r3, #15
 800185a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800185e:	4413      	add	r3, r2
 8001860:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001864:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800186c:	2b00      	cmp	r3, #0
 800186e:	d013      	beq.n	8001898 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001870:	4b14      	ldr	r3, [pc, #80]	; (80018c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	0c5b      	lsrs	r3, r3, #17
 8001876:	f003 0301 	and.w	r3, r3, #1
 800187a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800187e:	4413      	add	r3, r2
 8001880:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001884:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	4a0f      	ldr	r2, [pc, #60]	; (80018c8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800188a:	fb02 f203 	mul.w	r2, r2, r3
 800188e:	69bb      	ldr	r3, [r7, #24]
 8001890:	fbb2 f3f3 	udiv	r3, r2, r3
 8001894:	627b      	str	r3, [r7, #36]	; 0x24
 8001896:	e004      	b.n	80018a2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	4a0c      	ldr	r2, [pc, #48]	; (80018cc <HAL_RCC_GetSysClockFreq+0xc0>)
 800189c:	fb02 f303 	mul.w	r3, r2, r3
 80018a0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80018a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a4:	623b      	str	r3, [r7, #32]
      break;
 80018a6:	e002      	b.n	80018ae <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80018a8:	4b07      	ldr	r3, [pc, #28]	; (80018c8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80018aa:	623b      	str	r3, [r7, #32]
      break;
 80018ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018ae:	6a3b      	ldr	r3, [r7, #32]
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3728      	adds	r7, #40	; 0x28
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bc90      	pop	{r4, r7}
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	080056e0 	.word	0x080056e0
 80018c0:	080056f0 	.word	0x080056f0
 80018c4:	40021000 	.word	0x40021000
 80018c8:	007a1200 	.word	0x007a1200
 80018cc:	003d0900 	.word	0x003d0900

080018d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018d4:	4b02      	ldr	r3, [pc, #8]	; (80018e0 <HAL_RCC_GetHCLKFreq+0x10>)
 80018d6:	681b      	ldr	r3, [r3, #0]
}
 80018d8:	4618      	mov	r0, r3
 80018da:	46bd      	mov	sp, r7
 80018dc:	bc80      	pop	{r7}
 80018de:	4770      	bx	lr
 80018e0:	20000000 	.word	0x20000000

080018e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80018e8:	f7ff fff2 	bl	80018d0 <HAL_RCC_GetHCLKFreq>
 80018ec:	4601      	mov	r1, r0
 80018ee:	4b05      	ldr	r3, [pc, #20]	; (8001904 <HAL_RCC_GetPCLK1Freq+0x20>)
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	0a1b      	lsrs	r3, r3, #8
 80018f4:	f003 0307 	and.w	r3, r3, #7
 80018f8:	4a03      	ldr	r2, [pc, #12]	; (8001908 <HAL_RCC_GetPCLK1Freq+0x24>)
 80018fa:	5cd3      	ldrb	r3, [r2, r3]
 80018fc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001900:	4618      	mov	r0, r3
 8001902:	bd80      	pop	{r7, pc}
 8001904:	40021000 	.word	0x40021000
 8001908:	08005b08 	.word	0x08005b08

0800190c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001910:	f7ff ffde 	bl	80018d0 <HAL_RCC_GetHCLKFreq>
 8001914:	4601      	mov	r1, r0
 8001916:	4b05      	ldr	r3, [pc, #20]	; (800192c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	0adb      	lsrs	r3, r3, #11
 800191c:	f003 0307 	and.w	r3, r3, #7
 8001920:	4a03      	ldr	r2, [pc, #12]	; (8001930 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001922:	5cd3      	ldrb	r3, [r2, r3]
 8001924:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001928:	4618      	mov	r0, r3
 800192a:	bd80      	pop	{r7, pc}
 800192c:	40021000 	.word	0x40021000
 8001930:	08005b08 	.word	0x08005b08

08001934 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001934:	b480      	push	{r7}
 8001936:	b085      	sub	sp, #20
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800193c:	4b0a      	ldr	r3, [pc, #40]	; (8001968 <RCC_Delay+0x34>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a0a      	ldr	r2, [pc, #40]	; (800196c <RCC_Delay+0x38>)
 8001942:	fba2 2303 	umull	r2, r3, r2, r3
 8001946:	0a5b      	lsrs	r3, r3, #9
 8001948:	687a      	ldr	r2, [r7, #4]
 800194a:	fb02 f303 	mul.w	r3, r2, r3
 800194e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001950:	bf00      	nop
  }
  while (Delay --);
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	1e5a      	subs	r2, r3, #1
 8001956:	60fa      	str	r2, [r7, #12]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d1f9      	bne.n	8001950 <RCC_Delay+0x1c>
}
 800195c:	bf00      	nop
 800195e:	3714      	adds	r7, #20
 8001960:	46bd      	mov	sp, r7
 8001962:	bc80      	pop	{r7}
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	20000000 	.word	0x20000000
 800196c:	10624dd3 	.word	0x10624dd3

08001970 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d101      	bne.n	8001982 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e076      	b.n	8001a70 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001986:	2b00      	cmp	r3, #0
 8001988:	d108      	bne.n	800199c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001992:	d009      	beq.n	80019a8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2200      	movs	r2, #0
 8001998:	61da      	str	r2, [r3, #28]
 800199a:	e005      	b.n	80019a8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2200      	movs	r2, #0
 80019a0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2200      	movs	r2, #0
 80019a6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2200      	movs	r2, #0
 80019ac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d106      	bne.n	80019c8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2200      	movs	r2, #0
 80019be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f7fe ff0c 	bl	80007e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2202      	movs	r2, #2
 80019cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80019de:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80019f0:	431a      	orrs	r2, r3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	68db      	ldr	r3, [r3, #12]
 80019f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019fa:	431a      	orrs	r2, r3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	691b      	ldr	r3, [r3, #16]
 8001a00:	f003 0302 	and.w	r3, r3, #2
 8001a04:	431a      	orrs	r2, r3
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	695b      	ldr	r3, [r3, #20]
 8001a0a:	f003 0301 	and.w	r3, r3, #1
 8001a0e:	431a      	orrs	r2, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	699b      	ldr	r3, [r3, #24]
 8001a14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a18:	431a      	orrs	r2, r3
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	69db      	ldr	r3, [r3, #28]
 8001a1e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001a22:	431a      	orrs	r2, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6a1b      	ldr	r3, [r3, #32]
 8001a28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a2c:	ea42 0103 	orr.w	r1, r2, r3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a34:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	430a      	orrs	r2, r1
 8001a3e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	699b      	ldr	r3, [r3, #24]
 8001a44:	0c1a      	lsrs	r2, r3, #16
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f002 0204 	and.w	r2, r2, #4
 8001a4e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	69da      	ldr	r2, [r3, #28]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a5e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2200      	movs	r2, #0
 8001a64:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2201      	movs	r2, #1
 8001a6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001a6e:	2300      	movs	r3, #0
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	3708      	adds	r7, #8
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}

08001a78 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b08c      	sub	sp, #48	; 0x30
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	60f8      	str	r0, [r7, #12]
 8001a80:	60b9      	str	r1, [r7, #8]
 8001a82:	607a      	str	r2, [r7, #4]
 8001a84:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001a86:	2301      	movs	r3, #1
 8001a88:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d101      	bne.n	8001a9e <HAL_SPI_TransmitReceive+0x26>
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	e18a      	b.n	8001db4 <HAL_SPI_TransmitReceive+0x33c>
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001aa6:	f7ff f8c5 	bl	8000c34 <HAL_GetTick>
 8001aaa:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001ab2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001abc:	887b      	ldrh	r3, [r7, #2]
 8001abe:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001ac0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d00f      	beq.n	8001ae8 <HAL_SPI_TransmitReceive+0x70>
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001ace:	d107      	bne.n	8001ae0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d103      	bne.n	8001ae0 <HAL_SPI_TransmitReceive+0x68>
 8001ad8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001adc:	2b04      	cmp	r3, #4
 8001ade:	d003      	beq.n	8001ae8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001ae6:	e15b      	b.n	8001da0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d005      	beq.n	8001afa <HAL_SPI_TransmitReceive+0x82>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d002      	beq.n	8001afa <HAL_SPI_TransmitReceive+0x82>
 8001af4:	887b      	ldrh	r3, [r7, #2]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d103      	bne.n	8001b02 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001b00:	e14e      	b.n	8001da0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	2b04      	cmp	r3, #4
 8001b0c:	d003      	beq.n	8001b16 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	2205      	movs	r2, #5
 8001b12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	687a      	ldr	r2, [r7, #4]
 8001b20:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	887a      	ldrh	r2, [r7, #2]
 8001b26:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	887a      	ldrh	r2, [r7, #2]
 8001b2c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	68ba      	ldr	r2, [r7, #8]
 8001b32:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	887a      	ldrh	r2, [r7, #2]
 8001b38:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	887a      	ldrh	r2, [r7, #2]
 8001b3e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	2200      	movs	r2, #0
 8001b44:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b56:	2b40      	cmp	r3, #64	; 0x40
 8001b58:	d007      	beq.n	8001b6a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b68:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	68db      	ldr	r3, [r3, #12]
 8001b6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001b72:	d178      	bne.n	8001c66 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d002      	beq.n	8001b82 <HAL_SPI_TransmitReceive+0x10a>
 8001b7c:	8b7b      	ldrh	r3, [r7, #26]
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d166      	bne.n	8001c50 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b86:	881a      	ldrh	r2, [r3, #0]
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b92:	1c9a      	adds	r2, r3, #2
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b9c:	b29b      	uxth	r3, r3
 8001b9e:	3b01      	subs	r3, #1
 8001ba0:	b29a      	uxth	r2, r3
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001ba6:	e053      	b.n	8001c50 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	f003 0302 	and.w	r3, r3, #2
 8001bb2:	2b02      	cmp	r3, #2
 8001bb4:	d11b      	bne.n	8001bee <HAL_SPI_TransmitReceive+0x176>
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001bba:	b29b      	uxth	r3, r3
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d016      	beq.n	8001bee <HAL_SPI_TransmitReceive+0x176>
 8001bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d113      	bne.n	8001bee <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bca:	881a      	ldrh	r2, [r3, #0]
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd6:	1c9a      	adds	r2, r3, #2
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001be0:	b29b      	uxth	r3, r3
 8001be2:	3b01      	subs	r3, #1
 8001be4:	b29a      	uxth	r2, r3
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001bea:	2300      	movs	r3, #0
 8001bec:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	f003 0301 	and.w	r3, r3, #1
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	d119      	bne.n	8001c30 <HAL_SPI_TransmitReceive+0x1b8>
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c00:	b29b      	uxth	r3, r3
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d014      	beq.n	8001c30 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	68da      	ldr	r2, [r3, #12]
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c10:	b292      	uxth	r2, r2
 8001c12:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c18:	1c9a      	adds	r2, r3, #2
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c22:	b29b      	uxth	r3, r3
 8001c24:	3b01      	subs	r3, #1
 8001c26:	b29a      	uxth	r2, r3
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001c30:	f7ff f800 	bl	8000c34 <HAL_GetTick>
 8001c34:	4602      	mov	r2, r0
 8001c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d807      	bhi.n	8001c50 <HAL_SPI_TransmitReceive+0x1d8>
 8001c40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c46:	d003      	beq.n	8001c50 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8001c48:	2303      	movs	r3, #3
 8001c4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001c4e:	e0a7      	b.n	8001da0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d1a6      	bne.n	8001ba8 <HAL_SPI_TransmitReceive+0x130>
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c5e:	b29b      	uxth	r3, r3
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d1a1      	bne.n	8001ba8 <HAL_SPI_TransmitReceive+0x130>
 8001c64:	e07c      	b.n	8001d60 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d002      	beq.n	8001c74 <HAL_SPI_TransmitReceive+0x1fc>
 8001c6e:	8b7b      	ldrh	r3, [r7, #26]
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d16b      	bne.n	8001d4c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	330c      	adds	r3, #12
 8001c7e:	7812      	ldrb	r2, [r2, #0]
 8001c80:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c86:	1c5a      	adds	r2, r3, #1
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c90:	b29b      	uxth	r3, r3
 8001c92:	3b01      	subs	r3, #1
 8001c94:	b29a      	uxth	r2, r3
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001c9a:	e057      	b.n	8001d4c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	f003 0302 	and.w	r3, r3, #2
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d11c      	bne.n	8001ce4 <HAL_SPI_TransmitReceive+0x26c>
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001cae:	b29b      	uxth	r3, r3
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d017      	beq.n	8001ce4 <HAL_SPI_TransmitReceive+0x26c>
 8001cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d114      	bne.n	8001ce4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	330c      	adds	r3, #12
 8001cc4:	7812      	ldrb	r2, [r2, #0]
 8001cc6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ccc:	1c5a      	adds	r2, r3, #1
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001cd6:	b29b      	uxth	r3, r3
 8001cd8:	3b01      	subs	r3, #1
 8001cda:	b29a      	uxth	r2, r3
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	f003 0301 	and.w	r3, r3, #1
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d119      	bne.n	8001d26 <HAL_SPI_TransmitReceive+0x2ae>
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001cf6:	b29b      	uxth	r3, r3
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d014      	beq.n	8001d26 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	68da      	ldr	r2, [r3, #12]
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d06:	b2d2      	uxtb	r2, r2
 8001d08:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d0e:	1c5a      	adds	r2, r3, #1
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d18:	b29b      	uxth	r3, r3
 8001d1a:	3b01      	subs	r3, #1
 8001d1c:	b29a      	uxth	r2, r3
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001d22:	2301      	movs	r3, #1
 8001d24:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001d26:	f7fe ff85 	bl	8000c34 <HAL_GetTick>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2e:	1ad3      	subs	r3, r2, r3
 8001d30:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001d32:	429a      	cmp	r2, r3
 8001d34:	d803      	bhi.n	8001d3e <HAL_SPI_TransmitReceive+0x2c6>
 8001d36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d3c:	d102      	bne.n	8001d44 <HAL_SPI_TransmitReceive+0x2cc>
 8001d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d103      	bne.n	8001d4c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8001d44:	2303      	movs	r3, #3
 8001d46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001d4a:	e029      	b.n	8001da0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d50:	b29b      	uxth	r3, r3
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d1a2      	bne.n	8001c9c <HAL_SPI_TransmitReceive+0x224>
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d5a:	b29b      	uxth	r3, r3
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d19d      	bne.n	8001c9c <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001d60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d62:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001d64:	68f8      	ldr	r0, [r7, #12]
 8001d66:	f000 f8b1 	bl	8001ecc <SPI_EndRxTxTransaction>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d006      	beq.n	8001d7e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2220      	movs	r2, #32
 8001d7a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8001d7c:	e010      	b.n	8001da0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d10b      	bne.n	8001d9e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001d86:	2300      	movs	r3, #0
 8001d88:	617b      	str	r3, [r7, #20]
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	617b      	str	r3, [r7, #20]
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	617b      	str	r3, [r7, #20]
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	e000      	b.n	8001da0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8001d9e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	2201      	movs	r2, #1
 8001da4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	2200      	movs	r2, #0
 8001dac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001db0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3730      	adds	r7, #48	; 0x30
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}

08001dbc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b088      	sub	sp, #32
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	60f8      	str	r0, [r7, #12]
 8001dc4:	60b9      	str	r1, [r7, #8]
 8001dc6:	603b      	str	r3, [r7, #0]
 8001dc8:	4613      	mov	r3, r2
 8001dca:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001dcc:	f7fe ff32 	bl	8000c34 <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dd4:	1a9b      	subs	r3, r3, r2
 8001dd6:	683a      	ldr	r2, [r7, #0]
 8001dd8:	4413      	add	r3, r2
 8001dda:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001ddc:	f7fe ff2a 	bl	8000c34 <HAL_GetTick>
 8001de0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001de2:	4b39      	ldr	r3, [pc, #228]	; (8001ec8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	015b      	lsls	r3, r3, #5
 8001de8:	0d1b      	lsrs	r3, r3, #20
 8001dea:	69fa      	ldr	r2, [r7, #28]
 8001dec:	fb02 f303 	mul.w	r3, r2, r3
 8001df0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001df2:	e054      	b.n	8001e9e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001dfa:	d050      	beq.n	8001e9e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001dfc:	f7fe ff1a 	bl	8000c34 <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	69bb      	ldr	r3, [r7, #24]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	69fa      	ldr	r2, [r7, #28]
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d902      	bls.n	8001e12 <SPI_WaitFlagStateUntilTimeout+0x56>
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d13d      	bne.n	8001e8e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	685a      	ldr	r2, [r3, #4]
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001e20:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001e2a:	d111      	bne.n	8001e50 <SPI_WaitFlagStateUntilTimeout+0x94>
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e34:	d004      	beq.n	8001e40 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e3e:	d107      	bne.n	8001e50 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e4e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e58:	d10f      	bne.n	8001e7a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e68:	601a      	str	r2, [r3, #0]
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001e78:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	2200      	movs	r2, #0
 8001e86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e017      	b.n	8001ebe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d101      	bne.n	8001e98 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8001e94:	2300      	movs	r3, #0
 8001e96:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	3b01      	subs	r3, #1
 8001e9c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	689a      	ldr	r2, [r3, #8]
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	68ba      	ldr	r2, [r7, #8]
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	bf0c      	ite	eq
 8001eae:	2301      	moveq	r3, #1
 8001eb0:	2300      	movne	r3, #0
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	79fb      	ldrb	r3, [r7, #7]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d19b      	bne.n	8001df4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001ebc:	2300      	movs	r3, #0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3720      	adds	r7, #32
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	20000000 	.word	0x20000000

08001ecc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b086      	sub	sp, #24
 8001ed0:	af02      	add	r7, sp, #8
 8001ed2:	60f8      	str	r0, [r7, #12]
 8001ed4:	60b9      	str	r1, [r7, #8]
 8001ed6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	9300      	str	r3, [sp, #0]
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	2180      	movs	r1, #128	; 0x80
 8001ee2:	68f8      	ldr	r0, [r7, #12]
 8001ee4:	f7ff ff6a 	bl	8001dbc <SPI_WaitFlagStateUntilTimeout>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d007      	beq.n	8001efe <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ef2:	f043 0220 	orr.w	r2, r3, #32
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e000      	b.n	8001f00 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8001efe:	2300      	movs	r3, #0
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3710      	adds	r7, #16
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}

08001f08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d101      	bne.n	8001f1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e041      	b.n	8001f9e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d106      	bne.n	8001f34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f7fe fca0 	bl	8000874 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2202      	movs	r2, #2
 8001f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	3304      	adds	r3, #4
 8001f44:	4619      	mov	r1, r3
 8001f46:	4610      	mov	r0, r2
 8001f48:	f000 f930 	bl	80021ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2201      	movs	r2, #1
 8001f50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2201      	movs	r2, #1
 8001f58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2201      	movs	r2, #1
 8001f60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2201      	movs	r2, #1
 8001f68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2201      	movs	r2, #1
 8001f70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2201      	movs	r2, #1
 8001f78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2201      	movs	r2, #1
 8001f88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2201      	movs	r2, #1
 8001f90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2201      	movs	r2, #1
 8001f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f9c:	2300      	movs	r3, #0
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3708      	adds	r7, #8
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
	...

08001fa8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b085      	sub	sp, #20
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d001      	beq.n	8001fc0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e032      	b.n	8002026 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2202      	movs	r2, #2
 8001fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a18      	ldr	r2, [pc, #96]	; (8002030 <HAL_TIM_Base_Start+0x88>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d00e      	beq.n	8001ff0 <HAL_TIM_Base_Start+0x48>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fda:	d009      	beq.n	8001ff0 <HAL_TIM_Base_Start+0x48>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a14      	ldr	r2, [pc, #80]	; (8002034 <HAL_TIM_Base_Start+0x8c>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d004      	beq.n	8001ff0 <HAL_TIM_Base_Start+0x48>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a13      	ldr	r2, [pc, #76]	; (8002038 <HAL_TIM_Base_Start+0x90>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d111      	bne.n	8002014 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	f003 0307 	and.w	r3, r3, #7
 8001ffa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	2b06      	cmp	r3, #6
 8002000:	d010      	beq.n	8002024 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f042 0201 	orr.w	r2, r2, #1
 8002010:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002012:	e007      	b.n	8002024 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f042 0201 	orr.w	r2, r2, #1
 8002022:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002024:	2300      	movs	r3, #0
}
 8002026:	4618      	mov	r0, r3
 8002028:	3714      	adds	r7, #20
 800202a:	46bd      	mov	sp, r7
 800202c:	bc80      	pop	{r7}
 800202e:	4770      	bx	lr
 8002030:	40012c00 	.word	0x40012c00
 8002034:	40000400 	.word	0x40000400
 8002038:	40000800 	.word	0x40000800

0800203c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800204c:	2b01      	cmp	r3, #1
 800204e:	d101      	bne.n	8002054 <HAL_TIM_ConfigClockSource+0x18>
 8002050:	2302      	movs	r3, #2
 8002052:	e0a6      	b.n	80021a2 <HAL_TIM_ConfigClockSource+0x166>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2201      	movs	r2, #1
 8002058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2202      	movs	r2, #2
 8002060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002072:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800207a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	68fa      	ldr	r2, [r7, #12]
 8002082:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	2b40      	cmp	r3, #64	; 0x40
 800208a:	d067      	beq.n	800215c <HAL_TIM_ConfigClockSource+0x120>
 800208c:	2b40      	cmp	r3, #64	; 0x40
 800208e:	d80b      	bhi.n	80020a8 <HAL_TIM_ConfigClockSource+0x6c>
 8002090:	2b10      	cmp	r3, #16
 8002092:	d073      	beq.n	800217c <HAL_TIM_ConfigClockSource+0x140>
 8002094:	2b10      	cmp	r3, #16
 8002096:	d802      	bhi.n	800209e <HAL_TIM_ConfigClockSource+0x62>
 8002098:	2b00      	cmp	r3, #0
 800209a:	d06f      	beq.n	800217c <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800209c:	e078      	b.n	8002190 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800209e:	2b20      	cmp	r3, #32
 80020a0:	d06c      	beq.n	800217c <HAL_TIM_ConfigClockSource+0x140>
 80020a2:	2b30      	cmp	r3, #48	; 0x30
 80020a4:	d06a      	beq.n	800217c <HAL_TIM_ConfigClockSource+0x140>
      break;
 80020a6:	e073      	b.n	8002190 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80020a8:	2b70      	cmp	r3, #112	; 0x70
 80020aa:	d00d      	beq.n	80020c8 <HAL_TIM_ConfigClockSource+0x8c>
 80020ac:	2b70      	cmp	r3, #112	; 0x70
 80020ae:	d804      	bhi.n	80020ba <HAL_TIM_ConfigClockSource+0x7e>
 80020b0:	2b50      	cmp	r3, #80	; 0x50
 80020b2:	d033      	beq.n	800211c <HAL_TIM_ConfigClockSource+0xe0>
 80020b4:	2b60      	cmp	r3, #96	; 0x60
 80020b6:	d041      	beq.n	800213c <HAL_TIM_ConfigClockSource+0x100>
      break;
 80020b8:	e06a      	b.n	8002190 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80020ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020be:	d066      	beq.n	800218e <HAL_TIM_ConfigClockSource+0x152>
 80020c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020c4:	d017      	beq.n	80020f6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80020c6:	e063      	b.n	8002190 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6818      	ldr	r0, [r3, #0]
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	6899      	ldr	r1, [r3, #8]
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	685a      	ldr	r2, [r3, #4]
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	f000 f941 	bl	800235e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80020ea:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	68fa      	ldr	r2, [r7, #12]
 80020f2:	609a      	str	r2, [r3, #8]
      break;
 80020f4:	e04c      	b.n	8002190 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6818      	ldr	r0, [r3, #0]
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	6899      	ldr	r1, [r3, #8]
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	685a      	ldr	r2, [r3, #4]
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	68db      	ldr	r3, [r3, #12]
 8002106:	f000 f92a 	bl	800235e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	689a      	ldr	r2, [r3, #8]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002118:	609a      	str	r2, [r3, #8]
      break;
 800211a:	e039      	b.n	8002190 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6818      	ldr	r0, [r3, #0]
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	6859      	ldr	r1, [r3, #4]
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	461a      	mov	r2, r3
 800212a:	f000 f8a1 	bl	8002270 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	2150      	movs	r1, #80	; 0x50
 8002134:	4618      	mov	r0, r3
 8002136:	f000 f8f8 	bl	800232a <TIM_ITRx_SetConfig>
      break;
 800213a:	e029      	b.n	8002190 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6818      	ldr	r0, [r3, #0]
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	6859      	ldr	r1, [r3, #4]
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	461a      	mov	r2, r3
 800214a:	f000 f8bf 	bl	80022cc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	2160      	movs	r1, #96	; 0x60
 8002154:	4618      	mov	r0, r3
 8002156:	f000 f8e8 	bl	800232a <TIM_ITRx_SetConfig>
      break;
 800215a:	e019      	b.n	8002190 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6818      	ldr	r0, [r3, #0]
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	6859      	ldr	r1, [r3, #4]
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	461a      	mov	r2, r3
 800216a:	f000 f881 	bl	8002270 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	2140      	movs	r1, #64	; 0x40
 8002174:	4618      	mov	r0, r3
 8002176:	f000 f8d8 	bl	800232a <TIM_ITRx_SetConfig>
      break;
 800217a:	e009      	b.n	8002190 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4619      	mov	r1, r3
 8002186:	4610      	mov	r0, r2
 8002188:	f000 f8cf 	bl	800232a <TIM_ITRx_SetConfig>
        break;
 800218c:	e000      	b.n	8002190 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800218e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2201      	movs	r2, #1
 8002194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2200      	movs	r2, #0
 800219c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80021a0:	2300      	movs	r3, #0
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3710      	adds	r7, #16
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
	...

080021ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b085      	sub	sp, #20
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	4a29      	ldr	r2, [pc, #164]	; (8002264 <TIM_Base_SetConfig+0xb8>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d00b      	beq.n	80021dc <TIM_Base_SetConfig+0x30>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021ca:	d007      	beq.n	80021dc <TIM_Base_SetConfig+0x30>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	4a26      	ldr	r2, [pc, #152]	; (8002268 <TIM_Base_SetConfig+0xbc>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d003      	beq.n	80021dc <TIM_Base_SetConfig+0x30>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	4a25      	ldr	r2, [pc, #148]	; (800226c <TIM_Base_SetConfig+0xc0>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d108      	bne.n	80021ee <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	68fa      	ldr	r2, [r7, #12]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4a1c      	ldr	r2, [pc, #112]	; (8002264 <TIM_Base_SetConfig+0xb8>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d00b      	beq.n	800220e <TIM_Base_SetConfig+0x62>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021fc:	d007      	beq.n	800220e <TIM_Base_SetConfig+0x62>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4a19      	ldr	r2, [pc, #100]	; (8002268 <TIM_Base_SetConfig+0xbc>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d003      	beq.n	800220e <TIM_Base_SetConfig+0x62>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a18      	ldr	r2, [pc, #96]	; (800226c <TIM_Base_SetConfig+0xc0>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d108      	bne.n	8002220 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002214:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	68db      	ldr	r3, [r3, #12]
 800221a:	68fa      	ldr	r2, [r7, #12]
 800221c:	4313      	orrs	r3, r2
 800221e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	695b      	ldr	r3, [r3, #20]
 800222a:	4313      	orrs	r3, r2
 800222c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	68fa      	ldr	r2, [r7, #12]
 8002232:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	689a      	ldr	r2, [r3, #8]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	4a07      	ldr	r2, [pc, #28]	; (8002264 <TIM_Base_SetConfig+0xb8>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d103      	bne.n	8002254 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	691a      	ldr	r2, [r3, #16]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2201      	movs	r2, #1
 8002258:	615a      	str	r2, [r3, #20]
}
 800225a:	bf00      	nop
 800225c:	3714      	adds	r7, #20
 800225e:	46bd      	mov	sp, r7
 8002260:	bc80      	pop	{r7}
 8002262:	4770      	bx	lr
 8002264:	40012c00 	.word	0x40012c00
 8002268:	40000400 	.word	0x40000400
 800226c:	40000800 	.word	0x40000800

08002270 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002270:	b480      	push	{r7}
 8002272:	b087      	sub	sp, #28
 8002274:	af00      	add	r7, sp, #0
 8002276:	60f8      	str	r0, [r7, #12]
 8002278:	60b9      	str	r1, [r7, #8]
 800227a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	6a1b      	ldr	r3, [r3, #32]
 8002280:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	6a1b      	ldr	r3, [r3, #32]
 8002286:	f023 0201 	bic.w	r2, r3, #1
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	699b      	ldr	r3, [r3, #24]
 8002292:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800229a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	011b      	lsls	r3, r3, #4
 80022a0:	693a      	ldr	r2, [r7, #16]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	f023 030a 	bic.w	r3, r3, #10
 80022ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80022ae:	697a      	ldr	r2, [r7, #20]
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	693a      	ldr	r2, [r7, #16]
 80022ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	697a      	ldr	r2, [r7, #20]
 80022c0:	621a      	str	r2, [r3, #32]
}
 80022c2:	bf00      	nop
 80022c4:	371c      	adds	r7, #28
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bc80      	pop	{r7}
 80022ca:	4770      	bx	lr

080022cc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b087      	sub	sp, #28
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	60f8      	str	r0, [r7, #12]
 80022d4:	60b9      	str	r1, [r7, #8]
 80022d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	6a1b      	ldr	r3, [r3, #32]
 80022dc:	f023 0210 	bic.w	r2, r3, #16
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	699b      	ldr	r3, [r3, #24]
 80022e8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	6a1b      	ldr	r3, [r3, #32]
 80022ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80022f6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	031b      	lsls	r3, r3, #12
 80022fc:	697a      	ldr	r2, [r7, #20]
 80022fe:	4313      	orrs	r3, r2
 8002300:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002308:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	011b      	lsls	r3, r3, #4
 800230e:	693a      	ldr	r2, [r7, #16]
 8002310:	4313      	orrs	r3, r2
 8002312:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	697a      	ldr	r2, [r7, #20]
 8002318:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	693a      	ldr	r2, [r7, #16]
 800231e:	621a      	str	r2, [r3, #32]
}
 8002320:	bf00      	nop
 8002322:	371c      	adds	r7, #28
 8002324:	46bd      	mov	sp, r7
 8002326:	bc80      	pop	{r7}
 8002328:	4770      	bx	lr

0800232a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800232a:	b480      	push	{r7}
 800232c:	b085      	sub	sp, #20
 800232e:	af00      	add	r7, sp, #0
 8002330:	6078      	str	r0, [r7, #4]
 8002332:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002340:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002342:	683a      	ldr	r2, [r7, #0]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	4313      	orrs	r3, r2
 8002348:	f043 0307 	orr.w	r3, r3, #7
 800234c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	68fa      	ldr	r2, [r7, #12]
 8002352:	609a      	str	r2, [r3, #8]
}
 8002354:	bf00      	nop
 8002356:	3714      	adds	r7, #20
 8002358:	46bd      	mov	sp, r7
 800235a:	bc80      	pop	{r7}
 800235c:	4770      	bx	lr

0800235e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800235e:	b480      	push	{r7}
 8002360:	b087      	sub	sp, #28
 8002362:	af00      	add	r7, sp, #0
 8002364:	60f8      	str	r0, [r7, #12]
 8002366:	60b9      	str	r1, [r7, #8]
 8002368:	607a      	str	r2, [r7, #4]
 800236a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002378:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	021a      	lsls	r2, r3, #8
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	431a      	orrs	r2, r3
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	4313      	orrs	r3, r2
 8002386:	697a      	ldr	r2, [r7, #20]
 8002388:	4313      	orrs	r3, r2
 800238a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	697a      	ldr	r2, [r7, #20]
 8002390:	609a      	str	r2, [r3, #8]
}
 8002392:	bf00      	nop
 8002394:	371c      	adds	r7, #28
 8002396:	46bd      	mov	sp, r7
 8002398:	bc80      	pop	{r7}
 800239a:	4770      	bx	lr

0800239c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800239c:	b480      	push	{r7}
 800239e:	b085      	sub	sp, #20
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d101      	bne.n	80023b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80023b0:	2302      	movs	r3, #2
 80023b2:	e046      	b.n	8002442 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2201      	movs	r2, #1
 80023b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2202      	movs	r2, #2
 80023c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	68fa      	ldr	r2, [r7, #12]
 80023e2:	4313      	orrs	r3, r2
 80023e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	68fa      	ldr	r2, [r7, #12]
 80023ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a16      	ldr	r2, [pc, #88]	; (800244c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d00e      	beq.n	8002416 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002400:	d009      	beq.n	8002416 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a12      	ldr	r2, [pc, #72]	; (8002450 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d004      	beq.n	8002416 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a10      	ldr	r2, [pc, #64]	; (8002454 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d10c      	bne.n	8002430 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800241c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	68ba      	ldr	r2, [r7, #8]
 8002424:	4313      	orrs	r3, r2
 8002426:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	68ba      	ldr	r2, [r7, #8]
 800242e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2201      	movs	r2, #1
 8002434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2200      	movs	r2, #0
 800243c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002440:	2300      	movs	r3, #0
}
 8002442:	4618      	mov	r0, r3
 8002444:	3714      	adds	r7, #20
 8002446:	46bd      	mov	sp, r7
 8002448:	bc80      	pop	{r7}
 800244a:	4770      	bx	lr
 800244c:	40012c00 	.word	0x40012c00
 8002450:	40000400 	.word	0x40000400
 8002454:	40000800 	.word	0x40000800

08002458 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d101      	bne.n	800246a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e03f      	b.n	80024ea <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002470:	b2db      	uxtb	r3, r3
 8002472:	2b00      	cmp	r3, #0
 8002474:	d106      	bne.n	8002484 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2200      	movs	r2, #0
 800247a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f7fe fa16 	bl	80008b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2224      	movs	r2, #36	; 0x24
 8002488:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	68da      	ldr	r2, [r3, #12]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800249a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	f000 f9a3 	bl	80027e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	691a      	ldr	r2, [r3, #16]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80024b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	695a      	ldr	r2, [r3, #20]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80024c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	68da      	ldr	r2, [r3, #12]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80024d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2200      	movs	r2, #0
 80024d6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2220      	movs	r2, #32
 80024dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2220      	movs	r2, #32
 80024e4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80024e8:	2300      	movs	r3, #0
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3708      	adds	r7, #8
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}

080024f2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024f2:	b580      	push	{r7, lr}
 80024f4:	b08a      	sub	sp, #40	; 0x28
 80024f6:	af02      	add	r7, sp, #8
 80024f8:	60f8      	str	r0, [r7, #12]
 80024fa:	60b9      	str	r1, [r7, #8]
 80024fc:	603b      	str	r3, [r7, #0]
 80024fe:	4613      	mov	r3, r2
 8002500:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002502:	2300      	movs	r3, #0
 8002504:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800250c:	b2db      	uxtb	r3, r3
 800250e:	2b20      	cmp	r3, #32
 8002510:	d17c      	bne.n	800260c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d002      	beq.n	800251e <HAL_UART_Transmit+0x2c>
 8002518:	88fb      	ldrh	r3, [r7, #6]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d101      	bne.n	8002522 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e075      	b.n	800260e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002528:	2b01      	cmp	r3, #1
 800252a:	d101      	bne.n	8002530 <HAL_UART_Transmit+0x3e>
 800252c:	2302      	movs	r3, #2
 800252e:	e06e      	b.n	800260e <HAL_UART_Transmit+0x11c>
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2201      	movs	r2, #1
 8002534:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2200      	movs	r2, #0
 800253c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2221      	movs	r2, #33	; 0x21
 8002542:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002546:	f7fe fb75 	bl	8000c34 <HAL_GetTick>
 800254a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	88fa      	ldrh	r2, [r7, #6]
 8002550:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	88fa      	ldrh	r2, [r7, #6]
 8002556:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002560:	d108      	bne.n	8002574 <HAL_UART_Transmit+0x82>
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	691b      	ldr	r3, [r3, #16]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d104      	bne.n	8002574 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800256a:	2300      	movs	r3, #0
 800256c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	61bb      	str	r3, [r7, #24]
 8002572:	e003      	b.n	800257c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002578:	2300      	movs	r3, #0
 800257a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2200      	movs	r2, #0
 8002580:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002584:	e02a      	b.n	80025dc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	9300      	str	r3, [sp, #0]
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	2200      	movs	r2, #0
 800258e:	2180      	movs	r1, #128	; 0x80
 8002590:	68f8      	ldr	r0, [r7, #12]
 8002592:	f000 f8df 	bl	8002754 <UART_WaitOnFlagUntilTimeout>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d001      	beq.n	80025a0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800259c:	2303      	movs	r3, #3
 800259e:	e036      	b.n	800260e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d10b      	bne.n	80025be <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80025a6:	69bb      	ldr	r3, [r7, #24]
 80025a8:	881b      	ldrh	r3, [r3, #0]
 80025aa:	461a      	mov	r2, r3
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80025b4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80025b6:	69bb      	ldr	r3, [r7, #24]
 80025b8:	3302      	adds	r3, #2
 80025ba:	61bb      	str	r3, [r7, #24]
 80025bc:	e007      	b.n	80025ce <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	781a      	ldrb	r2, [r3, #0]
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	3301      	adds	r3, #1
 80025cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80025d2:	b29b      	uxth	r3, r3
 80025d4:	3b01      	subs	r3, #1
 80025d6:	b29a      	uxth	r2, r3
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80025e0:	b29b      	uxth	r3, r3
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d1cf      	bne.n	8002586 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	9300      	str	r3, [sp, #0]
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	2200      	movs	r2, #0
 80025ee:	2140      	movs	r1, #64	; 0x40
 80025f0:	68f8      	ldr	r0, [r7, #12]
 80025f2:	f000 f8af 	bl	8002754 <UART_WaitOnFlagUntilTimeout>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d001      	beq.n	8002600 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80025fc:	2303      	movs	r3, #3
 80025fe:	e006      	b.n	800260e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2220      	movs	r2, #32
 8002604:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002608:	2300      	movs	r3, #0
 800260a:	e000      	b.n	800260e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800260c:	2302      	movs	r3, #2
  }
}
 800260e:	4618      	mov	r0, r3
 8002610:	3720      	adds	r7, #32
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}

08002616 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002616:	b580      	push	{r7, lr}
 8002618:	b08a      	sub	sp, #40	; 0x28
 800261a:	af02      	add	r7, sp, #8
 800261c:	60f8      	str	r0, [r7, #12]
 800261e:	60b9      	str	r1, [r7, #8]
 8002620:	603b      	str	r3, [r7, #0]
 8002622:	4613      	mov	r3, r2
 8002624:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002626:	2300      	movs	r3, #0
 8002628:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002630:	b2db      	uxtb	r3, r3
 8002632:	2b20      	cmp	r3, #32
 8002634:	f040 8089 	bne.w	800274a <HAL_UART_Receive+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d002      	beq.n	8002644 <HAL_UART_Receive+0x2e>
 800263e:	88fb      	ldrh	r3, [r7, #6]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d101      	bne.n	8002648 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e081      	b.n	800274c <HAL_UART_Receive+0x136>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800264e:	2b01      	cmp	r3, #1
 8002650:	d101      	bne.n	8002656 <HAL_UART_Receive+0x40>
 8002652:	2302      	movs	r3, #2
 8002654:	e07a      	b.n	800274c <HAL_UART_Receive+0x136>
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2201      	movs	r2, #1
 800265a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	2200      	movs	r2, #0
 8002662:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2222      	movs	r2, #34	; 0x22
 8002668:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800266c:	f7fe fae2 	bl	8000c34 <HAL_GetTick>
 8002670:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	88fa      	ldrh	r2, [r7, #6]
 8002676:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	88fa      	ldrh	r2, [r7, #6]
 800267c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002686:	d108      	bne.n	800269a <HAL_UART_Receive+0x84>
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	691b      	ldr	r3, [r3, #16]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d104      	bne.n	800269a <HAL_UART_Receive+0x84>
    {
      pdata8bits  = NULL;
 8002690:	2300      	movs	r3, #0
 8002692:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	61bb      	str	r3, [r7, #24]
 8002698:	e003      	b.n	80026a2 <HAL_UART_Receive+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800269e:	2300      	movs	r3, #0
 80026a0:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2200      	movs	r2, #0
 80026a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80026aa:	e043      	b.n	8002734 <HAL_UART_Receive+0x11e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	9300      	str	r3, [sp, #0]
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	2200      	movs	r2, #0
 80026b4:	2120      	movs	r1, #32
 80026b6:	68f8      	ldr	r0, [r7, #12]
 80026b8:	f000 f84c 	bl	8002754 <UART_WaitOnFlagUntilTimeout>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d001      	beq.n	80026c6 <HAL_UART_Receive+0xb0>
      {
        return HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	e042      	b.n	800274c <HAL_UART_Receive+0x136>
      }
      if (pdata8bits == NULL)
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d10c      	bne.n	80026e6 <HAL_UART_Receive+0xd0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	b29b      	uxth	r3, r3
 80026d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026d8:	b29a      	uxth	r2, r3
 80026da:	69bb      	ldr	r3, [r7, #24]
 80026dc:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80026de:	69bb      	ldr	r3, [r7, #24]
 80026e0:	3302      	adds	r3, #2
 80026e2:	61bb      	str	r3, [r7, #24]
 80026e4:	e01f      	b.n	8002726 <HAL_UART_Receive+0x110>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026ee:	d007      	beq.n	8002700 <HAL_UART_Receive+0xea>
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d10a      	bne.n	800270e <HAL_UART_Receive+0xf8>
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	691b      	ldr	r3, [r3, #16]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d106      	bne.n	800270e <HAL_UART_Receive+0xf8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	b2da      	uxtb	r2, r3
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	701a      	strb	r2, [r3, #0]
 800270c:	e008      	b.n	8002720 <HAL_UART_Receive+0x10a>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	b2db      	uxtb	r3, r3
 8002716:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800271a:	b2da      	uxtb	r2, r3
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	3301      	adds	r3, #1
 8002724:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800272a:	b29b      	uxth	r3, r3
 800272c:	3b01      	subs	r3, #1
 800272e:	b29a      	uxth	r2, r3
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002738:	b29b      	uxth	r3, r3
 800273a:	2b00      	cmp	r3, #0
 800273c:	d1b6      	bne.n	80026ac <HAL_UART_Receive+0x96>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2220      	movs	r2, #32
 8002742:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8002746:	2300      	movs	r3, #0
 8002748:	e000      	b.n	800274c <HAL_UART_Receive+0x136>
  }
  else
  {
    return HAL_BUSY;
 800274a:	2302      	movs	r3, #2
  }
}
 800274c:	4618      	mov	r0, r3
 800274e:	3720      	adds	r7, #32
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}

08002754 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b084      	sub	sp, #16
 8002758:	af00      	add	r7, sp, #0
 800275a:	60f8      	str	r0, [r7, #12]
 800275c:	60b9      	str	r1, [r7, #8]
 800275e:	603b      	str	r3, [r7, #0]
 8002760:	4613      	mov	r3, r2
 8002762:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002764:	e02c      	b.n	80027c0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002766:	69bb      	ldr	r3, [r7, #24]
 8002768:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800276c:	d028      	beq.n	80027c0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800276e:	69bb      	ldr	r3, [r7, #24]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d007      	beq.n	8002784 <UART_WaitOnFlagUntilTimeout+0x30>
 8002774:	f7fe fa5e 	bl	8000c34 <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	69ba      	ldr	r2, [r7, #24]
 8002780:	429a      	cmp	r2, r3
 8002782:	d21d      	bcs.n	80027c0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	68da      	ldr	r2, [r3, #12]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002792:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	695a      	ldr	r2, [r3, #20]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f022 0201 	bic.w	r2, r2, #1
 80027a2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2220      	movs	r2, #32
 80027a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2220      	movs	r2, #32
 80027b0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2200      	movs	r2, #0
 80027b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80027bc:	2303      	movs	r3, #3
 80027be:	e00f      	b.n	80027e0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	4013      	ands	r3, r2
 80027ca:	68ba      	ldr	r2, [r7, #8]
 80027cc:	429a      	cmp	r2, r3
 80027ce:	bf0c      	ite	eq
 80027d0:	2301      	moveq	r3, #1
 80027d2:	2300      	movne	r3, #0
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	461a      	mov	r2, r3
 80027d8:	79fb      	ldrb	r3, [r7, #7]
 80027da:	429a      	cmp	r2, r3
 80027dc:	d0c3      	beq.n	8002766 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80027de:	2300      	movs	r3, #0
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3710      	adds	r7, #16
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	691b      	ldr	r3, [r3, #16]
 80027f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	68da      	ldr	r2, [r3, #12]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	430a      	orrs	r2, r1
 8002804:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	689a      	ldr	r2, [r3, #8]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	691b      	ldr	r3, [r3, #16]
 800280e:	431a      	orrs	r2, r3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	695b      	ldr	r3, [r3, #20]
 8002814:	4313      	orrs	r3, r2
 8002816:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	68db      	ldr	r3, [r3, #12]
 800281e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002822:	f023 030c 	bic.w	r3, r3, #12
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	6812      	ldr	r2, [r2, #0]
 800282a:	68b9      	ldr	r1, [r7, #8]
 800282c:	430b      	orrs	r3, r1
 800282e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	695b      	ldr	r3, [r3, #20]
 8002836:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	699a      	ldr	r2, [r3, #24]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	430a      	orrs	r2, r1
 8002844:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a2c      	ldr	r2, [pc, #176]	; (80028fc <UART_SetConfig+0x114>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d103      	bne.n	8002858 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002850:	f7ff f85c 	bl	800190c <HAL_RCC_GetPCLK2Freq>
 8002854:	60f8      	str	r0, [r7, #12]
 8002856:	e002      	b.n	800285e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002858:	f7ff f844 	bl	80018e4 <HAL_RCC_GetPCLK1Freq>
 800285c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800285e:	68fa      	ldr	r2, [r7, #12]
 8002860:	4613      	mov	r3, r2
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	4413      	add	r3, r2
 8002866:	009a      	lsls	r2, r3, #2
 8002868:	441a      	add	r2, r3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	fbb2 f3f3 	udiv	r3, r2, r3
 8002874:	4a22      	ldr	r2, [pc, #136]	; (8002900 <UART_SetConfig+0x118>)
 8002876:	fba2 2303 	umull	r2, r3, r2, r3
 800287a:	095b      	lsrs	r3, r3, #5
 800287c:	0119      	lsls	r1, r3, #4
 800287e:	68fa      	ldr	r2, [r7, #12]
 8002880:	4613      	mov	r3, r2
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	4413      	add	r3, r2
 8002886:	009a      	lsls	r2, r3, #2
 8002888:	441a      	add	r2, r3
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	fbb2 f2f3 	udiv	r2, r2, r3
 8002894:	4b1a      	ldr	r3, [pc, #104]	; (8002900 <UART_SetConfig+0x118>)
 8002896:	fba3 0302 	umull	r0, r3, r3, r2
 800289a:	095b      	lsrs	r3, r3, #5
 800289c:	2064      	movs	r0, #100	; 0x64
 800289e:	fb00 f303 	mul.w	r3, r0, r3
 80028a2:	1ad3      	subs	r3, r2, r3
 80028a4:	011b      	lsls	r3, r3, #4
 80028a6:	3332      	adds	r3, #50	; 0x32
 80028a8:	4a15      	ldr	r2, [pc, #84]	; (8002900 <UART_SetConfig+0x118>)
 80028aa:	fba2 2303 	umull	r2, r3, r2, r3
 80028ae:	095b      	lsrs	r3, r3, #5
 80028b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028b4:	4419      	add	r1, r3
 80028b6:	68fa      	ldr	r2, [r7, #12]
 80028b8:	4613      	mov	r3, r2
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	4413      	add	r3, r2
 80028be:	009a      	lsls	r2, r3, #2
 80028c0:	441a      	add	r2, r3
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80028cc:	4b0c      	ldr	r3, [pc, #48]	; (8002900 <UART_SetConfig+0x118>)
 80028ce:	fba3 0302 	umull	r0, r3, r3, r2
 80028d2:	095b      	lsrs	r3, r3, #5
 80028d4:	2064      	movs	r0, #100	; 0x64
 80028d6:	fb00 f303 	mul.w	r3, r0, r3
 80028da:	1ad3      	subs	r3, r2, r3
 80028dc:	011b      	lsls	r3, r3, #4
 80028de:	3332      	adds	r3, #50	; 0x32
 80028e0:	4a07      	ldr	r2, [pc, #28]	; (8002900 <UART_SetConfig+0x118>)
 80028e2:	fba2 2303 	umull	r2, r3, r2, r3
 80028e6:	095b      	lsrs	r3, r3, #5
 80028e8:	f003 020f 	and.w	r2, r3, #15
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	440a      	add	r2, r1
 80028f2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80028f4:	bf00      	nop
 80028f6:	3710      	adds	r7, #16
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	40013800 	.word	0x40013800
 8002900:	51eb851f 	.word	0x51eb851f

08002904 <_ZN4RF243csnEb>:
#include "RF24_config.hpp"

/****************************************************************************/

void RF24::csn(bool mode)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	460b      	mov	r3, r1
 800290e:	70fb      	strb	r3, [r7, #3]
    if(!mode)
      _SPI.chipSelect(csn_pin);
    #endif // defined(RF24_RPi)

    #if !defined(RF24_LINUX)
    digitalWrite(csn_pin, mode);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	899b      	ldrh	r3, [r3, #12]
 8002914:	78fa      	ldrb	r2, [r7, #3]
 8002916:	4619      	mov	r1, r3
 8002918:	6878      	ldr	r0, [r7, #4]
 800291a:	f001 f9ee 	bl	8003cfa <_ZN4RF2412digitalWriteEtb>
    delayMicroseconds(csDelay);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8002924:	b29b      	uxth	r3, r3
 8002926:	4619      	mov	r1, r3
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f001 fa0c 	bl	8003d46 <_ZN4RF2417delayMicrosecondsEt>
    #endif // !defined(RF24_LINUX)
}
 800292e:	bf00      	nop
 8002930:	3708      	adds	r7, #8
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}

08002936 <_ZN4RF242ceEb>:

/****************************************************************************/

void RF24::ce(bool level)
{
 8002936:	b580      	push	{r7, lr}
 8002938:	b082      	sub	sp, #8
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]
 800293e:	460b      	mov	r3, r1
 8002940:	70fb      	strb	r3, [r7, #3]
    //Allow for 3-pin use on ATTiny
    if (ce_pin != csn_pin) {
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	889a      	ldrh	r2, [r3, #4]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	899b      	ldrh	r3, [r3, #12]
 800294a:	429a      	cmp	r2, r3
 800294c:	d006      	beq.n	800295c <_ZN4RF242ceEb+0x26>
        digitalWrite(ce_pin, level);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	889b      	ldrh	r3, [r3, #4]
 8002952:	78fa      	ldrb	r2, [r7, #3]
 8002954:	4619      	mov	r1, r3
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f001 f9cf 	bl	8003cfa <_ZN4RF2412digitalWriteEtb>
    }
}
 800295c:	bf00      	nop
 800295e:	3708      	adds	r7, #8
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}

08002964 <_ZN4RF2416beginTransactionEv>:

/****************************************************************************/

inline void RF24::beginTransaction()
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
    #if defined(RF24_SPI_TRANSACTIONS)
    _SPI.beginTransaction(SPISettings(spi_speed, MSBFIRST, SPI_MODE0));
    #endif // defined(RF24_SPI_TRANSACTIONS)
    csn(LOW);
 800296c:	2100      	movs	r1, #0
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f7ff ffc8 	bl	8002904 <_ZN4RF243csnEb>
}
 8002974:	bf00      	nop
 8002976:	3708      	adds	r7, #8
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}

0800297c <_ZN4RF2414endTransactionEv>:

/****************************************************************************/

inline void RF24::endTransaction()
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b082      	sub	sp, #8
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
    csn(HIGH);
 8002984:	2101      	movs	r1, #1
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f7ff ffbc 	bl	8002904 <_ZN4RF243csnEb>
    #if defined(RF24_SPI_TRANSACTIONS)
    _SPI.endTransaction();
    #endif // defined(RF24_SPI_TRANSACTIONS)
}
 800298c:	bf00      	nop
 800298e:	3708      	adds	r7, #8
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}

08002994 <_ZN4RF2413read_registerEhPhh>:

/****************************************************************************/

void RF24::read_register(uint8_t reg, uint8_t* buf, uint8_t len)
{
 8002994:	b590      	push	{r4, r7, lr}
 8002996:	b085      	sub	sp, #20
 8002998:	af00      	add	r7, sp, #0
 800299a:	60f8      	str	r0, [r7, #12]
 800299c:	607a      	str	r2, [r7, #4]
 800299e:	461a      	mov	r2, r3
 80029a0:	460b      	mov	r3, r1
 80029a2:	72fb      	strb	r3, [r7, #11]
 80029a4:	4613      	mov	r3, r2
 80029a6:	72bb      	strb	r3, [r7, #10]
    // decrement before to skip status byte
    while ( --size ){ *buf++ = *prx++; }
    endTransaction(); //unlocks mutex and setting csn high
    #else // !defined(RF24_LINUX)

    beginTransaction();
 80029a8:	68f8      	ldr	r0, [r7, #12]
 80029aa:	f7ff ffdb 	bl	8002964 <_ZN4RF2416beginTransactionEv>
    status = _SPI.transfer(R_REGISTER | reg);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	336c      	adds	r3, #108	; 0x6c
 80029b2:	7afa      	ldrb	r2, [r7, #11]
 80029b4:	4611      	mov	r1, r2
 80029b6:	4618      	mov	r0, r3
 80029b8:	f001 fb35 	bl	8004026 <_ZN8SPI_RF248transferEh>
 80029bc:	4603      	mov	r3, r0
 80029be:	461a      	mov	r2, r3
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	751a      	strb	r2, [r3, #20]
    while (len--) {
 80029c4:	7abb      	ldrb	r3, [r7, #10]
 80029c6:	1e5a      	subs	r2, r3, #1
 80029c8:	72ba      	strb	r2, [r7, #10]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	bf14      	ite	ne
 80029ce:	2301      	movne	r3, #1
 80029d0:	2300      	moveq	r3, #0
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d00c      	beq.n	80029f2 <_ZN4RF2413read_registerEhPhh+0x5e>
        *buf++ = _SPI.transfer(0xFF);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 80029de:	687c      	ldr	r4, [r7, #4]
 80029e0:	1c63      	adds	r3, r4, #1
 80029e2:	607b      	str	r3, [r7, #4]
 80029e4:	21ff      	movs	r1, #255	; 0xff
 80029e6:	4610      	mov	r0, r2
 80029e8:	f001 fb1d 	bl	8004026 <_ZN8SPI_RF248transferEh>
 80029ec:	4603      	mov	r3, r0
 80029ee:	7023      	strb	r3, [r4, #0]
    while (len--) {
 80029f0:	e7e8      	b.n	80029c4 <_ZN4RF2413read_registerEhPhh+0x30>
    }
    endTransaction();
 80029f2:	68f8      	ldr	r0, [r7, #12]
 80029f4:	f7ff ffc2 	bl	800297c <_ZN4RF2414endTransactionEv>
    #endif // !defined(RF24_LINUX)
}
 80029f8:	bf00      	nop
 80029fa:	3714      	adds	r7, #20
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd90      	pop	{r4, r7, pc}

08002a00 <_ZN4RF2413read_registerEh>:

/****************************************************************************/

uint8_t RF24::read_register(uint8_t reg)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b084      	sub	sp, #16
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	460b      	mov	r3, r1
 8002a0a:	70fb      	strb	r3, [r7, #3]
    result = *++prx;   // result is 2nd byte of receive buffer

    endTransaction();
    #else // !defined(RF24_LINUX)

    beginTransaction();
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f7ff ffa9 	bl	8002964 <_ZN4RF2416beginTransactionEv>
    status = _SPI.transfer(R_REGISTER | reg);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	336c      	adds	r3, #108	; 0x6c
 8002a16:	78fa      	ldrb	r2, [r7, #3]
 8002a18:	4611      	mov	r1, r2
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f001 fb03 	bl	8004026 <_ZN8SPI_RF248transferEh>
 8002a20:	4603      	mov	r3, r0
 8002a22:	461a      	mov	r2, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	751a      	strb	r2, [r3, #20]
    result = _SPI.transfer(0xff);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	336c      	adds	r3, #108	; 0x6c
 8002a2c:	21ff      	movs	r1, #255	; 0xff
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f001 faf9 	bl	8004026 <_ZN8SPI_RF248transferEh>
 8002a34:	4603      	mov	r3, r0
 8002a36:	73fb      	strb	r3, [r7, #15]
    endTransaction();
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	f7ff ff9f 	bl	800297c <_ZN4RF2414endTransactionEv>

    #endif // !defined(RF24_LINUX)

    return result;
 8002a3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3710      	adds	r7, #16
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <_ZN4RF2414write_registerEhPKhh>:

/****************************************************************************/

void RF24::write_register(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	60f8      	str	r0, [r7, #12]
 8002a50:	607a      	str	r2, [r7, #4]
 8002a52:	461a      	mov	r2, r3
 8002a54:	460b      	mov	r3, r1
 8002a56:	72fb      	strb	r3, [r7, #11]
 8002a58:	4613      	mov	r3, r2
 8002a5a:	72bb      	strb	r3, [r7, #10]
    _SPI.transfernb((char *)spi_txbuff, (char *)spi_rxbuff, size);
    status = *prx; // status is 1st byte of receive buffer
    endTransaction();
    #else // !defined(RF24_LINUX)

    beginTransaction();
 8002a5c:	68f8      	ldr	r0, [r7, #12]
 8002a5e:	f7ff ff81 	bl	8002964 <_ZN4RF2416beginTransactionEv>
    status = _SPI.transfer(W_REGISTER | reg);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 8002a68:	7afb      	ldrb	r3, [r7, #11]
 8002a6a:	f043 0320 	orr.w	r3, r3, #32
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	4619      	mov	r1, r3
 8002a72:	4610      	mov	r0, r2
 8002a74:	f001 fad7 	bl	8004026 <_ZN8SPI_RF248transferEh>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	751a      	strb	r2, [r3, #20]
    while (len--) {
 8002a80:	7abb      	ldrb	r3, [r7, #10]
 8002a82:	1e5a      	subs	r2, r3, #1
 8002a84:	72ba      	strb	r2, [r7, #10]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	bf14      	ite	ne
 8002a8a:	2301      	movne	r3, #1
 8002a8c:	2300      	moveq	r3, #0
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d00a      	beq.n	8002aaa <_ZN4RF2414write_registerEhPKhh+0x62>
        _SPI.transfer(*buf++);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	1c5a      	adds	r2, r3, #1
 8002a9e:	607a      	str	r2, [r7, #4]
 8002aa0:	781b      	ldrb	r3, [r3, #0]
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	f001 fabf 	bl	8004026 <_ZN8SPI_RF248transferEh>
    while (len--) {
 8002aa8:	e7ea      	b.n	8002a80 <_ZN4RF2414write_registerEhPKhh+0x38>
    }
    endTransaction();
 8002aaa:	68f8      	ldr	r0, [r7, #12]
 8002aac:	f7ff ff66 	bl	800297c <_ZN4RF2414endTransactionEv>
    #endif // !defined(RF24_LINUX)
}
 8002ab0:	bf00      	nop
 8002ab2:	3710      	adds	r7, #16
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}

08002ab8 <_ZN4RF2414write_registerEhhb>:

/****************************************************************************/

void RF24::write_register(uint8_t reg, uint8_t value, bool is_cmd_only)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b082      	sub	sp, #8
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	4608      	mov	r0, r1
 8002ac2:	4611      	mov	r1, r2
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	70fb      	strb	r3, [r7, #3]
 8002aca:	460b      	mov	r3, r1
 8002acc:	70bb      	strb	r3, [r7, #2]
 8002ace:	4613      	mov	r3, r2
 8002ad0:	707b      	strb	r3, [r7, #1]
    if (is_cmd_only) {
 8002ad2:	787b      	ldrb	r3, [r7, #1]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d015      	beq.n	8002b04 <_ZN4RF2414write_registerEhhb+0x4c>
        if (reg != RF24_NOP) { // don't print the get_status() operation
            IF_SERIAL_DEBUG(printf_P(PSTR("write_register(%02x)\r\n"), reg));
        }
        beginTransaction();
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f7ff ff43 	bl	8002964 <_ZN4RF2416beginTransactionEv>
        status = _SPI.transfer(W_REGISTER | reg);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 8002ae4:	78fb      	ldrb	r3, [r7, #3]
 8002ae6:	f043 0320 	orr.w	r3, r3, #32
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	4619      	mov	r1, r3
 8002aee:	4610      	mov	r0, r2
 8002af0:	f001 fa99 	bl	8004026 <_ZN8SPI_RF248transferEh>
 8002af4:	4603      	mov	r3, r0
 8002af6:	461a      	mov	r2, r3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	751a      	strb	r2, [r3, #20]
        endTransaction();
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	f7ff ff3d 	bl	800297c <_ZN4RF2414endTransactionEv>
        status = _SPI.transfer(W_REGISTER | reg);
        _SPI.transfer(value);
        endTransaction();
        #endif // !defined(RF24_LINUX)
    }
}
 8002b02:	e01b      	b.n	8002b3c <_ZN4RF2414write_registerEhhb+0x84>
        beginTransaction();
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f7ff ff2d 	bl	8002964 <_ZN4RF2416beginTransactionEv>
        status = _SPI.transfer(W_REGISTER | reg);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 8002b10:	78fb      	ldrb	r3, [r7, #3]
 8002b12:	f043 0320 	orr.w	r3, r3, #32
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	4619      	mov	r1, r3
 8002b1a:	4610      	mov	r0, r2
 8002b1c:	f001 fa83 	bl	8004026 <_ZN8SPI_RF248transferEh>
 8002b20:	4603      	mov	r3, r0
 8002b22:	461a      	mov	r2, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	751a      	strb	r2, [r3, #20]
        _SPI.transfer(value);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	336c      	adds	r3, #108	; 0x6c
 8002b2c:	78ba      	ldrb	r2, [r7, #2]
 8002b2e:	4611      	mov	r1, r2
 8002b30:	4618      	mov	r0, r3
 8002b32:	f001 fa78 	bl	8004026 <_ZN8SPI_RF248transferEh>
        endTransaction();
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f7ff ff20 	bl	800297c <_ZN4RF2414endTransactionEv>
}
 8002b3c:	bf00      	nop
 8002b3e:	3708      	adds	r7, #8
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}

08002b44 <_ZN4RF2413write_payloadEPKvhh>:

/****************************************************************************/

void RF24::write_payload(const void* buf, uint8_t data_len, const uint8_t writeType)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b086      	sub	sp, #24
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	60f8      	str	r0, [r7, #12]
 8002b4c:	60b9      	str	r1, [r7, #8]
 8002b4e:	4611      	mov	r1, r2
 8002b50:	461a      	mov	r2, r3
 8002b52:	460b      	mov	r3, r1
 8002b54:	71fb      	strb	r3, [r7, #7]
 8002b56:	4613      	mov	r3, r2
 8002b58:	71bb      	strb	r3, [r7, #6]
    const uint8_t* current = reinterpret_cast<const uint8_t*>(buf);
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	617b      	str	r3, [r7, #20]

    uint8_t blank_len = !data_len ? 1 : 0;
 8002b5e:	79fb      	ldrb	r3, [r7, #7]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d101      	bne.n	8002b68 <_ZN4RF2413write_payloadEPKvhh+0x24>
 8002b64:	2301      	movs	r3, #1
 8002b66:	e000      	b.n	8002b6a <_ZN4RF2413write_payloadEPKvhh+0x26>
 8002b68:	2300      	movs	r3, #0
 8002b6a:	74fb      	strb	r3, [r7, #19]
    if (!dynamic_payloads_enabled) {
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	7d9b      	ldrb	r3, [r3, #22]
 8002b70:	f083 0301 	eor.w	r3, r3, #1
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d00f      	beq.n	8002b9a <_ZN4RF2413write_payloadEPKvhh+0x56>
        data_len = rf24_min(data_len, payload_size);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	7d5b      	ldrb	r3, [r3, #21]
 8002b7e:	79fa      	ldrb	r2, [r7, #7]
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d302      	bcc.n	8002b8a <_ZN4RF2413write_payloadEPKvhh+0x46>
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	7d5b      	ldrb	r3, [r3, #21]
 8002b88:	e000      	b.n	8002b8c <_ZN4RF2413write_payloadEPKvhh+0x48>
 8002b8a:	79fb      	ldrb	r3, [r7, #7]
 8002b8c:	71fb      	strb	r3, [r7, #7]
        blank_len = payload_size - data_len;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	7d5a      	ldrb	r2, [r3, #21]
 8002b92:	79fb      	ldrb	r3, [r7, #7]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	74fb      	strb	r3, [r7, #19]
 8002b98:	e004      	b.n	8002ba4 <_ZN4RF2413write_payloadEPKvhh+0x60>
    }
    else {
        data_len = rf24_min(data_len, 32);
 8002b9a:	79fb      	ldrb	r3, [r7, #7]
 8002b9c:	2b20      	cmp	r3, #32
 8002b9e:	bf28      	it	cs
 8002ba0:	2320      	movcs	r3, #32
 8002ba2:	71fb      	strb	r3, [r7, #7]
    status = *prx; // status is 1st byte of receive buffer
    endTransaction();

    #else // !defined(RF24_LINUX)

    beginTransaction();
 8002ba4:	68f8      	ldr	r0, [r7, #12]
 8002ba6:	f7ff fedd 	bl	8002964 <_ZN4RF2416beginTransactionEv>
    status = _SPI.transfer(writeType);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	336c      	adds	r3, #108	; 0x6c
 8002bae:	79ba      	ldrb	r2, [r7, #6]
 8002bb0:	4611      	mov	r1, r2
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f001 fa37 	bl	8004026 <_ZN8SPI_RF248transferEh>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	461a      	mov	r2, r3
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	751a      	strb	r2, [r3, #20]
    while (data_len--) {
 8002bc0:	79fb      	ldrb	r3, [r7, #7]
 8002bc2:	1e5a      	subs	r2, r3, #1
 8002bc4:	71fa      	strb	r2, [r7, #7]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	bf14      	ite	ne
 8002bca:	2301      	movne	r3, #1
 8002bcc:	2300      	moveq	r3, #0
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d00a      	beq.n	8002bea <_ZN4RF2413write_payloadEPKvhh+0xa6>
        _SPI.transfer(*current++);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	1c5a      	adds	r2, r3, #1
 8002bde:	617a      	str	r2, [r7, #20]
 8002be0:	781b      	ldrb	r3, [r3, #0]
 8002be2:	4619      	mov	r1, r3
 8002be4:	f001 fa1f 	bl	8004026 <_ZN8SPI_RF248transferEh>
    while (data_len--) {
 8002be8:	e7ea      	b.n	8002bc0 <_ZN4RF2413write_payloadEPKvhh+0x7c>
    }
    while (blank_len--) {
 8002bea:	7cfb      	ldrb	r3, [r7, #19]
 8002bec:	1e5a      	subs	r2, r3, #1
 8002bee:	74fa      	strb	r2, [r7, #19]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	bf14      	ite	ne
 8002bf4:	2301      	movne	r3, #1
 8002bf6:	2300      	moveq	r3, #0
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d006      	beq.n	8002c0c <_ZN4RF2413write_payloadEPKvhh+0xc8>
        _SPI.transfer(0);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	336c      	adds	r3, #108	; 0x6c
 8002c02:	2100      	movs	r1, #0
 8002c04:	4618      	mov	r0, r3
 8002c06:	f001 fa0e 	bl	8004026 <_ZN8SPI_RF248transferEh>
    while (blank_len--) {
 8002c0a:	e7ee      	b.n	8002bea <_ZN4RF2413write_payloadEPKvhh+0xa6>
    }
    endTransaction();
 8002c0c:	68f8      	ldr	r0, [r7, #12]
 8002c0e:	f7ff feb5 	bl	800297c <_ZN4RF2414endTransactionEv>

    #endif // !defined(RF24_LINUX)
}
 8002c12:	bf00      	nop
 8002c14:	3718      	adds	r7, #24
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}

08002c1a <_ZN4RF2412read_payloadEPvh>:

/****************************************************************************/

void RF24::read_payload(void* buf, uint8_t data_len)
{
 8002c1a:	b590      	push	{r4, r7, lr}
 8002c1c:	b087      	sub	sp, #28
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	60f8      	str	r0, [r7, #12]
 8002c22:	60b9      	str	r1, [r7, #8]
 8002c24:	4613      	mov	r3, r2
 8002c26:	71fb      	strb	r3, [r7, #7]
    uint8_t* current = reinterpret_cast<uint8_t*>(buf);
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	617b      	str	r3, [r7, #20]

    uint8_t blank_len = 0;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	74fb      	strb	r3, [r7, #19]
    if (!dynamic_payloads_enabled) {
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	7d9b      	ldrb	r3, [r3, #22]
 8002c34:	f083 0301 	eor.w	r3, r3, #1
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d00f      	beq.n	8002c5e <_ZN4RF2412read_payloadEPvh+0x44>
        data_len = rf24_min(data_len, payload_size);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	7d5b      	ldrb	r3, [r3, #21]
 8002c42:	79fa      	ldrb	r2, [r7, #7]
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d302      	bcc.n	8002c4e <_ZN4RF2412read_payloadEPvh+0x34>
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	7d5b      	ldrb	r3, [r3, #21]
 8002c4c:	e000      	b.n	8002c50 <_ZN4RF2412read_payloadEPvh+0x36>
 8002c4e:	79fb      	ldrb	r3, [r7, #7]
 8002c50:	71fb      	strb	r3, [r7, #7]
        blank_len = payload_size - data_len;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	7d5a      	ldrb	r2, [r3, #21]
 8002c56:	79fb      	ldrb	r3, [r7, #7]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	74fb      	strb	r3, [r7, #19]
 8002c5c:	e004      	b.n	8002c68 <_ZN4RF2412read_payloadEPvh+0x4e>
    }
    else {
        data_len = rf24_min(data_len, 32);
 8002c5e:	79fb      	ldrb	r3, [r7, #7]
 8002c60:	2b20      	cmp	r3, #32
 8002c62:	bf28      	it	cs
 8002c64:	2320      	movcs	r3, #32
 8002c66:	71fb      	strb	r3, [r7, #7]
      *current = *prx;
    }
    endTransaction();
    #else // !defined(RF24_LINUX)

    beginTransaction();
 8002c68:	68f8      	ldr	r0, [r7, #12]
 8002c6a:	f7ff fe7b 	bl	8002964 <_ZN4RF2416beginTransactionEv>
    status = _SPI.transfer(R_RX_PAYLOAD);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	336c      	adds	r3, #108	; 0x6c
 8002c72:	2161      	movs	r1, #97	; 0x61
 8002c74:	4618      	mov	r0, r3
 8002c76:	f001 f9d6 	bl	8004026 <_ZN8SPI_RF248transferEh>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	751a      	strb	r2, [r3, #20]
    while (data_len--) {
 8002c82:	79fb      	ldrb	r3, [r7, #7]
 8002c84:	1e5a      	subs	r2, r3, #1
 8002c86:	71fa      	strb	r2, [r7, #7]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	bf14      	ite	ne
 8002c8c:	2301      	movne	r3, #1
 8002c8e:	2300      	moveq	r3, #0
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d00c      	beq.n	8002cb0 <_ZN4RF2412read_payloadEPvh+0x96>
        *current++ = _SPI.transfer(0xFF);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 8002c9c:	697c      	ldr	r4, [r7, #20]
 8002c9e:	1c63      	adds	r3, r4, #1
 8002ca0:	617b      	str	r3, [r7, #20]
 8002ca2:	21ff      	movs	r1, #255	; 0xff
 8002ca4:	4610      	mov	r0, r2
 8002ca6:	f001 f9be 	bl	8004026 <_ZN8SPI_RF248transferEh>
 8002caa:	4603      	mov	r3, r0
 8002cac:	7023      	strb	r3, [r4, #0]
    while (data_len--) {
 8002cae:	e7e8      	b.n	8002c82 <_ZN4RF2412read_payloadEPvh+0x68>
    }
    while (blank_len--) {
 8002cb0:	7cfb      	ldrb	r3, [r7, #19]
 8002cb2:	1e5a      	subs	r2, r3, #1
 8002cb4:	74fa      	strb	r2, [r7, #19]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	bf14      	ite	ne
 8002cba:	2301      	movne	r3, #1
 8002cbc:	2300      	moveq	r3, #0
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d006      	beq.n	8002cd2 <_ZN4RF2412read_payloadEPvh+0xb8>
        _SPI.transfer(0xff);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	336c      	adds	r3, #108	; 0x6c
 8002cc8:	21ff      	movs	r1, #255	; 0xff
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f001 f9ab 	bl	8004026 <_ZN8SPI_RF248transferEh>
    while (blank_len--) {
 8002cd0:	e7ee      	b.n	8002cb0 <_ZN4RF2412read_payloadEPvh+0x96>
    }
    endTransaction();
 8002cd2:	68f8      	ldr	r0, [r7, #12]
 8002cd4:	f7ff fe52 	bl	800297c <_ZN4RF2414endTransactionEv>

    #endif // !defined(RF24_LINUX)
}
 8002cd8:	bf00      	nop
 8002cda:	371c      	adds	r7, #28
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd90      	pop	{r4, r7, pc}

08002ce0 <_ZN4RF248flush_rxEv>:

/****************************************************************************/

uint8_t RF24::flush_rx(void)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
    write_register(FLUSH_RX, RF24_NOP, true);
 8002ce8:	2301      	movs	r3, #1
 8002cea:	22ff      	movs	r2, #255	; 0xff
 8002cec:	21e2      	movs	r1, #226	; 0xe2
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f7ff fee2 	bl	8002ab8 <_ZN4RF2414write_registerEhhb>
    return status;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	7d1b      	ldrb	r3, [r3, #20]
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3708      	adds	r7, #8
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <_ZN4RF248flush_txEv>:

/****************************************************************************/

uint8_t RF24::flush_tx(void)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b082      	sub	sp, #8
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
    write_register(FLUSH_TX, RF24_NOP, true);
 8002d08:	2301      	movs	r3, #1
 8002d0a:	22ff      	movs	r2, #255	; 0xff
 8002d0c:	21e1      	movs	r1, #225	; 0xe1
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f7ff fed2 	bl	8002ab8 <_ZN4RF2414write_registerEhhb>
    return status;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	7d1b      	ldrb	r3, [r3, #20]
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3708      	adds	r7, #8
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}

08002d20 <_ZN4RF2410get_statusEv>:

/****************************************************************************/

uint8_t RF24::get_status(void)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b082      	sub	sp, #8
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
    write_register(RF24_NOP, RF24_NOP, true);
 8002d28:	2301      	movs	r3, #1
 8002d2a:	22ff      	movs	r2, #255	; 0xff
 8002d2c:	21ff      	movs	r1, #255	; 0xff
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f7ff fec2 	bl	8002ab8 <_ZN4RF2414write_registerEhhb>
    return status;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	7d1b      	ldrb	r3, [r3, #20]
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3708      	adds	r7, #8
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}

08002d40 <_ZN4RF2412print_statusEh>:

/****************************************************************************/
#if !defined(MINIMAL)

void RF24::print_status(uint8_t _status)
{
 8002d40:	b5b0      	push	{r4, r5, r7, lr}
 8002d42:	b086      	sub	sp, #24
 8002d44:	af04      	add	r7, sp, #16
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	460b      	mov	r3, r1
 8002d4a:	70fb      	strb	r3, [r7, #3]
    printf_P(PSTR("STATUS\t\t= 0x%02x RX_DR=%x TX_DS=%x MAX_RT=%x RX_P_NO=%x TX_FULL=%x\r\n"), _status, (_status & _BV(RX_DR)) ? 1 : 0,
 8002d4c:	78f8      	ldrb	r0, [r7, #3]
 8002d4e:	78fb      	ldrb	r3, [r7, #3]
 8002d50:	119b      	asrs	r3, r3, #6
 8002d52:	f003 0401 	and.w	r4, r3, #1
            (_status & _BV(TX_DS)) ? 1 : 0, (_status & _BV(MAX_RT)) ? 1 : 0, ((_status >> RX_P_NO) & 0x07), (_status & _BV(TX_FULL)) ? 1 : 0);
 8002d56:	78fb      	ldrb	r3, [r7, #3]
 8002d58:	115b      	asrs	r3, r3, #5
    printf_P(PSTR("STATUS\t\t= 0x%02x RX_DR=%x TX_DS=%x MAX_RT=%x RX_P_NO=%x TX_FULL=%x\r\n"), _status, (_status & _BV(RX_DR)) ? 1 : 0,
 8002d5a:	f003 0501 	and.w	r5, r3, #1
            (_status & _BV(TX_DS)) ? 1 : 0, (_status & _BV(MAX_RT)) ? 1 : 0, ((_status >> RX_P_NO) & 0x07), (_status & _BV(TX_FULL)) ? 1 : 0);
 8002d5e:	78fb      	ldrb	r3, [r7, #3]
 8002d60:	111b      	asrs	r3, r3, #4
    printf_P(PSTR("STATUS\t\t= 0x%02x RX_DR=%x TX_DS=%x MAX_RT=%x RX_P_NO=%x TX_FULL=%x\r\n"), _status, (_status & _BV(RX_DR)) ? 1 : 0,
 8002d62:	f003 0301 	and.w	r3, r3, #1
            (_status & _BV(TX_DS)) ? 1 : 0, (_status & _BV(MAX_RT)) ? 1 : 0, ((_status >> RX_P_NO) & 0x07), (_status & _BV(TX_FULL)) ? 1 : 0);
 8002d66:	78fa      	ldrb	r2, [r7, #3]
 8002d68:	1052      	asrs	r2, r2, #1
    printf_P(PSTR("STATUS\t\t= 0x%02x RX_DR=%x TX_DS=%x MAX_RT=%x RX_P_NO=%x TX_FULL=%x\r\n"), _status, (_status & _BV(RX_DR)) ? 1 : 0,
 8002d6a:	f002 0207 	and.w	r2, r2, #7
 8002d6e:	78f9      	ldrb	r1, [r7, #3]
 8002d70:	f001 0101 	and.w	r1, r1, #1
 8002d74:	9102      	str	r1, [sp, #8]
 8002d76:	9201      	str	r2, [sp, #4]
 8002d78:	9300      	str	r3, [sp, #0]
 8002d7a:	462b      	mov	r3, r5
 8002d7c:	4622      	mov	r2, r4
 8002d7e:	4601      	mov	r1, r0
 8002d80:	4803      	ldr	r0, [pc, #12]	; (8002d90 <_ZN4RF2412print_statusEh+0x50>)
 8002d82:	f001 fb59 	bl	8004438 <iprintf>
}
 8002d86:	bf00      	nop
 8002d88:	3708      	adds	r7, #8
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bdb0      	pop	{r4, r5, r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	080056f4 	.word	0x080056f4

08002d94 <_ZN4RF2419print_byte_registerEPKchh>:
}

/****************************************************************************/

void RF24::print_byte_register(const char* name, uint8_t reg, uint8_t qty)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b084      	sub	sp, #16
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	60f8      	str	r0, [r7, #12]
 8002d9c:	60b9      	str	r1, [r7, #8]
 8002d9e:	4611      	mov	r1, r2
 8002da0:	461a      	mov	r2, r3
 8002da2:	460b      	mov	r3, r1
 8002da4:	71fb      	strb	r3, [r7, #7]
 8002da6:	4613      	mov	r3, r2
 8002da8:	71bb      	strb	r3, [r7, #6]
    //char extra_tab = strlen_P(name) < 8 ? '\t' : 0;
    //printf_P(PSTR(PRIPSTR"\t%c ="),name,extra_tab);
    #if defined(RF24_LINUX)
    printf("%s\t=", name);
    #else // !defined(RF24_LINUX)
    printf_P(PSTR(PRIPSTR"\t="),name);
 8002daa:	68b9      	ldr	r1, [r7, #8]
 8002dac:	4810      	ldr	r0, [pc, #64]	; (8002df0 <_ZN4RF2419print_byte_registerEPKchh+0x5c>)
 8002dae:	f001 fb43 	bl	8004438 <iprintf>
    #endif // !defined(RF24_LINUX)
    while (qty--) {
 8002db2:	79bb      	ldrb	r3, [r7, #6]
 8002db4:	1e5a      	subs	r2, r3, #1
 8002db6:	71ba      	strb	r2, [r7, #6]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	bf14      	ite	ne
 8002dbc:	2301      	movne	r3, #1
 8002dbe:	2300      	moveq	r3, #0
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d00c      	beq.n	8002de0 <_ZN4RF2419print_byte_registerEPKchh+0x4c>
        printf_P(PSTR(" 0x%02x"), read_register(reg++));
 8002dc6:	79fb      	ldrb	r3, [r7, #7]
 8002dc8:	1c5a      	adds	r2, r3, #1
 8002dca:	71fa      	strb	r2, [r7, #7]
 8002dcc:	4619      	mov	r1, r3
 8002dce:	68f8      	ldr	r0, [r7, #12]
 8002dd0:	f7ff fe16 	bl	8002a00 <_ZN4RF2413read_registerEh>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	4619      	mov	r1, r3
 8002dd8:	4806      	ldr	r0, [pc, #24]	; (8002df4 <_ZN4RF2419print_byte_registerEPKchh+0x60>)
 8002dda:	f001 fb2d 	bl	8004438 <iprintf>
    while (qty--) {
 8002dde:	e7e8      	b.n	8002db2 <_ZN4RF2419print_byte_registerEPKchh+0x1e>
    }
    printf_P(PSTR("\r\n"));
 8002de0:	4805      	ldr	r0, [pc, #20]	; (8002df8 <_ZN4RF2419print_byte_registerEPKchh+0x64>)
 8002de2:	f001 fb9d 	bl	8004520 <puts>
}
 8002de6:	bf00      	nop
 8002de8:	3710      	adds	r7, #16
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	08005768 	.word	0x08005768
 8002df4:	08005770 	.word	0x08005770
 8002df8:	08005778 	.word	0x08005778

08002dfc <_ZN4RF2422print_address_registerEPKchh>:

/****************************************************************************/

void RF24::print_address_register(const char* name, uint8_t reg, uint8_t qty)
{
 8002dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dfe:	b089      	sub	sp, #36	; 0x24
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	60f8      	str	r0, [r7, #12]
 8002e04:	60b9      	str	r1, [r7, #8]
 8002e06:	4611      	mov	r1, r2
 8002e08:	461a      	mov	r2, r3
 8002e0a:	460b      	mov	r3, r1
 8002e0c:	71fb      	strb	r3, [r7, #7]
 8002e0e:	4613      	mov	r3, r2
 8002e10:	71bb      	strb	r3, [r7, #6]

    #if defined(RF24_LINUX)
    printf("%s\t=", name);
    #else // !defined(RF24_LINUX)
    printf_P(PSTR(PRIPSTR"\t="), name);
 8002e12:	68b9      	ldr	r1, [r7, #8]
 8002e14:	4833      	ldr	r0, [pc, #204]	; (8002ee4 <_ZN4RF2422print_address_registerEPKchh+0xe8>)
 8002e16:	f001 fb0f 	bl	8004438 <iprintf>
    #endif // !defined(RF24_LINUX)
    while (qty--) {
 8002e1a:	79bb      	ldrb	r3, [r7, #6]
 8002e1c:	1e5a      	subs	r2, r3, #1
 8002e1e:	71ba      	strb	r2, [r7, #6]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	bf14      	ite	ne
 8002e24:	2301      	movne	r3, #1
 8002e26:	2300      	moveq	r3, #0
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d053      	beq.n	8002ed6 <_ZN4RF2422print_address_registerEPKchh+0xda>
        printf_P(PSTR(" 0x"));
        uint8_t* bufptr = buffer + sizeof(buffer);
        while (--bufptr >= buffer) {
            printf_P(PSTR("%02x"), *bufptr);
        }
    }
 8002e2e:	466b      	mov	r3, sp
 8002e30:	461e      	mov	r6, r3
        uint8_t buffer[addr_width];
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	7f5b      	ldrb	r3, [r3, #29]
 8002e36:	1e5d      	subs	r5, r3, #1
 8002e38:	61bd      	str	r5, [r7, #24]
 8002e3a:	462b      	mov	r3, r5
 8002e3c:	3301      	adds	r3, #1
 8002e3e:	4619      	mov	r1, r3
 8002e40:	f04f 0200 	mov.w	r2, #0
 8002e44:	f04f 0300 	mov.w	r3, #0
 8002e48:	f04f 0400 	mov.w	r4, #0
 8002e4c:	00d4      	lsls	r4, r2, #3
 8002e4e:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8002e52:	00cb      	lsls	r3, r1, #3
 8002e54:	462b      	mov	r3, r5
 8002e56:	3301      	adds	r3, #1
 8002e58:	4619      	mov	r1, r3
 8002e5a:	f04f 0200 	mov.w	r2, #0
 8002e5e:	f04f 0300 	mov.w	r3, #0
 8002e62:	f04f 0400 	mov.w	r4, #0
 8002e66:	00d4      	lsls	r4, r2, #3
 8002e68:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8002e6c:	00cb      	lsls	r3, r1, #3
 8002e6e:	462b      	mov	r3, r5
 8002e70:	3301      	adds	r3, #1
 8002e72:	3307      	adds	r3, #7
 8002e74:	08db      	lsrs	r3, r3, #3
 8002e76:	00db      	lsls	r3, r3, #3
 8002e78:	ebad 0d03 	sub.w	sp, sp, r3
 8002e7c:	466b      	mov	r3, sp
 8002e7e:	3300      	adds	r3, #0
 8002e80:	617b      	str	r3, [r7, #20]
        read_register(reg++ & REGISTER_MASK, buffer, sizeof(buffer));
 8002e82:	79fb      	ldrb	r3, [r7, #7]
 8002e84:	1c5a      	adds	r2, r3, #1
 8002e86:	71fa      	strb	r2, [r7, #7]
 8002e88:	f003 031f 	and.w	r3, r3, #31
 8002e8c:	b2d9      	uxtb	r1, r3
 8002e8e:	697a      	ldr	r2, [r7, #20]
 8002e90:	b2eb      	uxtb	r3, r5
 8002e92:	3301      	adds	r3, #1
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	68f8      	ldr	r0, [r7, #12]
 8002e98:	f7ff fd7c 	bl	8002994 <_ZN4RF2413read_registerEhPhh>
        printf_P(PSTR(" 0x"));
 8002e9c:	4812      	ldr	r0, [pc, #72]	; (8002ee8 <_ZN4RF2422print_address_registerEPKchh+0xec>)
 8002e9e:	f001 facb 	bl	8004438 <iprintf>
        uint8_t* bufptr = buffer + sizeof(buffer);
 8002ea2:	697a      	ldr	r2, [r7, #20]
 8002ea4:	462b      	mov	r3, r5
 8002ea6:	3301      	adds	r3, #1
 8002ea8:	4413      	add	r3, r2
 8002eaa:	61fb      	str	r3, [r7, #28]
        while (--bufptr >= buffer) {
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	3b01      	subs	r3, #1
 8002eb0:	61fb      	str	r3, [r7, #28]
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	69fa      	ldr	r2, [r7, #28]
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	bf2c      	ite	cs
 8002eba:	2301      	movcs	r3, #1
 8002ebc:	2300      	movcc	r3, #0
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d006      	beq.n	8002ed2 <_ZN4RF2422print_address_registerEPKchh+0xd6>
            printf_P(PSTR("%02x"), *bufptr);
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	4619      	mov	r1, r3
 8002eca:	4808      	ldr	r0, [pc, #32]	; (8002eec <_ZN4RF2422print_address_registerEPKchh+0xf0>)
 8002ecc:	f001 fab4 	bl	8004438 <iprintf>
        while (--bufptr >= buffer) {
 8002ed0:	e7ec      	b.n	8002eac <_ZN4RF2422print_address_registerEPKchh+0xb0>
 8002ed2:	46b5      	mov	sp, r6
    while (qty--) {
 8002ed4:	e7a1      	b.n	8002e1a <_ZN4RF2422print_address_registerEPKchh+0x1e>

    printf_P(PSTR("\r\n"));
 8002ed6:	4806      	ldr	r0, [pc, #24]	; (8002ef0 <_ZN4RF2422print_address_registerEPKchh+0xf4>)
 8002ed8:	f001 fb22 	bl	8004520 <puts>
}
 8002edc:	bf00      	nop
 8002ede:	3724      	adds	r7, #36	; 0x24
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ee4:	08005768 	.word	0x08005768
 8002ee8:	0800577c 	.word	0x0800577c
 8002eec:	08005780 	.word	0x08005780
 8002ef0:	08005778 	.word	0x08005778

08002ef4 <_ZN4RF24C1EP12GPIO_TypeDeftS1_tm>:
      spi_speed = RF24_SPI_SPEED;
    }
}*/

//mio
RF24::RF24(GPIO_TypeDef *_ce_port, uint16_t _cepin, GPIO_TypeDef *_csn_port, uint16_t _cspin, uint32_t _spi_speed)
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b084      	sub	sp, #16
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	60f8      	str	r0, [r7, #12]
 8002efc:	60b9      	str	r1, [r7, #8]
 8002efe:	603b      	str	r3, [r7, #0]
 8002f00:	4613      	mov	r3, r2
 8002f02:	80fb      	strh	r3, [r7, #6]
        :ce_port(_ce_port),ce_pin(_cepin), csn_port(_csn_port), csn_pin(_cspin),spi_speed(_spi_speed), payload_size(32), dynamic_payloads_enabled(false), addr_width(5),
         csDelay(5)//,pipe0_reading_address(0)
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	68ba      	ldr	r2, [r7, #8]
 8002f08:	601a      	str	r2, [r3, #0]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	88fa      	ldrh	r2, [r7, #6]
 8002f0e:	809a      	strh	r2, [r3, #4]
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	683a      	ldr	r2, [r7, #0]
 8002f14:	609a      	str	r2, [r3, #8]
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	8b3a      	ldrh	r2, [r7, #24]
 8002f1a:	819a      	strh	r2, [r3, #12]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	69fa      	ldr	r2, [r7, #28]
 8002f20:	611a      	str	r2, [r3, #16]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2220      	movs	r2, #32
 8002f26:	755a      	strb	r2, [r3, #21]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	759a      	strb	r2, [r3, #22]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2205      	movs	r2, #5
 8002f32:	775a      	strb	r2, [r3, #29]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	3320      	adds	r3, #32
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f001 f8c7 	bl	80040cc <_ZN10TIMER_RF24C1Ev>
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	336c      	adds	r3, #108	; 0x6c
 8002f42:	4618      	mov	r0, r3
 8002f44:	f000 fffa 	bl	8003f3c <_ZN8SPI_RF24C1Ev>
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	33d0      	adds	r3, #208	; 0xd0
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f001 f96f 	bl	8004230 <_ZN9UART_RF24C1Ev>
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2205      	movs	r2, #5
 8002f56:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
{
    pipe0_reading_address[0] = 0;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	761a      	strb	r2, [r3, #24]
    if(spi_speed <= 35000){ //Handle old BCM2835 speed constants, default to RF24_SPI_SPEED
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	691b      	ldr	r3, [r3, #16]
 8002f64:	f648 02b8 	movw	r2, #35000	; 0x88b8
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d802      	bhi.n	8002f72 <_ZN4RF24C1EP12GPIO_TypeDeftS1_tm+0x7e>
      spi_speed = RF24_SPI_SPEED;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	4a03      	ldr	r2, [pc, #12]	; (8002f7c <_ZN4RF24C1EP12GPIO_TypeDeftS1_tm+0x88>)
 8002f70:	611a      	str	r2, [r3, #16]
    }

}
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	4618      	mov	r0, r3
 8002f76:	3710      	adds	r7, #16
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	00989680 	.word	0x00989680

08002f80 <_ZN4RF2410setChannelEh>:
	return;
}
/****************************************************************************/

void RF24::setChannel(uint8_t channel)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b084      	sub	sp, #16
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	460b      	mov	r3, r1
 8002f8a:	70fb      	strb	r3, [r7, #3]
    const uint8_t max_channel = 125;
 8002f8c:	237d      	movs	r3, #125	; 0x7d
 8002f8e:	73fb      	strb	r3, [r7, #15]
    write_register(RF_CH, rf24_min(channel, max_channel));
 8002f90:	78fb      	ldrb	r3, [r7, #3]
 8002f92:	2b7c      	cmp	r3, #124	; 0x7c
 8002f94:	d802      	bhi.n	8002f9c <_ZN4RF2410setChannelEh+0x1c>
 8002f96:	1cfb      	adds	r3, r7, #3
 8002f98:	781a      	ldrb	r2, [r3, #0]
 8002f9a:	e000      	b.n	8002f9e <_ZN4RF2410setChannelEh+0x1e>
 8002f9c:	227d      	movs	r2, #125	; 0x7d
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	2105      	movs	r1, #5
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f7ff fd88 	bl	8002ab8 <_ZN4RF2414write_registerEhhb>
}
 8002fa8:	bf00      	nop
 8002faa:	3710      	adds	r7, #16
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}

08002fb0 <_ZN4RF2410getChannelEv>:

uint8_t RF24::getChannel()
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b082      	sub	sp, #8
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]

    return read_register(RF_CH);
 8002fb8:	2105      	movs	r1, #5
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f7ff fd20 	bl	8002a00 <_ZN4RF2413read_registerEh>
 8002fc0:	4603      	mov	r3, r0
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3708      	adds	r7, #8
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}

08002fca <_ZN4RF2414setPayloadSizeEh>:

/****************************************************************************/

void RF24::setPayloadSize(uint8_t size)
{
 8002fca:	b580      	push	{r7, lr}
 8002fcc:	b084      	sub	sp, #16
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	6078      	str	r0, [r7, #4]
 8002fd2:	460b      	mov	r3, r1
 8002fd4:	70fb      	strb	r3, [r7, #3]
    // payload size must be in range [1, 32]
    payload_size = rf24_max(1, rf24_min(32, size));
 8002fd6:	78fb      	ldrb	r3, [r7, #3]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d005      	beq.n	8002fe8 <_ZN4RF2414setPayloadSizeEh+0x1e>
 8002fdc:	78fb      	ldrb	r3, [r7, #3]
 8002fde:	2b20      	cmp	r3, #32
 8002fe0:	bf28      	it	cs
 8002fe2:	2320      	movcs	r3, #32
 8002fe4:	b2da      	uxtb	r2, r3
 8002fe6:	e000      	b.n	8002fea <_ZN4RF2414setPayloadSizeEh+0x20>
 8002fe8:	2201      	movs	r2, #1
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	755a      	strb	r2, [r3, #21]

    // write static payload size setting for all pipes
    for (uint8_t i = 0; i < 6; ++i)
 8002fee:	2300      	movs	r3, #0
 8002ff0:	73fb      	strb	r3, [r7, #15]
 8002ff2:	7bfb      	ldrb	r3, [r7, #15]
 8002ff4:	2b05      	cmp	r3, #5
 8002ff6:	d80c      	bhi.n	8003012 <_ZN4RF2414setPayloadSizeEh+0x48>
        write_register(RX_PW_P0 + i, payload_size);
 8002ff8:	7bfb      	ldrb	r3, [r7, #15]
 8002ffa:	3311      	adds	r3, #17
 8002ffc:	b2d9      	uxtb	r1, r3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	7d5a      	ldrb	r2, [r3, #21]
 8003002:	2300      	movs	r3, #0
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	f7ff fd57 	bl	8002ab8 <_ZN4RF2414write_registerEhhb>
    for (uint8_t i = 0; i < 6; ++i)
 800300a:	7bfb      	ldrb	r3, [r7, #15]
 800300c:	3301      	adds	r3, #1
 800300e:	73fb      	strb	r3, [r7, #15]
 8003010:	e7ef      	b.n	8002ff2 <_ZN4RF2414setPayloadSizeEh+0x28>
}
 8003012:	bf00      	nop
 8003014:	3710      	adds	r7, #16
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}

0800301a <_ZN4RF2414getPayloadSizeEv>:

/****************************************************************************/

uint8_t RF24::getPayloadSize(void)
{
 800301a:	b480      	push	{r7}
 800301c:	b083      	sub	sp, #12
 800301e:	af00      	add	r7, sp, #0
 8003020:	6078      	str	r0, [r7, #4]
    return payload_size;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	7d5b      	ldrb	r3, [r3, #21]
}
 8003026:	4618      	mov	r0, r3
 8003028:	370c      	adds	r7, #12
 800302a:	46bd      	mov	sp, r7
 800302c:	bc80      	pop	{r7}
 800302e:	4770      	bx	lr

08003030 <_ZN4RF2412printDetailsEv>:
    rf24_feature_e_str_closed,
    rf24_feature_e_str_open
};

void RF24::printDetails(void)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b082      	sub	sp, #8
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
    uint8_t bus_ce = csn_pin % 10;
    uint8_t bus_numb = (csn_pin - bus_ce) / 10;
    printf("CSN Pin\t\t= /dev/spidev%d.%d\n", bus_numb, bus_ce);
    printf("CE Pin\t\t= Custom GPIO%d\n", ce_pin);
    #endif
    printf_P(PSTR("SPI Speed\t= %d Mhz\r\n"),(uint8_t)(spi_speed/1000000)); //Print the SPI speed on non-Linux devices
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	691b      	ldr	r3, [r3, #16]
 800303c:	4a44      	ldr	r2, [pc, #272]	; (8003150 <_ZN4RF2412printDetailsEv+0x120>)
 800303e:	fba2 2303 	umull	r2, r3, r2, r3
 8003042:	0c9b      	lsrs	r3, r3, #18
 8003044:	b2db      	uxtb	r3, r3
 8003046:	4619      	mov	r1, r3
 8003048:	4842      	ldr	r0, [pc, #264]	; (8003154 <_ZN4RF2412printDetailsEv+0x124>)
 800304a:	f001 f9f5 	bl	8004438 <iprintf>
    #if defined(RF24_LINUX)
    printf("================ NRF Configuration ================\n");
    #endif // defined(RF24_LINUX)

    print_status(get_status());
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f7ff fe66 	bl	8002d20 <_ZN4RF2410get_statusEv>
 8003054:	4603      	mov	r3, r0
 8003056:	4619      	mov	r1, r3
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f7ff fe71 	bl	8002d40 <_ZN4RF2412print_statusEh>

    print_address_register(PSTR("RX_ADDR_P0-1"), RX_ADDR_P0, 2);
 800305e:	2302      	movs	r3, #2
 8003060:	220a      	movs	r2, #10
 8003062:	493d      	ldr	r1, [pc, #244]	; (8003158 <_ZN4RF2412printDetailsEv+0x128>)
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f7ff fec9 	bl	8002dfc <_ZN4RF2422print_address_registerEPKchh>
    print_byte_register(PSTR("RX_ADDR_P2-5"), RX_ADDR_P2, 4);
 800306a:	2304      	movs	r3, #4
 800306c:	220c      	movs	r2, #12
 800306e:	493b      	ldr	r1, [pc, #236]	; (800315c <_ZN4RF2412printDetailsEv+0x12c>)
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	f7ff fe8f 	bl	8002d94 <_ZN4RF2419print_byte_registerEPKchh>
    print_address_register(PSTR("TX_ADDR\t"), TX_ADDR);
 8003076:	2301      	movs	r3, #1
 8003078:	2210      	movs	r2, #16
 800307a:	4939      	ldr	r1, [pc, #228]	; (8003160 <_ZN4RF2412printDetailsEv+0x130>)
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	f7ff febd 	bl	8002dfc <_ZN4RF2422print_address_registerEPKchh>

    print_byte_register(PSTR("RX_PW_P0-6"), RX_PW_P0, 6);
 8003082:	2306      	movs	r3, #6
 8003084:	2211      	movs	r2, #17
 8003086:	4937      	ldr	r1, [pc, #220]	; (8003164 <_ZN4RF2412printDetailsEv+0x134>)
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	f7ff fe83 	bl	8002d94 <_ZN4RF2419print_byte_registerEPKchh>
    print_byte_register(PSTR("EN_AA\t"), EN_AA);
 800308e:	2301      	movs	r3, #1
 8003090:	2201      	movs	r2, #1
 8003092:	4935      	ldr	r1, [pc, #212]	; (8003168 <_ZN4RF2412printDetailsEv+0x138>)
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f7ff fe7d 	bl	8002d94 <_ZN4RF2419print_byte_registerEPKchh>
    print_byte_register(PSTR("EN_RXADDR"), EN_RXADDR);
 800309a:	2301      	movs	r3, #1
 800309c:	2202      	movs	r2, #2
 800309e:	4933      	ldr	r1, [pc, #204]	; (800316c <_ZN4RF2412printDetailsEv+0x13c>)
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f7ff fe77 	bl	8002d94 <_ZN4RF2419print_byte_registerEPKchh>
    print_byte_register(PSTR("RF_CH\t"), RF_CH);
 80030a6:	2301      	movs	r3, #1
 80030a8:	2205      	movs	r2, #5
 80030aa:	4931      	ldr	r1, [pc, #196]	; (8003170 <_ZN4RF2412printDetailsEv+0x140>)
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f7ff fe71 	bl	8002d94 <_ZN4RF2419print_byte_registerEPKchh>
    print_byte_register(PSTR("RF_SETUP"), RF_SETUP);
 80030b2:	2301      	movs	r3, #1
 80030b4:	2206      	movs	r2, #6
 80030b6:	492f      	ldr	r1, [pc, #188]	; (8003174 <_ZN4RF2412printDetailsEv+0x144>)
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	f7ff fe6b 	bl	8002d94 <_ZN4RF2419print_byte_registerEPKchh>
    print_byte_register(PSTR("CONFIG\t"), NRF_CONFIG);
 80030be:	2301      	movs	r3, #1
 80030c0:	2200      	movs	r2, #0
 80030c2:	492d      	ldr	r1, [pc, #180]	; (8003178 <_ZN4RF2412printDetailsEv+0x148>)
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	f7ff fe65 	bl	8002d94 <_ZN4RF2419print_byte_registerEPKchh>
    print_byte_register(PSTR("DYNPD/FEATURE"), DYNPD, 2);
 80030ca:	2302      	movs	r3, #2
 80030cc:	221c      	movs	r2, #28
 80030ce:	492b      	ldr	r1, [pc, #172]	; (800317c <_ZN4RF2412printDetailsEv+0x14c>)
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	f7ff fe5f 	bl	8002d94 <_ZN4RF2419print_byte_registerEPKchh>

    printf_P(PSTR("Data Rate\t"
    PRIPSTR
    "\r\n"),(char*)pgm_read_ptr(&rf24_datarate_e_str_P[getDataRate()]));
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f000 fda7 	bl	8003c2a <_ZN4RF2411getDataRateEv>
 80030dc:	4603      	mov	r3, r0
 80030de:	461a      	mov	r2, r3
 80030e0:	4b27      	ldr	r3, [pc, #156]	; (8003180 <_ZN4RF2412printDetailsEv+0x150>)
 80030e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    printf_P(PSTR("Data Rate\t"
 80030e6:	4619      	mov	r1, r3
 80030e8:	4826      	ldr	r0, [pc, #152]	; (8003184 <_ZN4RF2412printDetailsEv+0x154>)
 80030ea:	f001 f9a5 	bl	8004438 <iprintf>
    printf_P(PSTR("Model\t\t= "
    PRIPSTR
    "\r\n"),(char*)pgm_read_ptr(&rf24_model_e_str_P[isPVariant()]));
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f000 fcd8 	bl	8003aa4 <_ZN4RF2410isPVariantEv>
 80030f4:	4603      	mov	r3, r0
 80030f6:	461a      	mov	r2, r3
 80030f8:	4b23      	ldr	r3, [pc, #140]	; (8003188 <_ZN4RF2412printDetailsEv+0x158>)
 80030fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    printf_P(PSTR("Model\t\t= "
 80030fe:	4619      	mov	r1, r3
 8003100:	4822      	ldr	r0, [pc, #136]	; (800318c <_ZN4RF2412printDetailsEv+0x15c>)
 8003102:	f001 f999 	bl	8004438 <iprintf>
    printf_P(PSTR("CRC Length\t"
    PRIPSTR
    "\r\n"),(char*)pgm_read_ptr(&rf24_crclength_e_str_P[getCRCLength()]));
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f000 fdae 	bl	8003c68 <_ZN4RF2412getCRCLengthEv>
 800310c:	4603      	mov	r3, r0
 800310e:	461a      	mov	r2, r3
 8003110:	4b1f      	ldr	r3, [pc, #124]	; (8003190 <_ZN4RF2412printDetailsEv+0x160>)
 8003112:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    printf_P(PSTR("CRC Length\t"
 8003116:	4619      	mov	r1, r3
 8003118:	481e      	ldr	r0, [pc, #120]	; (8003194 <_ZN4RF2412printDetailsEv+0x164>)
 800311a:	f001 f98d 	bl	8004438 <iprintf>
    printf_P(PSTR("PA Power\t"
    PRIPSTR
    "\r\n"),(char*)pgm_read_ptr(&rf24_pa_dbm_e_str_P[getPALevel()]));
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f000 fd17 	bl	8003b52 <_ZN4RF2410getPALevelEv>
 8003124:	4603      	mov	r3, r0
 8003126:	461a      	mov	r2, r3
 8003128:	4b1b      	ldr	r3, [pc, #108]	; (8003198 <_ZN4RF2412printDetailsEv+0x168>)
 800312a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    printf_P(PSTR("PA Power\t"
 800312e:	4619      	mov	r1, r3
 8003130:	481a      	ldr	r0, [pc, #104]	; (800319c <_ZN4RF2412printDetailsEv+0x16c>)
 8003132:	f001 f981 	bl	8004438 <iprintf>
    printf_P(PSTR("ARC\t\t= %d\r\n"), getARC());
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f000 fd1d 	bl	8003b76 <_ZN4RF246getARCEv>
 800313c:	4603      	mov	r3, r0
 800313e:	4619      	mov	r1, r3
 8003140:	4817      	ldr	r0, [pc, #92]	; (80031a0 <_ZN4RF2412printDetailsEv+0x170>)
 8003142:	f001 f979 	bl	8004438 <iprintf>
}
 8003146:	bf00      	nop
 8003148:	3708      	adds	r7, #8
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	431bde83 	.word	0x431bde83
 8003154:	08005788 	.word	0x08005788
 8003158:	080057a0 	.word	0x080057a0
 800315c:	080057b0 	.word	0x080057b0
 8003160:	080057c0 	.word	0x080057c0
 8003164:	080057cc 	.word	0x080057cc
 8003168:	080057d8 	.word	0x080057d8
 800316c:	080057e0 	.word	0x080057e0
 8003170:	080057ec 	.word	0x080057ec
 8003174:	080057f4 	.word	0x080057f4
 8003178:	08005800 	.word	0x08005800
 800317c:	08005808 	.word	0x08005808
 8003180:	08005b34 	.word	0x08005b34
 8003184:	08005818 	.word	0x08005818
 8003188:	08005b58 	.word	0x08005b58
 800318c:	08005828 	.word	0x08005828
 8003190:	08005b84 	.word	0x08005b84
 8003194:	08005838 	.word	0x08005838
 8003198:	08005bc0 	.word	0x08005bc0
 800319c:	08005848 	.word	0x08005848
 80031a0:	08005858 	.word	0x08005858

080031a4 <_ZN4RF2418printPrettyDetailsEv>:

void RF24::printPrettyDetails(void) {
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b086      	sub	sp, #24
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
    uint8_t bus_ce = csn_pin % 10;
    uint8_t bus_numb = (csn_pin - bus_ce) / 10;
    printf("CSN Pin\t\t\t= /dev/spidev%d.%d\n", bus_numb, bus_ce);
    printf("CE Pin\t\t\t= Custom GPIO%d\n", ce_pin);
    #endif
    printf_P(PSTR("SPI Frequency\t\t= %d Mhz\n\r"), (uint8_t)(spi_speed / 1000000)); //Print the SPI speed on non-Linux devices
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	691b      	ldr	r3, [r3, #16]
 80031b0:	4a9b      	ldr	r2, [pc, #620]	; (8003420 <_ZN4RF2418printPrettyDetailsEv+0x27c>)
 80031b2:	fba2 2303 	umull	r2, r3, r2, r3
 80031b6:	0c9b      	lsrs	r3, r3, #18
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	4619      	mov	r1, r3
 80031bc:	4899      	ldr	r0, [pc, #612]	; (8003424 <_ZN4RF2418printPrettyDetailsEv+0x280>)
 80031be:	f001 f93b 	bl	8004438 <iprintf>
    #if defined(RF24_LINUX)
    printf("================ NRF Configuration ================\n");
    #endif // defined(RF24_LINUX)

    uint8_t channel = getChannel();
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f7ff fef4 	bl	8002fb0 <_ZN4RF2410getChannelEv>
 80031c8:	4603      	mov	r3, r0
 80031ca:	75fb      	strb	r3, [r7, #23]
    uint16_t frequency = (uint16_t)channel + 2400;
 80031cc:	7dfb      	ldrb	r3, [r7, #23]
 80031ce:	b29b      	uxth	r3, r3
 80031d0:	f503 6316 	add.w	r3, r3, #2400	; 0x960
 80031d4:	82bb      	strh	r3, [r7, #20]
    printf_P(PSTR("Channel\t\t\t= %u (~ %u MHz)\r\n"), channel, frequency);
 80031d6:	7dfb      	ldrb	r3, [r7, #23]
 80031d8:	8aba      	ldrh	r2, [r7, #20]
 80031da:	4619      	mov	r1, r3
 80031dc:	4892      	ldr	r0, [pc, #584]	; (8003428 <_ZN4RF2418printPrettyDetailsEv+0x284>)
 80031de:	f001 f92b 	bl	8004438 <iprintf>

    printf_P(PSTR("RF Data Rate\t\t"
    PRIPSTR
    "\r\n"), (char*)pgm_read_ptr(&rf24_datarate_e_str_P[getDataRate()]));
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f000 fd21 	bl	8003c2a <_ZN4RF2411getDataRateEv>
 80031e8:	4603      	mov	r3, r0
 80031ea:	461a      	mov	r2, r3
 80031ec:	4b8f      	ldr	r3, [pc, #572]	; (800342c <_ZN4RF2418printPrettyDetailsEv+0x288>)
 80031ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    printf_P(PSTR("RF Data Rate\t\t"
 80031f2:	4619      	mov	r1, r3
 80031f4:	488e      	ldr	r0, [pc, #568]	; (8003430 <_ZN4RF2418printPrettyDetailsEv+0x28c>)
 80031f6:	f001 f91f 	bl	8004438 <iprintf>
    printf_P(PSTR("RF Power Amplifier\t"
    PRIPSTR
    "\r\n"), (char*)pgm_read_ptr(&rf24_pa_dbm_e_str_P[getPALevel()]));
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f000 fca9 	bl	8003b52 <_ZN4RF2410getPALevelEv>
 8003200:	4603      	mov	r3, r0
 8003202:	461a      	mov	r2, r3
 8003204:	4b8b      	ldr	r3, [pc, #556]	; (8003434 <_ZN4RF2418printPrettyDetailsEv+0x290>)
 8003206:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    printf_P(PSTR("RF Power Amplifier\t"
 800320a:	4619      	mov	r1, r3
 800320c:	488a      	ldr	r0, [pc, #552]	; (8003438 <_ZN4RF2418printPrettyDetailsEv+0x294>)
 800320e:	f001 f913 	bl	8004438 <iprintf>
    printf_P(PSTR("RF Low Noise Amplifier\t"
    PRIPSTR
    "\r\n"), (char*)pgm_read_ptr(&rf24_feature_e_str_P[(bool)(read_register(RF_SETUP) & 1) * 1]));
 8003212:	2106      	movs	r1, #6
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f7ff fbf3 	bl	8002a00 <_ZN4RF2413read_registerEh>
 800321a:	4603      	mov	r3, r0
 800321c:	f003 0301 	and.w	r3, r3, #1
 8003220:	2b00      	cmp	r3, #0
 8003222:	bf14      	ite	ne
 8003224:	2301      	movne	r3, #1
 8003226:	2300      	moveq	r3, #0
 8003228:	b2db      	uxtb	r3, r3
 800322a:	461a      	mov	r2, r3
 800322c:	4b83      	ldr	r3, [pc, #524]	; (800343c <_ZN4RF2418printPrettyDetailsEv+0x298>)
 800322e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    printf_P(PSTR("RF Low Noise Amplifier\t"
 8003232:	4619      	mov	r1, r3
 8003234:	4882      	ldr	r0, [pc, #520]	; (8003440 <_ZN4RF2418printPrettyDetailsEv+0x29c>)
 8003236:	f001 f8ff 	bl	8004438 <iprintf>
    printf_P(PSTR("CRC Length\t\t"
    PRIPSTR
    "\r\n"), (char*)pgm_read_ptr(&rf24_crclength_e_str_P[getCRCLength()]));
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f000 fd14 	bl	8003c68 <_ZN4RF2412getCRCLengthEv>
 8003240:	4603      	mov	r3, r0
 8003242:	461a      	mov	r2, r3
 8003244:	4b7f      	ldr	r3, [pc, #508]	; (8003444 <_ZN4RF2418printPrettyDetailsEv+0x2a0>)
 8003246:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    printf_P(PSTR("CRC Length\t\t"
 800324a:	4619      	mov	r1, r3
 800324c:	487e      	ldr	r0, [pc, #504]	; (8003448 <_ZN4RF2418printPrettyDetailsEv+0x2a4>)
 800324e:	f001 f8f3 	bl	8004438 <iprintf>
    printf_P(PSTR("Address Length\t\t= %d bytes\r\n"), (read_register(SETUP_AW) & 3) + 2);
 8003252:	2103      	movs	r1, #3
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	f7ff fbd3 	bl	8002a00 <_ZN4RF2413read_registerEh>
 800325a:	4603      	mov	r3, r0
 800325c:	f003 0303 	and.w	r3, r3, #3
 8003260:	3302      	adds	r3, #2
 8003262:	4619      	mov	r1, r3
 8003264:	4879      	ldr	r0, [pc, #484]	; (800344c <_ZN4RF2418printPrettyDetailsEv+0x2a8>)
 8003266:	f001 f8e7 	bl	8004438 <iprintf>
    printf_P(PSTR("Static Payload Length\t= %d bytes\r\n"), getPayloadSize());
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f7ff fed5 	bl	800301a <_ZN4RF2414getPayloadSizeEv>
 8003270:	4603      	mov	r3, r0
 8003272:	4619      	mov	r1, r3
 8003274:	4876      	ldr	r0, [pc, #472]	; (8003450 <_ZN4RF2418printPrettyDetailsEv+0x2ac>)
 8003276:	f001 f8df 	bl	8004438 <iprintf>

    uint8_t setupRetry = read_register(SETUP_RETR);
 800327a:	2104      	movs	r1, #4
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	f7ff fbbf 	bl	8002a00 <_ZN4RF2413read_registerEh>
 8003282:	4603      	mov	r3, r0
 8003284:	74fb      	strb	r3, [r7, #19]
    printf_P(PSTR("Auto Retry Delay\t= %d microseconds\r\n"), (uint16_t)(setupRetry >> ARD) * 250 + 250);
 8003286:	7cfb      	ldrb	r3, [r7, #19]
 8003288:	111b      	asrs	r3, r3, #4
 800328a:	b29b      	uxth	r3, r3
 800328c:	3301      	adds	r3, #1
 800328e:	22fa      	movs	r2, #250	; 0xfa
 8003290:	fb02 f303 	mul.w	r3, r2, r3
 8003294:	4619      	mov	r1, r3
 8003296:	486f      	ldr	r0, [pc, #444]	; (8003454 <_ZN4RF2418printPrettyDetailsEv+0x2b0>)
 8003298:	f001 f8ce 	bl	8004438 <iprintf>
    printf_P(PSTR("Auto Retry Attempts\t= %d maximum\r\n"), setupRetry & 0x0F);
 800329c:	7cfb      	ldrb	r3, [r7, #19]
 800329e:	f003 030f 	and.w	r3, r3, #15
 80032a2:	4619      	mov	r1, r3
 80032a4:	486c      	ldr	r0, [pc, #432]	; (8003458 <_ZN4RF2418printPrettyDetailsEv+0x2b4>)
 80032a6:	f001 f8c7 	bl	8004438 <iprintf>

    uint8_t observeTx = read_register(OBSERVE_TX);
 80032aa:	2108      	movs	r1, #8
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	f7ff fba7 	bl	8002a00 <_ZN4RF2413read_registerEh>
 80032b2:	4603      	mov	r3, r0
 80032b4:	74bb      	strb	r3, [r7, #18]
    printf_P(PSTR("Packets lost on\n    current channel\t= %d\r\n"), observeTx >> 4);
 80032b6:	7cbb      	ldrb	r3, [r7, #18]
 80032b8:	111b      	asrs	r3, r3, #4
 80032ba:	4619      	mov	r1, r3
 80032bc:	4867      	ldr	r0, [pc, #412]	; (800345c <_ZN4RF2418printPrettyDetailsEv+0x2b8>)
 80032be:	f001 f8bb 	bl	8004438 <iprintf>
    printf_P(PSTR("Retry attempts made for\n    last transmission\t= %d\r\n"), observeTx & 0x0F);
 80032c2:	7cbb      	ldrb	r3, [r7, #18]
 80032c4:	f003 030f 	and.w	r3, r3, #15
 80032c8:	4619      	mov	r1, r3
 80032ca:	4865      	ldr	r0, [pc, #404]	; (8003460 <_ZN4RF2418printPrettyDetailsEv+0x2bc>)
 80032cc:	f001 f8b4 	bl	8004438 <iprintf>

    uint8_t features = read_register(FEATURE);
 80032d0:	211d      	movs	r1, #29
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f7ff fb94 	bl	8002a00 <_ZN4RF2413read_registerEh>
 80032d8:	4603      	mov	r3, r0
 80032da:	747b      	strb	r3, [r7, #17]
    printf_P(PSTR("Multicast\t\t"
    PRIPSTR
    "\r\n"), (char*)pgm_read_ptr(&rf24_feature_e_str_P[(bool)(features & _BV(EN_DYN_ACK)) * 2]));
 80032dc:	7c7b      	ldrb	r3, [r7, #17]
 80032de:	005b      	lsls	r3, r3, #1
 80032e0:	f003 0302 	and.w	r3, r3, #2
 80032e4:	4a55      	ldr	r2, [pc, #340]	; (800343c <_ZN4RF2418printPrettyDetailsEv+0x298>)
 80032e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    printf_P(PSTR("Multicast\t\t"
 80032ea:	4619      	mov	r1, r3
 80032ec:	485d      	ldr	r0, [pc, #372]	; (8003464 <_ZN4RF2418printPrettyDetailsEv+0x2c0>)
 80032ee:	f001 f8a3 	bl	8004438 <iprintf>
    printf_P(PSTR("Custom ACK Payload\t"
    PRIPSTR
    "\r\n"), (char*)pgm_read_ptr(&rf24_feature_e_str_P[(bool)(features & _BV(EN_ACK_PAY)) * 1]));
 80032f2:	7c7b      	ldrb	r3, [r7, #17]
 80032f4:	f003 0302 	and.w	r3, r3, #2
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	bf14      	ite	ne
 80032fc:	2301      	movne	r3, #1
 80032fe:	2300      	moveq	r3, #0
 8003300:	b2db      	uxtb	r3, r3
 8003302:	461a      	mov	r2, r3
 8003304:	4b4d      	ldr	r3, [pc, #308]	; (800343c <_ZN4RF2418printPrettyDetailsEv+0x298>)
 8003306:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    printf_P(PSTR("Custom ACK Payload\t"
 800330a:	4619      	mov	r1, r3
 800330c:	4856      	ldr	r0, [pc, #344]	; (8003468 <_ZN4RF2418printPrettyDetailsEv+0x2c4>)
 800330e:	f001 f893 	bl	8004438 <iprintf>

    uint8_t dynPl = read_register(DYNPD);
 8003312:	211c      	movs	r1, #28
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	f7ff fb73 	bl	8002a00 <_ZN4RF2413read_registerEh>
 800331a:	4603      	mov	r3, r0
 800331c:	743b      	strb	r3, [r7, #16]
    uint8_t autoAck = read_register(EN_AA);
 800331e:	2101      	movs	r1, #1
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	f7ff fb6d 	bl	8002a00 <_ZN4RF2413read_registerEh>
 8003326:	4603      	mov	r3, r0
 8003328:	73fb      	strb	r3, [r7, #15]
    printf_P(PSTR("Dynamic Payloads\t"
    PRIPSTR
    "\r\n"), (char*)pgm_read_ptr(&rf24_feature_e_str_P[(dynPl && (features &_BV(EN_DPL))) * 1]));
 800332a:	7c3b      	ldrb	r3, [r7, #16]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d006      	beq.n	800333e <_ZN4RF2418printPrettyDetailsEv+0x19a>
 8003330:	7c7b      	ldrb	r3, [r7, #17]
 8003332:	f003 0304 	and.w	r3, r3, #4
 8003336:	2b00      	cmp	r3, #0
 8003338:	d001      	beq.n	800333e <_ZN4RF2418printPrettyDetailsEv+0x19a>
 800333a:	2301      	movs	r3, #1
 800333c:	e000      	b.n	8003340 <_ZN4RF2418printPrettyDetailsEv+0x19c>
 800333e:	2300      	movs	r3, #0
 8003340:	461a      	mov	r2, r3
 8003342:	4b3e      	ldr	r3, [pc, #248]	; (800343c <_ZN4RF2418printPrettyDetailsEv+0x298>)
 8003344:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    printf_P(PSTR("Dynamic Payloads\t"
 8003348:	4619      	mov	r1, r3
 800334a:	4848      	ldr	r0, [pc, #288]	; (800346c <_ZN4RF2418printPrettyDetailsEv+0x2c8>)
 800334c:	f001 f874 	bl	8004438 <iprintf>
    printf_P(PSTR("Auto Acknowledgment\t"
    PRIPSTR
    "\r\n"), (char*)pgm_read_ptr(&rf24_feature_e_str_P[(bool)(autoAck & 1) * 1]));
 8003350:	7bfb      	ldrb	r3, [r7, #15]
 8003352:	f003 0301 	and.w	r3, r3, #1
 8003356:	2b00      	cmp	r3, #0
 8003358:	bf14      	ite	ne
 800335a:	2301      	movne	r3, #1
 800335c:	2300      	moveq	r3, #0
 800335e:	b2db      	uxtb	r3, r3
 8003360:	461a      	mov	r2, r3
 8003362:	4b36      	ldr	r3, [pc, #216]	; (800343c <_ZN4RF2418printPrettyDetailsEv+0x298>)
 8003364:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    printf_P(PSTR("Auto Acknowledgment\t"
 8003368:	4619      	mov	r1, r3
 800336a:	4841      	ldr	r0, [pc, #260]	; (8003470 <_ZN4RF2418printPrettyDetailsEv+0x2cc>)
 800336c:	f001 f864 	bl	8004438 <iprintf>

    config_reg = read_register(NRF_CONFIG);
 8003370:	2100      	movs	r1, #0
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f7ff fb44 	bl	8002a00 <_ZN4RF2413read_registerEh>
 8003378:	4603      	mov	r3, r0
 800337a:	461a      	mov	r2, r3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	779a      	strb	r2, [r3, #30]
    printf_P(PSTR("Primary Mode\t\t= %cX\r\n"), config_reg & _BV(PWR_UP) ? 'T' : 'R');
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	7f9b      	ldrb	r3, [r3, #30]
 8003384:	f003 0302 	and.w	r3, r3, #2
 8003388:	2b00      	cmp	r3, #0
 800338a:	d001      	beq.n	8003390 <_ZN4RF2418printPrettyDetailsEv+0x1ec>
 800338c:	2354      	movs	r3, #84	; 0x54
 800338e:	e000      	b.n	8003392 <_ZN4RF2418printPrettyDetailsEv+0x1ee>
 8003390:	2352      	movs	r3, #82	; 0x52
 8003392:	4619      	mov	r1, r3
 8003394:	4837      	ldr	r0, [pc, #220]	; (8003474 <_ZN4RF2418printPrettyDetailsEv+0x2d0>)
 8003396:	f001 f84f 	bl	8004438 <iprintf>
    print_address_register(PSTR("TX address\t"), TX_ADDR);
 800339a:	2301      	movs	r3, #1
 800339c:	2210      	movs	r2, #16
 800339e:	4936      	ldr	r1, [pc, #216]	; (8003478 <_ZN4RF2418printPrettyDetailsEv+0x2d4>)
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	f7ff fd2b 	bl	8002dfc <_ZN4RF2422print_address_registerEPKchh>

    uint8_t openPipes = read_register(EN_RXADDR);
 80033a6:	2102      	movs	r1, #2
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	f7ff fb29 	bl	8002a00 <_ZN4RF2413read_registerEh>
 80033ae:	4603      	mov	r3, r0
 80033b0:	73bb      	strb	r3, [r7, #14]
    for (uint8_t i = 0; i < 6; ++i) {
 80033b2:	2300      	movs	r3, #0
 80033b4:	733b      	strb	r3, [r7, #12]
 80033b6:	7b3b      	ldrb	r3, [r7, #12]
 80033b8:	2b05      	cmp	r3, #5
 80033ba:	d82d      	bhi.n	8003418 <_ZN4RF2418printPrettyDetailsEv+0x274>
        bool isOpen = openPipes & _BV(i);
 80033bc:	7bbb      	ldrb	r3, [r7, #14]
 80033be:	7b3a      	ldrb	r2, [r7, #12]
 80033c0:	4113      	asrs	r3, r2
 80033c2:	f003 0301 	and.w	r3, r3, #1
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	bf14      	ite	ne
 80033ca:	2301      	movne	r3, #1
 80033cc:	2300      	moveq	r3, #0
 80033ce:	737b      	strb	r3, [r7, #13]
        printf_P(PSTR("pipe %u ("
 80033d0:	7b3b      	ldrb	r3, [r7, #12]
 80033d2:	4619      	mov	r1, r3
        PRIPSTR
        ") bound"), i, (char*)pgm_read_ptr(&rf24_feature_e_str_P[isOpen + 3]));
 80033d4:	7b7b      	ldrb	r3, [r7, #13]
 80033d6:	3303      	adds	r3, #3
 80033d8:	4a18      	ldr	r2, [pc, #96]	; (800343c <_ZN4RF2418printPrettyDetailsEv+0x298>)
 80033da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
        printf_P(PSTR("pipe %u ("
 80033de:	461a      	mov	r2, r3
 80033e0:	4826      	ldr	r0, [pc, #152]	; (800347c <_ZN4RF2418printPrettyDetailsEv+0x2d8>)
 80033e2:	f001 f829 	bl	8004438 <iprintf>
        if (i < 2) {
 80033e6:	7b3b      	ldrb	r3, [r7, #12]
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d808      	bhi.n	80033fe <_ZN4RF2418printPrettyDetailsEv+0x25a>
            print_address_register(PSTR(""), RX_ADDR_P0 + i);
 80033ec:	7b3b      	ldrb	r3, [r7, #12]
 80033ee:	330a      	adds	r3, #10
 80033f0:	b2da      	uxtb	r2, r3
 80033f2:	2301      	movs	r3, #1
 80033f4:	4922      	ldr	r1, [pc, #136]	; (8003480 <_ZN4RF2418printPrettyDetailsEv+0x2dc>)
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f7ff fd00 	bl	8002dfc <_ZN4RF2422print_address_registerEPKchh>
 80033fc:	e007      	b.n	800340e <_ZN4RF2418printPrettyDetailsEv+0x26a>
        }
        else {
            print_byte_register(PSTR(""), RX_ADDR_P0 + i);
 80033fe:	7b3b      	ldrb	r3, [r7, #12]
 8003400:	330a      	adds	r3, #10
 8003402:	b2da      	uxtb	r2, r3
 8003404:	2301      	movs	r3, #1
 8003406:	491e      	ldr	r1, [pc, #120]	; (8003480 <_ZN4RF2418printPrettyDetailsEv+0x2dc>)
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	f7ff fcc3 	bl	8002d94 <_ZN4RF2419print_byte_registerEPKchh>
    for (uint8_t i = 0; i < 6; ++i) {
 800340e:	7b3b      	ldrb	r3, [r7, #12]
 8003410:	3301      	adds	r3, #1
 8003412:	b2db      	uxtb	r3, r3
 8003414:	733b      	strb	r3, [r7, #12]
 8003416:	e7ce      	b.n	80033b6 <_ZN4RF2418printPrettyDetailsEv+0x212>
        }
    }
}
 8003418:	bf00      	nop
 800341a:	3718      	adds	r7, #24
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}
 8003420:	431bde83 	.word	0x431bde83
 8003424:	08005864 	.word	0x08005864
 8003428:	08005880 	.word	0x08005880
 800342c:	08005b34 	.word	0x08005b34
 8003430:	0800589c 	.word	0x0800589c
 8003434:	08005bc0 	.word	0x08005bc0
 8003438:	080058b0 	.word	0x080058b0
 800343c:	08005bf8 	.word	0x08005bf8
 8003440:	080058c8 	.word	0x080058c8
 8003444:	08005b84 	.word	0x08005b84
 8003448:	080058e4 	.word	0x080058e4
 800344c:	080058f8 	.word	0x080058f8
 8003450:	08005918 	.word	0x08005918
 8003454:	0800593c 	.word	0x0800593c
 8003458:	08005964 	.word	0x08005964
 800345c:	08005988 	.word	0x08005988
 8003460:	080059b4 	.word	0x080059b4
 8003464:	080059ec 	.word	0x080059ec
 8003468:	080059fc 	.word	0x080059fc
 800346c:	08005a14 	.word	0x08005a14
 8003470:	08005a2c 	.word	0x08005a2c
 8003474:	08005a48 	.word	0x08005a48
 8003478:	08005a60 	.word	0x08005a60
 800347c:	08005a6c 	.word	0x08005a6c
 8003480:	08005a80 	.word	0x08005a80

08003484 <_ZN4RF245beginEv>:
#endif // !defined(MINIMAL)

/****************************************************************************/

bool RF24::begin(void)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b084      	sub	sp, #16
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
      ce(LOW);
      csn(HIGH);
      delay(200);
    #else
      // Initialize pins
      if (ce_pin != csn_pin) {
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	889a      	ldrh	r2, [r3, #4]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	899b      	ldrh	r3, [r3, #12]
 8003494:	429a      	cmp	r2, r3
 8003496:	d002      	beq.n	800349e <_ZN4RF245beginEv+0x1a>
    	  pinModeRF24_ce_csn(); //mio
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	f000 fc75 	bl	8003d88 <_ZN4RF2418pinModeRF24_ce_csnEv>
      }
      timerRF24.begin(); //mio
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	3320      	adds	r3, #32
 80034a2:	4618      	mov	r0, r3
 80034a4:	f000 fe2e 	bl	8004104 <_ZN10TIMER_RF245beginEv>
      uartRF24.begin(); //mio
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	33d0      	adds	r3, #208	; 0xd0
 80034ac:	4618      	mov	r0, r3
 80034ae:	f000 ff21 	bl	80042f4 <_ZN9UART_RF245beginEv>
      printf("Ciao uart e timer inizializzati\r\n"); //mio
 80034b2:	4848      	ldr	r0, [pc, #288]	; (80035d4 <_ZN4RF245beginEv+0x150>)
 80034b4:	f001 f834 	bl	8004520 <puts>
      _SPI.begin();
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	336c      	adds	r3, #108	; 0x6c
 80034bc:	4946      	ldr	r1, [pc, #280]	; (80035d8 <_ZN4RF245beginEv+0x154>)
 80034be:	4618      	mov	r0, r3
 80034c0:	f000 fd8e 	bl	8003fe0 <_ZN8SPI_RF245beginEm>
      ce(LOW);
 80034c4:	2100      	movs	r1, #0
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f7ff fa35 	bl	8002936 <_ZN4RF242ceEb>
      csn(HIGH);
 80034cc:	2101      	movs	r1, #1
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f7ff fa18 	bl	8002904 <_ZN4RF243csnEb>
    // This is actually only required following power up but some settling time also appears to
    // be required after resets too. For full coverage, we'll always assume the worst.
    // Enabling 16b CRC is by far the most obvious case if the wrong timing is used - or skipped.
    // Technically we require 4.5ms + 14us as a worst case. We'll just call it 5ms for good measure.
    // WARNING: Delay is based on P-variant whereby non-P *may* require different timing.
    delay(5);
 80034d4:	2005      	movs	r0, #5
 80034d6:	f7fd fbb7 	bl	8000c48 <HAL_Delay>

    // Set 1500uS (minimum for 32B payload in ESB@250KBPS) timeouts, to make testing a little easier
    // WARNING: If this is ever lowered, either 250KBS mode with AA is broken or maximum packet
    // sizes must never be used. See datasheet for a more complete explanation.
    setRetries(5, 15);
 80034da:	220f      	movs	r2, #15
 80034dc:	2105      	movs	r1, #5
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f000 fbef 	bl	8003cc2 <_ZN4RF2410setRetriesEhh>

    // Then set the data rate to the slowest (and most reliable) speed supported by all
    // hardware.
    setDataRate(RF24_1MBPS);
 80034e4:	2100      	movs	r1, #0
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f000 fb55 	bl	8003b96 <_ZN4RF2411setDataRateE15rf24_datarate_e>

    // detect if is a plus variant & use old toggle features command accordingly
    uint8_t before_toggle = read_register(FEATURE);
 80034ec:	211d      	movs	r1, #29
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f7ff fa86 	bl	8002a00 <_ZN4RF2413read_registerEh>
 80034f4:	4603      	mov	r3, r0
 80034f6:	73fb      	strb	r3, [r7, #15]
    toggle_features();
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f000 fa97 	bl	8003a2c <_ZN4RF2415toggle_featuresEv>
    uint8_t after_toggle = read_register(FEATURE);
 80034fe:	211d      	movs	r1, #29
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f7ff fa7d 	bl	8002a00 <_ZN4RF2413read_registerEh>
 8003506:	4603      	mov	r3, r0
 8003508:	73bb      	strb	r3, [r7, #14]
    _is_p_variant = before_toggle == after_toggle;
 800350a:	7bfa      	ldrb	r2, [r7, #15]
 800350c:	7bbb      	ldrb	r3, [r7, #14]
 800350e:	429a      	cmp	r2, r3
 8003510:	bf0c      	ite	eq
 8003512:	2301      	moveq	r3, #1
 8003514:	2300      	movne	r3, #0
 8003516:	b2da      	uxtb	r2, r3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	77da      	strb	r2, [r3, #31]
    if (after_toggle){
 800351c:	7bbb      	ldrb	r3, [r7, #14]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d00c      	beq.n	800353c <_ZN4RF245beginEv+0xb8>
        if (_is_p_variant){
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	7fdb      	ldrb	r3, [r3, #31]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d002      	beq.n	8003530 <_ZN4RF245beginEv+0xac>
            // module did not experience power-on-reset (#401)
            toggle_features();
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f000 fa7e 	bl	8003a2c <_ZN4RF2415toggle_featuresEv>
        }
        // allow use of multicast parameter and dynamic payloads by default
        write_register(FEATURE, 0);
 8003530:	2300      	movs	r3, #0
 8003532:	2200      	movs	r2, #0
 8003534:	211d      	movs	r1, #29
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f7ff fabe 	bl	8002ab8 <_ZN4RF2414write_registerEhhb>
    }
    ack_payloads_enabled = false;     // ack payloads disabled by default
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2200      	movs	r2, #0
 8003540:	75da      	strb	r2, [r3, #23]
    write_register(DYNPD, 0);         // disable dynamic payloads by default (for all pipes)
 8003542:	2300      	movs	r3, #0
 8003544:	2200      	movs	r2, #0
 8003546:	211c      	movs	r1, #28
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	f7ff fab5 	bl	8002ab8 <_ZN4RF2414write_registerEhhb>
    dynamic_payloads_enabled = false;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2200      	movs	r2, #0
 8003552:	759a      	strb	r2, [r3, #22]
    write_register(EN_AA, 0x3F);      // enable auto-ack on all pipes
 8003554:	2300      	movs	r3, #0
 8003556:	223f      	movs	r2, #63	; 0x3f
 8003558:	2101      	movs	r1, #1
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f7ff faac 	bl	8002ab8 <_ZN4RF2414write_registerEhhb>
    write_register(EN_RXADDR, 0);     // close all RX pipes
 8003560:	2300      	movs	r3, #0
 8003562:	2200      	movs	r2, #0
 8003564:	2102      	movs	r1, #2
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f7ff faa6 	bl	8002ab8 <_ZN4RF2414write_registerEhhb>
    setPayloadSize(32);               // set static payload size to 32 (max) bytes by default
 800356c:	2120      	movs	r1, #32
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f7ff fd2b 	bl	8002fca <_ZN4RF2414setPayloadSizeEh>
    setAddressWidth(5);               // set default address length to (max) 5 bytes
 8003574:	2105      	movs	r1, #5
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f000 f9b7 	bl	80038ea <_ZN4RF2415setAddressWidthEh>

    // Set up default configuration.  Callers can always change it later.
    // This channel should be universally safe and not bleed over into adjacent
    // spectrum.
    setChannel(76);
 800357c:	214c      	movs	r1, #76	; 0x4c
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f7ff fcfe 	bl	8002f80 <_ZN4RF2410setChannelEh>

    // Reset current status
    // Notice reset and flush is the last thing we do
    write_register(NRF_STATUS, _BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT));
 8003584:	2300      	movs	r3, #0
 8003586:	2270      	movs	r2, #112	; 0x70
 8003588:	2107      	movs	r1, #7
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f7ff fa94 	bl	8002ab8 <_ZN4RF2414write_registerEhhb>


    // Flush buffers
    flush_rx();
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f7ff fba5 	bl	8002ce0 <_ZN4RF248flush_rxEv>
    flush_tx();
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f7ff fbb2 	bl	8002d00 <_ZN4RF248flush_txEv>
    //      Enable PTX
    //      Power Up
    //      16-bit CRC (CRC required by auto-ack)
    // Do not write CE high so radio will remain in standby I mode
    // PTX should use only 22uA of power
    write_register(NRF_CONFIG, (_BV(EN_CRC) | _BV(CRCO)) );
 800359c:	2300      	movs	r3, #0
 800359e:	220c      	movs	r2, #12
 80035a0:	2100      	movs	r1, #0
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f7ff fa88 	bl	8002ab8 <_ZN4RF2414write_registerEhhb>
    config_reg = read_register(NRF_CONFIG);
 80035a8:	2100      	movs	r1, #0
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f7ff fa28 	bl	8002a00 <_ZN4RF2413read_registerEh>
 80035b0:	4603      	mov	r3, r0
 80035b2:	461a      	mov	r2, r3
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	779a      	strb	r2, [r3, #30]

    powerUp();
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	f000 f885 	bl	80036c8 <_ZN4RF247powerUpEv>

    // if config is not set correctly then there was a bad response from module
    return config_reg == (_BV(EN_CRC) | _BV(CRCO) | _BV(PWR_UP)) ? true : false;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	7f9b      	ldrb	r3, [r3, #30]
 80035c2:	2b0e      	cmp	r3, #14
 80035c4:	bf0c      	ite	eq
 80035c6:	2301      	moveq	r3, #1
 80035c8:	2300      	movne	r3, #0
 80035ca:	b2db      	uxtb	r3, r3
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	3710      	adds	r7, #16
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}
 80035d4:	08005a84 	.word	0x08005a84
 80035d8:	00989680 	.word	0x00989680

080035dc <_ZN4RF2414startListeningEv>:
}

/****************************************************************************/

void RF24::startListening(void)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b082      	sub	sp, #8
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
    #if !defined(RF24_TINY) && !defined(LITTLEWIRE)
    powerUp();
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f000 f86f 	bl	80036c8 <_ZN4RF247powerUpEv>
    #endif
    config_reg |= _BV(PRIM_RX);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	7f9b      	ldrb	r3, [r3, #30]
 80035ee:	f043 0301 	orr.w	r3, r3, #1
 80035f2:	b2da      	uxtb	r2, r3
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	779a      	strb	r2, [r3, #30]
    write_register(NRF_CONFIG, config_reg);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	7f9a      	ldrb	r2, [r3, #30]
 80035fc:	2300      	movs	r3, #0
 80035fe:	2100      	movs	r1, #0
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f7ff fa59 	bl	8002ab8 <_ZN4RF2414write_registerEhhb>
    write_register(NRF_STATUS, _BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT));
 8003606:	2300      	movs	r3, #0
 8003608:	2270      	movs	r2, #112	; 0x70
 800360a:	2107      	movs	r1, #7
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f7ff fa53 	bl	8002ab8 <_ZN4RF2414write_registerEhhb>
    ce(HIGH);
 8003612:	2101      	movs	r1, #1
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f7ff f98e 	bl	8002936 <_ZN4RF242ceEb>

    // Restore the pipe0 address, if exists
    if (pipe0_reading_address[0] > 0) {
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	7e1b      	ldrb	r3, [r3, #24]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d009      	beq.n	8003636 <_ZN4RF2414startListeningEv+0x5a>
        write_register(RX_ADDR_P0, pipe0_reading_address, addr_width);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	f103 0218 	add.w	r2, r3, #24
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	7f5b      	ldrb	r3, [r3, #29]
 800362c:	210a      	movs	r1, #10
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f7ff fa0a 	bl	8002a48 <_ZN4RF2414write_registerEhPKhh>
    } else {
        closeReadingPipe(0);
    }
}
 8003634:	e003      	b.n	800363e <_ZN4RF2414startListeningEv+0x62>
        closeReadingPipe(0);
 8003636:	2100      	movs	r1, #0
 8003638:	6878      	ldr	r0, [r7, #4]
 800363a:	f000 f9d3 	bl	80039e4 <_ZN4RF2416closeReadingPipeEh>
}
 800363e:	bf00      	nop
 8003640:	3708      	adds	r7, #8
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
	...

08003648 <_ZN4RF2413stopListeningEv>:
/****************************************************************************/
static const PROGMEM uint8_t child_pipe_enable[] = {ERX_P0, ERX_P1, ERX_P2,
                                                    ERX_P3, ERX_P4, ERX_P5};

void RF24::stopListening(void)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b082      	sub	sp, #8
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
    ce(LOW);
 8003650:	2100      	movs	r1, #0
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f7ff f96f 	bl	8002936 <_ZN4RF242ceEb>

    //delayMicroseconds(100);
    delayMicroseconds(txDelay);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800365e:	b29b      	uxth	r3, r3
 8003660:	4619      	mov	r1, r3
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f000 fb6f 	bl	8003d46 <_ZN4RF2417delayMicrosecondsEt>
    if (ack_payloads_enabled){
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	7ddb      	ldrb	r3, [r3, #23]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d002      	beq.n	8003676 <_ZN4RF2413stopListeningEv+0x2e>
        flush_tx();
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	f7ff fb45 	bl	8002d00 <_ZN4RF248flush_txEv>
    }

    config_reg &= ~_BV(PRIM_RX);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	7f9b      	ldrb	r3, [r3, #30]
 800367a:	f023 0301 	bic.w	r3, r3, #1
 800367e:	b2da      	uxtb	r2, r3
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	779a      	strb	r2, [r3, #30]
    write_register(NRF_CONFIG, config_reg);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	7f9a      	ldrb	r2, [r3, #30]
 8003688:	2300      	movs	r3, #0
 800368a:	2100      	movs	r1, #0
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	f7ff fa13 	bl	8002ab8 <_ZN4RF2414write_registerEhhb>
    if (ce_pin == csn_pin) {
      powerDown();
      powerUp();
    }
    #endif
    write_register(EN_RXADDR, read_register(EN_RXADDR) | _BV(pgm_read_byte(&child_pipe_enable[0]))); // Enable RX on pipe0
 8003692:	2102      	movs	r1, #2
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	f7ff f9b3 	bl	8002a00 <_ZN4RF2413read_registerEh>
 800369a:	4603      	mov	r3, r0
 800369c:	b25a      	sxtb	r2, r3
 800369e:	4b09      	ldr	r3, [pc, #36]	; (80036c4 <_ZN4RF2413stopListeningEv+0x7c>)
 80036a0:	781b      	ldrb	r3, [r3, #0]
 80036a2:	4619      	mov	r1, r3
 80036a4:	2301      	movs	r3, #1
 80036a6:	408b      	lsls	r3, r1
 80036a8:	b25b      	sxtb	r3, r3
 80036aa:	4313      	orrs	r3, r2
 80036ac:	b25b      	sxtb	r3, r3
 80036ae:	b2da      	uxtb	r2, r3
 80036b0:	2300      	movs	r3, #0
 80036b2:	2102      	movs	r1, #2
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f7ff f9ff 	bl	8002ab8 <_ZN4RF2414write_registerEhhb>
}
 80036ba:	bf00      	nop
 80036bc:	3708      	adds	r7, #8
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	08005c0c 	.word	0x08005c0c

080036c8 <_ZN4RF247powerUpEv>:

/****************************************************************************/

//Power up now. Radio will not power down unless instructed by MCU for config changes etc.
void RF24::powerUp(void)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b082      	sub	sp, #8
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
    // if not powered up then power up and wait for the radio to initialize
    if (!(config_reg & _BV(PWR_UP))) {
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	7f9b      	ldrb	r3, [r3, #30]
 80036d4:	f003 0302 	and.w	r3, r3, #2
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d112      	bne.n	8003702 <_ZN4RF247powerUpEv+0x3a>
        config_reg |= _BV(PWR_UP);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	7f9b      	ldrb	r3, [r3, #30]
 80036e0:	f043 0302 	orr.w	r3, r3, #2
 80036e4:	b2da      	uxtb	r2, r3
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	779a      	strb	r2, [r3, #30]
        write_register(NRF_CONFIG, config_reg);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	7f9a      	ldrb	r2, [r3, #30]
 80036ee:	2300      	movs	r3, #0
 80036f0:	2100      	movs	r1, #0
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f7ff f9e0 	bl	8002ab8 <_ZN4RF2414write_registerEhhb>

        // For nRF24L01+ to go from power down mode to TX or RX mode it must first pass through stand-by mode.
        // There must be a delay of Tpd2stby (see Table 16.) after the nRF24L01+ leaves power down mode before
        // the CEis set high. - Tpd2stby can be up to 5ms per the 1.0 datasheet
        delayMicroseconds(RF24_POWERUP_DELAY);
 80036f8:	f241 3188 	movw	r1, #5000	; 0x1388
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	f000 fb22 	bl	8003d46 <_ZN4RF2417delayMicrosecondsEt>
    }
}
 8003702:	bf00      	nop
 8003704:	3708      	adds	r7, #8
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
	...

0800370c <_ZN4RF249errNotifyEv>:

/******************************************************************/
#if defined(FAILURE_HANDLING) || defined(RF24_LINUX)

void RF24::errNotify()
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b082      	sub	sp, #8
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
    #if defined(SERIAL_DEBUG) || defined(RF24_LINUX)
    printf_P(PSTR("RF24 HARDWARE FAIL: Radio not responding, verify pin connections, wiring, etc.\r\n"));
 8003714:	4805      	ldr	r0, [pc, #20]	; (800372c <_ZN4RF249errNotifyEv+0x20>)
 8003716:	f000 ff03 	bl	8004520 <puts>
    #endif
    #if defined(FAILURE_HANDLING)
    failureDetected = 1;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2201      	movs	r2, #1
 800371e:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
    #else
    delay(5000);
    #endif
}
 8003722:	bf00      	nop
 8003724:	3708      	adds	r7, #8
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	08005aa8 	.word	0x08005aa8

08003730 <_ZN4RF245writeEPKvhb>:
#endif
/******************************************************************/

//Similar to the previous write, clears the interrupt flags
bool RF24::write(const void* buf, uint8_t len, const bool multicast)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b088      	sub	sp, #32
 8003734:	af02      	add	r7, sp, #8
 8003736:	60f8      	str	r0, [r7, #12]
 8003738:	60b9      	str	r1, [r7, #8]
 800373a:	4611      	mov	r1, r2
 800373c:	461a      	mov	r2, r3
 800373e:	460b      	mov	r3, r1
 8003740:	71fb      	strb	r3, [r7, #7]
 8003742:	4613      	mov	r3, r2
 8003744:	71bb      	strb	r3, [r7, #6]
    //Start Writing
    startFastWrite(buf, len, multicast);
 8003746:	79b9      	ldrb	r1, [r7, #6]
 8003748:	79fa      	ldrb	r2, [r7, #7]
 800374a:	2301      	movs	r3, #1
 800374c:	9300      	str	r3, [sp, #0]
 800374e:	460b      	mov	r3, r1
 8003750:	68b9      	ldr	r1, [r7, #8]
 8003752:	68f8      	ldr	r0, [r7, #12]
 8003754:	f000 f84f 	bl	80037f6 <_ZN4RF2414startFastWriteEPKvhbb>

    //Wait until complete or failed
    #if defined(FAILURE_HANDLING) || defined(RF24_LINUX)
    uint32_t timer = millis();
 8003758:	68f8      	ldr	r0, [r7, #12]
 800375a:	f000 fb01 	bl	8003d60 <_ZN4RF246millisEv>
 800375e:	6178      	str	r0, [r7, #20]
    #endif // defined(FAILURE_HANDLING) || defined(RF24_LINUX)

    while (!(get_status() & (_BV(TX_DS) | _BV(MAX_RT)))) {
 8003760:	68f8      	ldr	r0, [r7, #12]
 8003762:	f7ff fadd 	bl	8002d20 <_ZN4RF2410get_statusEv>
 8003766:	4603      	mov	r3, r0
 8003768:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800376c:	2b00      	cmp	r3, #0
 800376e:	bf0c      	ite	eq
 8003770:	2301      	moveq	r3, #1
 8003772:	2300      	movne	r3, #0
 8003774:	b2db      	uxtb	r3, r3
 8003776:	2b00      	cmp	r3, #0
 8003778:	d011      	beq.n	800379e <_ZN4RF245writeEPKvhb+0x6e>
        #if defined(FAILURE_HANDLING) || defined(RF24_LINUX)
        if (millis() - timer > 95) {
 800377a:	68f8      	ldr	r0, [r7, #12]
 800377c:	f000 faf0 	bl	8003d60 <_ZN4RF246millisEv>
 8003780:	4602      	mov	r2, r0
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	2b5f      	cmp	r3, #95	; 0x5f
 8003788:	bf8c      	ite	hi
 800378a:	2301      	movhi	r3, #1
 800378c:	2300      	movls	r3, #0
 800378e:	b2db      	uxtb	r3, r3
 8003790:	2b00      	cmp	r3, #0
 8003792:	d0e5      	beq.n	8003760 <_ZN4RF245writeEPKvhb+0x30>
            errNotify();
 8003794:	68f8      	ldr	r0, [r7, #12]
 8003796:	f7ff ffb9 	bl	800370c <_ZN4RF249errNotifyEv>
            #if defined(FAILURE_HANDLING)
            return 0;
 800379a:	2300      	movs	r3, #0
 800379c:	e015      	b.n	80037ca <_ZN4RF245writeEPKvhb+0x9a>
            #endif
        }
        #endif
    }

    ce(LOW);
 800379e:	2100      	movs	r1, #0
 80037a0:	68f8      	ldr	r0, [r7, #12]
 80037a2:	f7ff f8c8 	bl	8002936 <_ZN4RF242ceEb>

    write_register(NRF_STATUS, _BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT));
 80037a6:	2300      	movs	r3, #0
 80037a8:	2270      	movs	r2, #112	; 0x70
 80037aa:	2107      	movs	r1, #7
 80037ac:	68f8      	ldr	r0, [r7, #12]
 80037ae:	f7ff f983 	bl	8002ab8 <_ZN4RF2414write_registerEhhb>

    //Max retries exceeded
    if (status & _BV(MAX_RT)) {
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	7d1b      	ldrb	r3, [r3, #20]
 80037b6:	f003 0310 	and.w	r3, r3, #16
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d004      	beq.n	80037c8 <_ZN4RF245writeEPKvhb+0x98>
        flush_tx(); // Only going to be 1 packet in the FIFO at a time using this method, so just flush
 80037be:	68f8      	ldr	r0, [r7, #12]
 80037c0:	f7ff fa9e 	bl	8002d00 <_ZN4RF248flush_txEv>
        return 0;
 80037c4:	2300      	movs	r3, #0
 80037c6:	e000      	b.n	80037ca <_ZN4RF245writeEPKvhb+0x9a>
    }
    //TX OK 1 or 0
    return 1;
 80037c8:	2301      	movs	r3, #1
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3718      	adds	r7, #24
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}

080037d2 <_ZN4RF245writeEPKvh>:

bool RF24::write(const void* buf, uint8_t len)
{
 80037d2:	b580      	push	{r7, lr}
 80037d4:	b084      	sub	sp, #16
 80037d6:	af00      	add	r7, sp, #0
 80037d8:	60f8      	str	r0, [r7, #12]
 80037da:	60b9      	str	r1, [r7, #8]
 80037dc:	4613      	mov	r3, r2
 80037de:	71fb      	strb	r3, [r7, #7]
    return write(buf, len, 0);
 80037e0:	79fa      	ldrb	r2, [r7, #7]
 80037e2:	2300      	movs	r3, #0
 80037e4:	68b9      	ldr	r1, [r7, #8]
 80037e6:	68f8      	ldr	r0, [r7, #12]
 80037e8:	f7ff ffa2 	bl	8003730 <_ZN4RF245writeEPKvhb>
 80037ec:	4603      	mov	r3, r0
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3710      	adds	r7, #16
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}

080037f6 <_ZN4RF2414startFastWriteEPKvhbb>:
//In this mode, if we can keep the FIFO buffers loaded, packets will transmit immediately (no 130us delay)
//Otherwise we enter Standby-II mode, which is still faster than standby mode
//Also, we remove the need to keep writing the config register over and over and delaying for 150 us each time if sending a stream of data

void RF24::startFastWrite(const void* buf, uint8_t len, const bool multicast, bool startTx)
{ //TMRh20
 80037f6:	b580      	push	{r7, lr}
 80037f8:	b084      	sub	sp, #16
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	60f8      	str	r0, [r7, #12]
 80037fe:	60b9      	str	r1, [r7, #8]
 8003800:	4611      	mov	r1, r2
 8003802:	461a      	mov	r2, r3
 8003804:	460b      	mov	r3, r1
 8003806:	71fb      	strb	r3, [r7, #7]
 8003808:	4613      	mov	r3, r2
 800380a:	71bb      	strb	r3, [r7, #6]

    write_payload(buf, len, multicast ? W_TX_PAYLOAD_NO_ACK : W_TX_PAYLOAD);
 800380c:	79bb      	ldrb	r3, [r7, #6]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d001      	beq.n	8003816 <_ZN4RF2414startFastWriteEPKvhbb+0x20>
 8003812:	23b0      	movs	r3, #176	; 0xb0
 8003814:	e000      	b.n	8003818 <_ZN4RF2414startFastWriteEPKvhbb+0x22>
 8003816:	23a0      	movs	r3, #160	; 0xa0
 8003818:	79fa      	ldrb	r2, [r7, #7]
 800381a:	68b9      	ldr	r1, [r7, #8]
 800381c:	68f8      	ldr	r0, [r7, #12]
 800381e:	f7ff f991 	bl	8002b44 <_ZN4RF2413write_payloadEPKvhh>
    if (startTx) {
 8003822:	7e3b      	ldrb	r3, [r7, #24]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d003      	beq.n	8003830 <_ZN4RF2414startFastWriteEPKvhbb+0x3a>
        ce(HIGH);
 8003828:	2101      	movs	r1, #1
 800382a:	68f8      	ldr	r0, [r7, #12]
 800382c:	f7ff f883 	bl	8002936 <_ZN4RF242ceEb>
    }
}
 8003830:	bf00      	nop
 8003832:	3710      	adds	r7, #16
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}

08003838 <_ZN4RF249availableEv>:
}

/****************************************************************************/

bool RF24::available(void)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b082      	sub	sp, #8
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
    return available(NULL);
 8003840:	2100      	movs	r1, #0
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f000 f805 	bl	8003852 <_ZN4RF249availableEPh>
 8003848:	4603      	mov	r3, r0
}
 800384a:	4618      	mov	r0, r3
 800384c:	3708      	adds	r7, #8
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}

08003852 <_ZN4RF249availableEPh>:

/****************************************************************************/

bool RF24::available(uint8_t* pipe_num)
{
 8003852:	b580      	push	{r7, lr}
 8003854:	b084      	sub	sp, #16
 8003856:	af00      	add	r7, sp, #0
 8003858:	6078      	str	r0, [r7, #4]
 800385a:	6039      	str	r1, [r7, #0]
    // get implied RX FIFO empty flag from status byte
    uint8_t pipe = (get_status() >> RX_P_NO) & 0x07;
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	f7ff fa5f 	bl	8002d20 <_ZN4RF2410get_statusEv>
 8003862:	4603      	mov	r3, r0
 8003864:	105b      	asrs	r3, r3, #1
 8003866:	b2db      	uxtb	r3, r3
 8003868:	f003 0307 	and.w	r3, r3, #7
 800386c:	73fb      	strb	r3, [r7, #15]
    if (pipe > 5)
 800386e:	7bfb      	ldrb	r3, [r7, #15]
 8003870:	2b05      	cmp	r3, #5
 8003872:	d901      	bls.n	8003878 <_ZN4RF249availableEPh+0x26>
        return 0;
 8003874:	2300      	movs	r3, #0
 8003876:	e006      	b.n	8003886 <_ZN4RF249availableEPh+0x34>

    // If the caller wants the pipe number, include that
    if (pipe_num)
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d002      	beq.n	8003884 <_ZN4RF249availableEPh+0x32>
        *pipe_num = pipe;
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	7bfa      	ldrb	r2, [r7, #15]
 8003882:	701a      	strb	r2, [r3, #0]

    return 1;
 8003884:	2301      	movs	r3, #1
}
 8003886:	4618      	mov	r0, r3
 8003888:	3710      	adds	r7, #16
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}

0800388e <_ZN4RF244readEPvh>:

/****************************************************************************/

void RF24::read(void* buf, uint8_t len)
{
 800388e:	b580      	push	{r7, lr}
 8003890:	b084      	sub	sp, #16
 8003892:	af00      	add	r7, sp, #0
 8003894:	60f8      	str	r0, [r7, #12]
 8003896:	60b9      	str	r1, [r7, #8]
 8003898:	4613      	mov	r3, r2
 800389a:	71fb      	strb	r3, [r7, #7]

    // Fetch the payload
    read_payload(buf, len);
 800389c:	79fb      	ldrb	r3, [r7, #7]
 800389e:	461a      	mov	r2, r3
 80038a0:	68b9      	ldr	r1, [r7, #8]
 80038a2:	68f8      	ldr	r0, [r7, #12]
 80038a4:	f7ff f9b9 	bl	8002c1a <_ZN4RF2412read_payloadEPvh>

    //Clear the only applicable interrupt flags
    write_register(NRF_STATUS, _BV(RX_DR));
 80038a8:	2300      	movs	r3, #0
 80038aa:	2240      	movs	r2, #64	; 0x40
 80038ac:	2107      	movs	r1, #7
 80038ae:	68f8      	ldr	r0, [r7, #12]
 80038b0:	f7ff f902 	bl	8002ab8 <_ZN4RF2414write_registerEhhb>

}
 80038b4:	bf00      	nop
 80038b6:	3710      	adds	r7, #16
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}

080038bc <_ZN4RF2415openWritingPipeEPKh>:
    write_register(TX_ADDR, reinterpret_cast<uint8_t*>(&value), addr_width);
}

/****************************************************************************/
void RF24::openWritingPipe(const uint8_t* address)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b082      	sub	sp, #8
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	6039      	str	r1, [r7, #0]
    // Note that AVR 8-bit uC's store this LSB first, and the NRF24L01(+)
    // expects it LSB first too, so we're good.
    write_register(RX_ADDR_P0, address, addr_width);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	7f5b      	ldrb	r3, [r3, #29]
 80038ca:	683a      	ldr	r2, [r7, #0]
 80038cc:	210a      	movs	r1, #10
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f7ff f8ba 	bl	8002a48 <_ZN4RF2414write_registerEhPKhh>
    write_register(TX_ADDR, address, addr_width);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	7f5b      	ldrb	r3, [r3, #29]
 80038d8:	683a      	ldr	r2, [r7, #0]
 80038da:	2110      	movs	r1, #16
 80038dc:	6878      	ldr	r0, [r7, #4]
 80038de:	f7ff f8b3 	bl	8002a48 <_ZN4RF2414write_registerEhPKhh>
}
 80038e2:	bf00      	nop
 80038e4:	3708      	adds	r7, #8
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}

080038ea <_ZN4RF2415setAddressWidthEh>:
    }
}

/****************************************************************************/
void RF24::setAddressWidth(uint8_t a_width)
{
 80038ea:	b580      	push	{r7, lr}
 80038ec:	b082      	sub	sp, #8
 80038ee:	af00      	add	r7, sp, #0
 80038f0:	6078      	str	r0, [r7, #4]
 80038f2:	460b      	mov	r3, r1
 80038f4:	70fb      	strb	r3, [r7, #3]

    if (a_width -= 2) {
 80038f6:	78fb      	ldrb	r3, [r7, #3]
 80038f8:	3b02      	subs	r3, #2
 80038fa:	70fb      	strb	r3, [r7, #3]
 80038fc:	78fb      	ldrb	r3, [r7, #3]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	bf14      	ite	ne
 8003902:	2301      	movne	r3, #1
 8003904:	2300      	moveq	r3, #0
 8003906:	b2db      	uxtb	r3, r3
 8003908:	2b00      	cmp	r3, #0
 800390a:	d011      	beq.n	8003930 <_ZN4RF2415setAddressWidthEh+0x46>
        write_register(SETUP_AW, a_width % 4);
 800390c:	78fb      	ldrb	r3, [r7, #3]
 800390e:	f003 0303 	and.w	r3, r3, #3
 8003912:	b2da      	uxtb	r2, r3
 8003914:	2300      	movs	r3, #0
 8003916:	2103      	movs	r1, #3
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f7ff f8cd 	bl	8002ab8 <_ZN4RF2414write_registerEhhb>
        addr_width = (a_width % 4) + 2;
 800391e:	78fb      	ldrb	r3, [r7, #3]
 8003920:	f003 0303 	and.w	r3, r3, #3
 8003924:	b2db      	uxtb	r3, r3
 8003926:	3302      	adds	r3, #2
 8003928:	b2da      	uxtb	r2, r3
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	775a      	strb	r2, [r3, #29]
    } else {
        write_register(SETUP_AW, 0);
        addr_width = 2;
    }

}
 800392e:	e008      	b.n	8003942 <_ZN4RF2415setAddressWidthEh+0x58>
        write_register(SETUP_AW, 0);
 8003930:	2300      	movs	r3, #0
 8003932:	2200      	movs	r2, #0
 8003934:	2103      	movs	r1, #3
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f7ff f8be 	bl	8002ab8 <_ZN4RF2414write_registerEhhb>
        addr_width = 2;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2202      	movs	r2, #2
 8003940:	775a      	strb	r2, [r3, #29]
}
 8003942:	bf00      	nop
 8003944:	3708      	adds	r7, #8
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
	...

0800394c <_ZN4RF2415openReadingPipeEhPKh>:

/****************************************************************************/

void RF24::openReadingPipe(uint8_t child, const uint8_t* address)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b084      	sub	sp, #16
 8003950:	af00      	add	r7, sp, #0
 8003952:	60f8      	str	r0, [r7, #12]
 8003954:	460b      	mov	r3, r1
 8003956:	607a      	str	r2, [r7, #4]
 8003958:	72fb      	strb	r3, [r7, #11]
    // If this is pipe 0, cache the address.  This is needed because
    // openWritingPipe() will overwrite the pipe 0 address, so
    // startListening() will have to restore it.
    if (child == 0) {
 800395a:	7afb      	ldrb	r3, [r7, #11]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d108      	bne.n	8003972 <_ZN4RF2415openReadingPipeEhPKh+0x26>
        memcpy(pipe0_reading_address, address, addr_width);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f103 0018 	add.w	r0, r3, #24
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	7f5b      	ldrb	r3, [r3, #29]
 800396a:	461a      	mov	r2, r3
 800396c:	6879      	ldr	r1, [r7, #4]
 800396e:	f000 fd4f 	bl	8004410 <memcpy>
    }
    if (child <= 5) {
 8003972:	7afb      	ldrb	r3, [r7, #11]
 8003974:	2b05      	cmp	r3, #5
 8003976:	d82c      	bhi.n	80039d2 <_ZN4RF2415openReadingPipeEhPKh+0x86>
        // For pipes 2-5, only write the LSB
        if (child < 2) {
 8003978:	7afb      	ldrb	r3, [r7, #11]
 800397a:	2b01      	cmp	r3, #1
 800397c:	d80a      	bhi.n	8003994 <_ZN4RF2415openReadingPipeEhPKh+0x48>
            write_register(pgm_read_byte(&child_pipe[child]), address, addr_width);
 800397e:	7afb      	ldrb	r3, [r7, #11]
 8003980:	4a16      	ldr	r2, [pc, #88]	; (80039dc <_ZN4RF2415openReadingPipeEhPKh+0x90>)
 8003982:	4413      	add	r3, r2
 8003984:	7819      	ldrb	r1, [r3, #0]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	7f5b      	ldrb	r3, [r3, #29]
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	68f8      	ldr	r0, [r7, #12]
 800398e:	f7ff f85b 	bl	8002a48 <_ZN4RF2414write_registerEhPKhh>
 8003992:	e008      	b.n	80039a6 <_ZN4RF2415openReadingPipeEhPKh+0x5a>
        } else {
            write_register(pgm_read_byte(&child_pipe[child]), address, 1);
 8003994:	7afb      	ldrb	r3, [r7, #11]
 8003996:	4a11      	ldr	r2, [pc, #68]	; (80039dc <_ZN4RF2415openReadingPipeEhPKh+0x90>)
 8003998:	4413      	add	r3, r2
 800399a:	7819      	ldrb	r1, [r3, #0]
 800399c:	2301      	movs	r3, #1
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	68f8      	ldr	r0, [r7, #12]
 80039a2:	f7ff f851 	bl	8002a48 <_ZN4RF2414write_registerEhPKhh>
        }

        // Note it would be more efficient to set all of the bits for all open
        // pipes at once.  However, I thought it would make the calling code
        // more simple to do it this way.
        write_register(EN_RXADDR, read_register(EN_RXADDR) | _BV(pgm_read_byte(&child_pipe_enable[child])));
 80039a6:	2102      	movs	r1, #2
 80039a8:	68f8      	ldr	r0, [r7, #12]
 80039aa:	f7ff f829 	bl	8002a00 <_ZN4RF2413read_registerEh>
 80039ae:	4603      	mov	r3, r0
 80039b0:	b25a      	sxtb	r2, r3
 80039b2:	7afb      	ldrb	r3, [r7, #11]
 80039b4:	490a      	ldr	r1, [pc, #40]	; (80039e0 <_ZN4RF2415openReadingPipeEhPKh+0x94>)
 80039b6:	440b      	add	r3, r1
 80039b8:	781b      	ldrb	r3, [r3, #0]
 80039ba:	4619      	mov	r1, r3
 80039bc:	2301      	movs	r3, #1
 80039be:	408b      	lsls	r3, r1
 80039c0:	b25b      	sxtb	r3, r3
 80039c2:	4313      	orrs	r3, r2
 80039c4:	b25b      	sxtb	r3, r3
 80039c6:	b2da      	uxtb	r2, r3
 80039c8:	2300      	movs	r3, #0
 80039ca:	2102      	movs	r1, #2
 80039cc:	68f8      	ldr	r0, [r7, #12]
 80039ce:	f7ff f873 	bl	8002ab8 <_ZN4RF2414write_registerEhhb>

    }
}
 80039d2:	bf00      	nop
 80039d4:	3710      	adds	r7, #16
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop
 80039dc:	08005c14 	.word	0x08005c14
 80039e0:	08005c0c 	.word	0x08005c0c

080039e4 <_ZN4RF2416closeReadingPipeEh>:

/****************************************************************************/

void RF24::closeReadingPipe(uint8_t pipe)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b082      	sub	sp, #8
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
 80039ec:	460b      	mov	r3, r1
 80039ee:	70fb      	strb	r3, [r7, #3]
    write_register(EN_RXADDR, read_register(EN_RXADDR) & ~_BV(pgm_read_byte(&child_pipe_enable[pipe])));
 80039f0:	2102      	movs	r1, #2
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f7ff f804 	bl	8002a00 <_ZN4RF2413read_registerEh>
 80039f8:	4603      	mov	r3, r0
 80039fa:	b25a      	sxtb	r2, r3
 80039fc:	78fb      	ldrb	r3, [r7, #3]
 80039fe:	490a      	ldr	r1, [pc, #40]	; (8003a28 <_ZN4RF2416closeReadingPipeEh+0x44>)
 8003a00:	440b      	add	r3, r1
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	4619      	mov	r1, r3
 8003a06:	2301      	movs	r3, #1
 8003a08:	408b      	lsls	r3, r1
 8003a0a:	b25b      	sxtb	r3, r3
 8003a0c:	43db      	mvns	r3, r3
 8003a0e:	b25b      	sxtb	r3, r3
 8003a10:	4013      	ands	r3, r2
 8003a12:	b25b      	sxtb	r3, r3
 8003a14:	b2da      	uxtb	r2, r3
 8003a16:	2300      	movs	r3, #0
 8003a18:	2102      	movs	r1, #2
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f7ff f84c 	bl	8002ab8 <_ZN4RF2414write_registerEhhb>
}
 8003a20:	bf00      	nop
 8003a22:	3708      	adds	r7, #8
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}
 8003a28:	08005c0c 	.word	0x08005c0c

08003a2c <_ZN4RF2415toggle_featuresEv>:

/****************************************************************************/

void RF24::toggle_features(void)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b082      	sub	sp, #8
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
    beginTransaction();
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	f7fe ff95 	bl	8002964 <_ZN4RF2416beginTransactionEv>
    status = _SPI.transfer(ACTIVATE);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	336c      	adds	r3, #108	; 0x6c
 8003a3e:	2150      	movs	r1, #80	; 0x50
 8003a40:	4618      	mov	r0, r3
 8003a42:	f000 faf0 	bl	8004026 <_ZN8SPI_RF248transferEh>
 8003a46:	4603      	mov	r3, r0
 8003a48:	461a      	mov	r2, r3
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	751a      	strb	r2, [r3, #20]
    _SPI.transfer(0x73);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	336c      	adds	r3, #108	; 0x6c
 8003a52:	2173      	movs	r1, #115	; 0x73
 8003a54:	4618      	mov	r0, r3
 8003a56:	f000 fae6 	bl	8004026 <_ZN8SPI_RF248transferEh>
    endTransaction();
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f7fe ff8e 	bl	800297c <_ZN4RF2414endTransactionEv>
}
 8003a60:	bf00      	nop
 8003a62:	3708      	adds	r7, #8
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}

08003a68 <_ZN4RF2417disableAckPayloadEv>:
}

/****************************************************************************/

void RF24::disableAckPayload(void)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b082      	sub	sp, #8
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
    // disable ack payloads (leave dynamic payload features as is)
    if (ack_payloads_enabled){
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	7ddb      	ldrb	r3, [r3, #23]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d011      	beq.n	8003a9c <_ZN4RF2417disableAckPayloadEv+0x34>
        write_register(FEATURE, read_register(FEATURE) | ~_BV(EN_ACK_PAY));
 8003a78:	211d      	movs	r1, #29
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f7fe ffc0 	bl	8002a00 <_ZN4RF2413read_registerEh>
 8003a80:	4603      	mov	r3, r0
 8003a82:	b25b      	sxtb	r3, r3
 8003a84:	f063 0302 	orn	r3, r3, #2
 8003a88:	b25b      	sxtb	r3, r3
 8003a8a:	b2da      	uxtb	r2, r3
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	211d      	movs	r1, #29
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	f7ff f811 	bl	8002ab8 <_ZN4RF2414write_registerEhhb>

        IF_SERIAL_DEBUG(printf("FEATURE=%i\r\n", read_register(FEATURE)));

        ack_payloads_enabled = false;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	75da      	strb	r2, [r3, #23]
    }
}
 8003a9c:	bf00      	nop
 8003a9e:	3708      	adds	r7, #8
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}

08003aa4 <_ZN4RF2410isPVariantEv>:
}

/****************************************************************************/

bool RF24::isPVariant(void)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
    return _is_p_variant;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	7fdb      	ldrb	r3, [r3, #31]
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	370c      	adds	r7, #12
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bc80      	pop	{r7}
 8003ab8:	4770      	bx	lr

08003aba <_ZN4RF2410setAutoAckEb>:

/****************************************************************************/

void RF24::setAutoAck(bool enable)
{
 8003aba:	b580      	push	{r7, lr}
 8003abc:	b082      	sub	sp, #8
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	6078      	str	r0, [r7, #4]
 8003ac2:	460b      	mov	r3, r1
 8003ac4:	70fb      	strb	r3, [r7, #3]
    if (enable){
 8003ac6:	78fb      	ldrb	r3, [r7, #3]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d006      	beq.n	8003ada <_ZN4RF2410setAutoAckEb+0x20>
        write_register(EN_AA, 0x3F);
 8003acc:	2300      	movs	r3, #0
 8003ace:	223f      	movs	r2, #63	; 0x3f
 8003ad0:	2101      	movs	r1, #1
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f7fe fff0 	bl	8002ab8 <_ZN4RF2414write_registerEhhb>
        // accomodate ACK payloads feature
        if (ack_payloads_enabled){
            disableAckPayload();
        }
    }
}
 8003ad8:	e00c      	b.n	8003af4 <_ZN4RF2410setAutoAckEb+0x3a>
        write_register(EN_AA, 0);
 8003ada:	2300      	movs	r3, #0
 8003adc:	2200      	movs	r2, #0
 8003ade:	2101      	movs	r1, #1
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f7fe ffe9 	bl	8002ab8 <_ZN4RF2414write_registerEhhb>
        if (ack_payloads_enabled){
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	7ddb      	ldrb	r3, [r3, #23]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d002      	beq.n	8003af4 <_ZN4RF2410setAutoAckEb+0x3a>
            disableAckPayload();
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f7ff ffba 	bl	8003a68 <_ZN4RF2417disableAckPayloadEv>
}
 8003af4:	bf00      	nop
 8003af6:	3708      	adds	r7, #8
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}

08003afc <_ZN4RF2410setPALevelEhb>:
}

/****************************************************************************/

void RF24::setPALevel(uint8_t level, bool lnaEnable)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b084      	sub	sp, #16
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
 8003b04:	460b      	mov	r3, r1
 8003b06:	70fb      	strb	r3, [r7, #3]
 8003b08:	4613      	mov	r3, r2
 8003b0a:	70bb      	strb	r3, [r7, #2]

    uint8_t setup = read_register(RF_SETUP) & 0xF8;
 8003b0c:	2106      	movs	r1, #6
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f7fe ff76 	bl	8002a00 <_ZN4RF2413read_registerEh>
 8003b14:	4603      	mov	r3, r0
 8003b16:	f023 0307 	bic.w	r3, r3, #7
 8003b1a:	73fb      	strb	r3, [r7, #15]

    if (level > 3) {                            // If invalid level, go to max PA
 8003b1c:	78fb      	ldrb	r3, [r7, #3]
 8003b1e:	2b03      	cmp	r3, #3
 8003b20:	d903      	bls.n	8003b2a <_ZN4RF2410setPALevelEhb+0x2e>
        level = (RF24_PA_MAX << 1) + lnaEnable; // +1 to support the SI24R1 chip extra bit
 8003b22:	78bb      	ldrb	r3, [r7, #2]
 8003b24:	3306      	adds	r3, #6
 8003b26:	70fb      	strb	r3, [r7, #3]
 8003b28:	e005      	b.n	8003b36 <_ZN4RF2410setPALevelEhb+0x3a>
    } else {
        level = (level << 1) + lnaEnable;       // Else set level as requested
 8003b2a:	78fb      	ldrb	r3, [r7, #3]
 8003b2c:	005b      	lsls	r3, r3, #1
 8003b2e:	b2da      	uxtb	r2, r3
 8003b30:	78bb      	ldrb	r3, [r7, #2]
 8003b32:	4413      	add	r3, r2
 8003b34:	70fb      	strb	r3, [r7, #3]
    }

    write_register(RF_SETUP, setup |= level);   // Write it to the chip
 8003b36:	7bfa      	ldrb	r2, [r7, #15]
 8003b38:	78fb      	ldrb	r3, [r7, #3]
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	73fb      	strb	r3, [r7, #15]
 8003b3e:	7bfa      	ldrb	r2, [r7, #15]
 8003b40:	2300      	movs	r3, #0
 8003b42:	2106      	movs	r1, #6
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f7fe ffb7 	bl	8002ab8 <_ZN4RF2414write_registerEhhb>
}
 8003b4a:	bf00      	nop
 8003b4c:	3710      	adds	r7, #16
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}

08003b52 <_ZN4RF2410getPALevelEv>:

/****************************************************************************/

uint8_t RF24::getPALevel(void)
{
 8003b52:	b580      	push	{r7, lr}
 8003b54:	b082      	sub	sp, #8
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	6078      	str	r0, [r7, #4]

    return (read_register(RF_SETUP) & (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH))) >> 1;
 8003b5a:	2106      	movs	r1, #6
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f7fe ff4f 	bl	8002a00 <_ZN4RF2413read_registerEh>
 8003b62:	4603      	mov	r3, r0
 8003b64:	105b      	asrs	r3, r3, #1
 8003b66:	b2db      	uxtb	r3, r3
 8003b68:	f003 0303 	and.w	r3, r3, #3
 8003b6c:	b2db      	uxtb	r3, r3
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3708      	adds	r7, #8
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}

08003b76 <_ZN4RF246getARCEv>:

/****************************************************************************/

uint8_t RF24::getARC(void)
{
 8003b76:	b580      	push	{r7, lr}
 8003b78:	b082      	sub	sp, #8
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	6078      	str	r0, [r7, #4]

    return read_register(OBSERVE_TX) & 0x0F;
 8003b7e:	2108      	movs	r1, #8
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	f7fe ff3d 	bl	8002a00 <_ZN4RF2413read_registerEh>
 8003b86:	4603      	mov	r3, r0
 8003b88:	f003 030f 	and.w	r3, r3, #15
 8003b8c:	b2db      	uxtb	r3, r3
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3708      	adds	r7, #8
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}

08003b96 <_ZN4RF2411setDataRateE15rf24_datarate_e>:

/****************************************************************************/

bool RF24::setDataRate(rf24_datarate_e speed)
{
 8003b96:	b580      	push	{r7, lr}
 8003b98:	b084      	sub	sp, #16
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	6078      	str	r0, [r7, #4]
 8003b9e:	460b      	mov	r3, r1
 8003ba0:	70fb      	strb	r3, [r7, #3]
    bool result = false;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	73fb      	strb	r3, [r7, #15]
    uint8_t setup = read_register(RF_SETUP);
 8003ba6:	2106      	movs	r1, #6
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f7fe ff29 	bl	8002a00 <_ZN4RF2413read_registerEh>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	73bb      	strb	r3, [r7, #14]

    // HIGH and LOW '00' is 1Mbs - our default
    setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH));
 8003bb2:	7bbb      	ldrb	r3, [r7, #14]
 8003bb4:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8003bb8:	73bb      	strb	r3, [r7, #14]

    #if !defined(F_CPU) || F_CPU > 20000000
    txDelay = 280;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	f44f 728c 	mov.w	r2, #280	; 0x118
 8003bc0:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    #else //16Mhz Arduino
    txDelay=85;
    #endif
    if (speed == RF24_250KBPS) {
 8003bc4:	78fb      	ldrb	r3, [r7, #3]
 8003bc6:	2b02      	cmp	r3, #2
 8003bc8:	d109      	bne.n	8003bde <_ZN4RF2411setDataRateE15rf24_datarate_e+0x48>
        // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
        // Making it '10'.
        setup |= _BV(RF_DR_LOW);
 8003bca:	7bbb      	ldrb	r3, [r7, #14]
 8003bcc:	f043 0320 	orr.w	r3, r3, #32
 8003bd0:	73bb      	strb	r3, [r7, #14]
        #if !defined(F_CPU) || F_CPU > 20000000
        txDelay = 505;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	f240 12f9 	movw	r2, #505	; 0x1f9
 8003bd8:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 8003bdc:	e00a      	b.n	8003bf4 <_ZN4RF2411setDataRateE15rf24_datarate_e+0x5e>
        txDelay = 155;
        #endif
    } else {
        // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
        // Making it '01'
        if (speed == RF24_2MBPS) {
 8003bde:	78fb      	ldrb	r3, [r7, #3]
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d107      	bne.n	8003bf4 <_ZN4RF2411setDataRateE15rf24_datarate_e+0x5e>
            setup |= _BV(RF_DR_HIGH);
 8003be4:	7bbb      	ldrb	r3, [r7, #14]
 8003be6:	f043 0308 	orr.w	r3, r3, #8
 8003bea:	73bb      	strb	r3, [r7, #14]
            #if !defined(F_CPU) || F_CPU > 20000000
            txDelay = 240;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	22f0      	movs	r2, #240	; 0xf0
 8003bf0:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
            #else // 16Mhz Arduino
            txDelay = 65;
            #endif
        }
    }
    write_register(RF_SETUP, setup);
 8003bf4:	7bba      	ldrb	r2, [r7, #14]
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	2106      	movs	r1, #6
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f7fe ff5c 	bl	8002ab8 <_ZN4RF2414write_registerEhhb>

    // Verify our result
    if (read_register(RF_SETUP) == setup) {
 8003c00:	2106      	movs	r1, #6
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f7fe fefc 	bl	8002a00 <_ZN4RF2413read_registerEh>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	461a      	mov	r2, r3
 8003c0c:	7bbb      	ldrb	r3, [r7, #14]
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	bf0c      	ite	eq
 8003c12:	2301      	moveq	r3, #1
 8003c14:	2300      	movne	r3, #0
 8003c16:	b2db      	uxtb	r3, r3
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d001      	beq.n	8003c20 <_ZN4RF2411setDataRateE15rf24_datarate_e+0x8a>
        result = true;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	73fb      	strb	r3, [r7, #15]
    }
    return result;
 8003c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3710      	adds	r7, #16
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}

08003c2a <_ZN4RF2411getDataRateEv>:

/****************************************************************************/

rf24_datarate_e RF24::getDataRate(void)
{
 8003c2a:	b580      	push	{r7, lr}
 8003c2c:	b084      	sub	sp, #16
 8003c2e:	af00      	add	r7, sp, #0
 8003c30:	6078      	str	r0, [r7, #4]
    rf24_datarate_e result;
    uint8_t dr = read_register(RF_SETUP) & (_BV(RF_DR_LOW) | _BV(RF_DR_HIGH));
 8003c32:	2106      	movs	r1, #6
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	f7fe fee3 	bl	8002a00 <_ZN4RF2413read_registerEh>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003c40:	73bb      	strb	r3, [r7, #14]

    // switch uses RAM (evil!)
    // Order matters in our case below
    if (dr == _BV(RF_DR_LOW)) {
 8003c42:	7bbb      	ldrb	r3, [r7, #14]
 8003c44:	2b20      	cmp	r3, #32
 8003c46:	d102      	bne.n	8003c4e <_ZN4RF2411getDataRateEv+0x24>
        // '10' = 250KBPS
        result = RF24_250KBPS;
 8003c48:	2302      	movs	r3, #2
 8003c4a:	73fb      	strb	r3, [r7, #15]
 8003c4c:	e007      	b.n	8003c5e <_ZN4RF2411getDataRateEv+0x34>
    } else if (dr == _BV(RF_DR_HIGH)) {
 8003c4e:	7bbb      	ldrb	r3, [r7, #14]
 8003c50:	2b08      	cmp	r3, #8
 8003c52:	d102      	bne.n	8003c5a <_ZN4RF2411getDataRateEv+0x30>
        // '01' = 2MBPS
        result = RF24_2MBPS;
 8003c54:	2301      	movs	r3, #1
 8003c56:	73fb      	strb	r3, [r7, #15]
 8003c58:	e001      	b.n	8003c5e <_ZN4RF2411getDataRateEv+0x34>
    } else {
        // '00' = 1MBPS
        result = RF24_1MBPS;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	73fb      	strb	r3, [r7, #15]
    }
    return result;
 8003c5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3710      	adds	r7, #16
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}

08003c68 <_ZN4RF2412getCRCLengthEv>:
}

/****************************************************************************/

rf24_crclength_e RF24::getCRCLength(void)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b084      	sub	sp, #16
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
    rf24_crclength_e result = RF24_CRC_DISABLED;
 8003c70:	2300      	movs	r3, #0
 8003c72:	73fb      	strb	r3, [r7, #15]
    uint8_t AA = read_register(EN_AA);
 8003c74:	2101      	movs	r1, #1
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f7fe fec2 	bl	8002a00 <_ZN4RF2413read_registerEh>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	73bb      	strb	r3, [r7, #14]
    config_reg = read_register(NRF_CONFIG);
 8003c80:	2100      	movs	r1, #0
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f7fe febc 	bl	8002a00 <_ZN4RF2413read_registerEh>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	461a      	mov	r2, r3
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	779a      	strb	r2, [r3, #30]

    if (config_reg & _BV(EN_CRC) || AA) {
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	7f9b      	ldrb	r3, [r3, #30]
 8003c94:	f003 0308 	and.w	r3, r3, #8
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d102      	bne.n	8003ca2 <_ZN4RF2412getCRCLengthEv+0x3a>
 8003c9c:	7bbb      	ldrb	r3, [r7, #14]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d00a      	beq.n	8003cb8 <_ZN4RF2412getCRCLengthEv+0x50>
        if (config_reg & _BV(CRCO)) {
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	7f9b      	ldrb	r3, [r3, #30]
 8003ca6:	f003 0304 	and.w	r3, r3, #4
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d002      	beq.n	8003cb4 <_ZN4RF2412getCRCLengthEv+0x4c>
            result = RF24_CRC_16;
 8003cae:	2302      	movs	r3, #2
 8003cb0:	73fb      	strb	r3, [r7, #15]
 8003cb2:	e001      	b.n	8003cb8 <_ZN4RF2412getCRCLengthEv+0x50>
        } else {
            result = RF24_CRC_8;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	73fb      	strb	r3, [r7, #15]
        }
    }

    return result;
 8003cb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3710      	adds	r7, #16
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}

08003cc2 <_ZN4RF2410setRetriesEhh>:
    write_register(NRF_CONFIG, config_reg);
}

/****************************************************************************/
void RF24::setRetries(uint8_t delay, uint8_t count)
{
 8003cc2:	b580      	push	{r7, lr}
 8003cc4:	b082      	sub	sp, #8
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	6078      	str	r0, [r7, #4]
 8003cca:	460b      	mov	r3, r1
 8003ccc:	70fb      	strb	r3, [r7, #3]
 8003cce:	4613      	mov	r3, r2
 8003cd0:	70bb      	strb	r3, [r7, #2]
    write_register(SETUP_RETR, (delay & 0xf) << ARD | (count & 0xf) << ARC);
 8003cd2:	78fb      	ldrb	r3, [r7, #3]
 8003cd4:	011b      	lsls	r3, r3, #4
 8003cd6:	b25a      	sxtb	r2, r3
 8003cd8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003cdc:	f003 030f 	and.w	r3, r3, #15
 8003ce0:	b25b      	sxtb	r3, r3
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	b25b      	sxtb	r3, r3
 8003ce6:	b2da      	uxtb	r2, r3
 8003ce8:	2300      	movs	r3, #0
 8003cea:	2104      	movs	r1, #4
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	f7fe fee3 	bl	8002ab8 <_ZN4RF2414write_registerEhhb>
}
 8003cf2:	bf00      	nop
 8003cf4:	3708      	adds	r7, #8
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}

08003cfa <_ZN4RF2412digitalWriteEtb>:


//da qui in avanti sono mie


void RF24::digitalWrite(uint16_t pin, bool value){
 8003cfa:	b580      	push	{r7, lr}
 8003cfc:	b082      	sub	sp, #8
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	6078      	str	r0, [r7, #4]
 8003d02:	460b      	mov	r3, r1
 8003d04:	807b      	strh	r3, [r7, #2]
 8003d06:	4613      	mov	r3, r2
 8003d08:	707b      	strb	r3, [r7, #1]
	if (pin == ce_pin){
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	889b      	ldrh	r3, [r3, #4]
 8003d0e:	887a      	ldrh	r2, [r7, #2]
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d107      	bne.n	8003d24 <_ZN4RF2412digitalWriteEtb+0x2a>
		HAL_GPIO_WritePin(ce_port, ce_pin, (GPIO_PinState) value);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6818      	ldr	r0, [r3, #0]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	889b      	ldrh	r3, [r3, #4]
 8003d1c:	787a      	ldrb	r2, [r7, #1]
 8003d1e:	4619      	mov	r1, r3
 8003d20:	f7fd f9f2 	bl	8001108 <HAL_GPIO_WritePin>
	}
	if (pin== csn_pin){
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	899b      	ldrh	r3, [r3, #12]
 8003d28:	887a      	ldrh	r2, [r7, #2]
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d107      	bne.n	8003d3e <_ZN4RF2412digitalWriteEtb+0x44>
		HAL_GPIO_WritePin(csn_port, csn_pin, (GPIO_PinState) value);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6898      	ldr	r0, [r3, #8]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	899b      	ldrh	r3, [r3, #12]
 8003d36:	787a      	ldrb	r2, [r7, #1]
 8003d38:	4619      	mov	r1, r3
 8003d3a:	f7fd f9e5 	bl	8001108 <HAL_GPIO_WritePin>
	}
}
 8003d3e:	bf00      	nop
 8003d40:	3708      	adds	r7, #8
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}

08003d46 <_ZN4RF2417delayMicrosecondsEt>:

void RF24::delayMicroseconds(uint16_t us){
 8003d46:	b580      	push	{r7, lr}
 8003d48:	b082      	sub	sp, #8
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	6078      	str	r0, [r7, #4]
 8003d4e:	460b      	mov	r3, r1
 8003d50:	807b      	strh	r3, [r7, #2]
	HAL_Delay(1); // da cancellare
 8003d52:	2001      	movs	r0, #1
 8003d54:	f7fc ff78 	bl	8000c48 <HAL_Delay>
	return; // da cancellare
 8003d58:	bf00      	nop
	uint16_t counter = timerRF24.getCNT();

	while (counter < us){
		counter = timerRF24.getCNT();  // wait for the counter to reach the us input in the parameter
	}
}
 8003d5a:	3708      	adds	r7, #8
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}

08003d60 <_ZN4RF246millisEv>:

uint32_t RF24::millis(void){
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b082      	sub	sp, #8
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
	return (timerRF24.getCNT()*1000);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	3320      	adds	r3, #32
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f000 f9e2 	bl	8004136 <_ZN10TIMER_RF246getCNTEv>
 8003d72:	4603      	mov	r3, r0
 8003d74:	461a      	mov	r2, r3
 8003d76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d7a:	fb03 f302 	mul.w	r3, r3, r2
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3708      	adds	r7, #8
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
	...

08003d88 <_ZN4RF2418pinModeRF24_ce_csnEv>:

void RF24::pinModeRF24_ce_csn(void){
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b08e      	sub	sp, #56	; 0x38
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d90:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003d94:	2200      	movs	r2, #0
 8003d96:	601a      	str	r2, [r3, #0]
 8003d98:	605a      	str	r2, [r3, #4]
 8003d9a:	609a      	str	r2, [r3, #8]
 8003d9c:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	switch ((int)ce_port){
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a61      	ldr	r2, [pc, #388]	; (8003f28 <_ZN4RF2418pinModeRF24_ce_csnEv+0x1a0>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d01a      	beq.n	8003dde <_ZN4RF2418pinModeRF24_ce_csnEv+0x56>
 8003da8:	4a5f      	ldr	r2, [pc, #380]	; (8003f28 <_ZN4RF2418pinModeRF24_ce_csnEv+0x1a0>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	dc03      	bgt.n	8003db6 <_ZN4RF2418pinModeRF24_ce_csnEv+0x2e>
 8003dae:	4a5f      	ldr	r2, [pc, #380]	; (8003f2c <_ZN4RF2418pinModeRF24_ce_csnEv+0x1a4>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d007      	beq.n	8003dc4 <_ZN4RF2418pinModeRF24_ce_csnEv+0x3c>
 8003db4:	e03a      	b.n	8003e2c <_ZN4RF2418pinModeRF24_ce_csnEv+0xa4>
 8003db6:	4a5e      	ldr	r2, [pc, #376]	; (8003f30 <_ZN4RF2418pinModeRF24_ce_csnEv+0x1a8>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d01d      	beq.n	8003df8 <_ZN4RF2418pinModeRF24_ce_csnEv+0x70>
 8003dbc:	4a5d      	ldr	r2, [pc, #372]	; (8003f34 <_ZN4RF2418pinModeRF24_ce_csnEv+0x1ac>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d027      	beq.n	8003e12 <_ZN4RF2418pinModeRF24_ce_csnEv+0x8a>
 8003dc2:	e033      	b.n	8003e2c <_ZN4RF2418pinModeRF24_ce_csnEv+0xa4>
	case(GPIOA_BASE): __HAL_RCC_GPIOA_CLK_ENABLE(); break;
 8003dc4:	4b5c      	ldr	r3, [pc, #368]	; (8003f38 <_ZN4RF2418pinModeRF24_ce_csnEv+0x1b0>)
 8003dc6:	699b      	ldr	r3, [r3, #24]
 8003dc8:	4a5b      	ldr	r2, [pc, #364]	; (8003f38 <_ZN4RF2418pinModeRF24_ce_csnEv+0x1b0>)
 8003dca:	f043 0304 	orr.w	r3, r3, #4
 8003dce:	6193      	str	r3, [r2, #24]
 8003dd0:	4b59      	ldr	r3, [pc, #356]	; (8003f38 <_ZN4RF2418pinModeRF24_ce_csnEv+0x1b0>)
 8003dd2:	699b      	ldr	r3, [r3, #24]
 8003dd4:	f003 0304 	and.w	r3, r3, #4
 8003dd8:	627b      	str	r3, [r7, #36]	; 0x24
 8003dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ddc:	e026      	b.n	8003e2c <_ZN4RF2418pinModeRF24_ce_csnEv+0xa4>
	case(GPIOB_BASE): __HAL_RCC_GPIOB_CLK_ENABLE(); break;
 8003dde:	4b56      	ldr	r3, [pc, #344]	; (8003f38 <_ZN4RF2418pinModeRF24_ce_csnEv+0x1b0>)
 8003de0:	699b      	ldr	r3, [r3, #24]
 8003de2:	4a55      	ldr	r2, [pc, #340]	; (8003f38 <_ZN4RF2418pinModeRF24_ce_csnEv+0x1b0>)
 8003de4:	f043 0308 	orr.w	r3, r3, #8
 8003de8:	6193      	str	r3, [r2, #24]
 8003dea:	4b53      	ldr	r3, [pc, #332]	; (8003f38 <_ZN4RF2418pinModeRF24_ce_csnEv+0x1b0>)
 8003dec:	699b      	ldr	r3, [r3, #24]
 8003dee:	f003 0308 	and.w	r3, r3, #8
 8003df2:	623b      	str	r3, [r7, #32]
 8003df4:	6a3b      	ldr	r3, [r7, #32]
 8003df6:	e019      	b.n	8003e2c <_ZN4RF2418pinModeRF24_ce_csnEv+0xa4>
	case(GPIOC_BASE): __HAL_RCC_GPIOC_CLK_ENABLE(); break;
 8003df8:	4b4f      	ldr	r3, [pc, #316]	; (8003f38 <_ZN4RF2418pinModeRF24_ce_csnEv+0x1b0>)
 8003dfa:	699b      	ldr	r3, [r3, #24]
 8003dfc:	4a4e      	ldr	r2, [pc, #312]	; (8003f38 <_ZN4RF2418pinModeRF24_ce_csnEv+0x1b0>)
 8003dfe:	f043 0310 	orr.w	r3, r3, #16
 8003e02:	6193      	str	r3, [r2, #24]
 8003e04:	4b4c      	ldr	r3, [pc, #304]	; (8003f38 <_ZN4RF2418pinModeRF24_ce_csnEv+0x1b0>)
 8003e06:	699b      	ldr	r3, [r3, #24]
 8003e08:	f003 0310 	and.w	r3, r3, #16
 8003e0c:	61fb      	str	r3, [r7, #28]
 8003e0e:	69fb      	ldr	r3, [r7, #28]
 8003e10:	e00c      	b.n	8003e2c <_ZN4RF2418pinModeRF24_ce_csnEv+0xa4>
	case(GPIOD_BASE): __HAL_RCC_GPIOD_CLK_ENABLE(); break;
 8003e12:	4b49      	ldr	r3, [pc, #292]	; (8003f38 <_ZN4RF2418pinModeRF24_ce_csnEv+0x1b0>)
 8003e14:	699b      	ldr	r3, [r3, #24]
 8003e16:	4a48      	ldr	r2, [pc, #288]	; (8003f38 <_ZN4RF2418pinModeRF24_ce_csnEv+0x1b0>)
 8003e18:	f043 0320 	orr.w	r3, r3, #32
 8003e1c:	6193      	str	r3, [r2, #24]
 8003e1e:	4b46      	ldr	r3, [pc, #280]	; (8003f38 <_ZN4RF2418pinModeRF24_ce_csnEv+0x1b0>)
 8003e20:	699b      	ldr	r3, [r3, #24]
 8003e22:	f003 0320 	and.w	r3, r3, #32
 8003e26:	61bb      	str	r3, [r7, #24]
 8003e28:	69bb      	ldr	r3, [r7, #24]
 8003e2a:	bf00      	nop
	}

	switch ((int)csn_port){
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	4a3d      	ldr	r2, [pc, #244]	; (8003f28 <_ZN4RF2418pinModeRF24_ce_csnEv+0x1a0>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d01a      	beq.n	8003e6c <_ZN4RF2418pinModeRF24_ce_csnEv+0xe4>
 8003e36:	4a3c      	ldr	r2, [pc, #240]	; (8003f28 <_ZN4RF2418pinModeRF24_ce_csnEv+0x1a0>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	dc03      	bgt.n	8003e44 <_ZN4RF2418pinModeRF24_ce_csnEv+0xbc>
 8003e3c:	4a3b      	ldr	r2, [pc, #236]	; (8003f2c <_ZN4RF2418pinModeRF24_ce_csnEv+0x1a4>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d007      	beq.n	8003e52 <_ZN4RF2418pinModeRF24_ce_csnEv+0xca>
 8003e42:	e03a      	b.n	8003eba <_ZN4RF2418pinModeRF24_ce_csnEv+0x132>
 8003e44:	4a3a      	ldr	r2, [pc, #232]	; (8003f30 <_ZN4RF2418pinModeRF24_ce_csnEv+0x1a8>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d01d      	beq.n	8003e86 <_ZN4RF2418pinModeRF24_ce_csnEv+0xfe>
 8003e4a:	4a3a      	ldr	r2, [pc, #232]	; (8003f34 <_ZN4RF2418pinModeRF24_ce_csnEv+0x1ac>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d027      	beq.n	8003ea0 <_ZN4RF2418pinModeRF24_ce_csnEv+0x118>
 8003e50:	e033      	b.n	8003eba <_ZN4RF2418pinModeRF24_ce_csnEv+0x132>
	case(GPIOA_BASE): __HAL_RCC_GPIOA_CLK_ENABLE(); break;
 8003e52:	4b39      	ldr	r3, [pc, #228]	; (8003f38 <_ZN4RF2418pinModeRF24_ce_csnEv+0x1b0>)
 8003e54:	699b      	ldr	r3, [r3, #24]
 8003e56:	4a38      	ldr	r2, [pc, #224]	; (8003f38 <_ZN4RF2418pinModeRF24_ce_csnEv+0x1b0>)
 8003e58:	f043 0304 	orr.w	r3, r3, #4
 8003e5c:	6193      	str	r3, [r2, #24]
 8003e5e:	4b36      	ldr	r3, [pc, #216]	; (8003f38 <_ZN4RF2418pinModeRF24_ce_csnEv+0x1b0>)
 8003e60:	699b      	ldr	r3, [r3, #24]
 8003e62:	f003 0304 	and.w	r3, r3, #4
 8003e66:	617b      	str	r3, [r7, #20]
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	e026      	b.n	8003eba <_ZN4RF2418pinModeRF24_ce_csnEv+0x132>
	case(GPIOB_BASE): __HAL_RCC_GPIOB_CLK_ENABLE(); break;
 8003e6c:	4b32      	ldr	r3, [pc, #200]	; (8003f38 <_ZN4RF2418pinModeRF24_ce_csnEv+0x1b0>)
 8003e6e:	699b      	ldr	r3, [r3, #24]
 8003e70:	4a31      	ldr	r2, [pc, #196]	; (8003f38 <_ZN4RF2418pinModeRF24_ce_csnEv+0x1b0>)
 8003e72:	f043 0308 	orr.w	r3, r3, #8
 8003e76:	6193      	str	r3, [r2, #24]
 8003e78:	4b2f      	ldr	r3, [pc, #188]	; (8003f38 <_ZN4RF2418pinModeRF24_ce_csnEv+0x1b0>)
 8003e7a:	699b      	ldr	r3, [r3, #24]
 8003e7c:	f003 0308 	and.w	r3, r3, #8
 8003e80:	613b      	str	r3, [r7, #16]
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	e019      	b.n	8003eba <_ZN4RF2418pinModeRF24_ce_csnEv+0x132>
	case(GPIOC_BASE): __HAL_RCC_GPIOC_CLK_ENABLE(); break;
 8003e86:	4b2c      	ldr	r3, [pc, #176]	; (8003f38 <_ZN4RF2418pinModeRF24_ce_csnEv+0x1b0>)
 8003e88:	699b      	ldr	r3, [r3, #24]
 8003e8a:	4a2b      	ldr	r2, [pc, #172]	; (8003f38 <_ZN4RF2418pinModeRF24_ce_csnEv+0x1b0>)
 8003e8c:	f043 0310 	orr.w	r3, r3, #16
 8003e90:	6193      	str	r3, [r2, #24]
 8003e92:	4b29      	ldr	r3, [pc, #164]	; (8003f38 <_ZN4RF2418pinModeRF24_ce_csnEv+0x1b0>)
 8003e94:	699b      	ldr	r3, [r3, #24]
 8003e96:	f003 0310 	and.w	r3, r3, #16
 8003e9a:	60fb      	str	r3, [r7, #12]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	e00c      	b.n	8003eba <_ZN4RF2418pinModeRF24_ce_csnEv+0x132>
	case(GPIOD_BASE): __HAL_RCC_GPIOD_CLK_ENABLE(); break;
 8003ea0:	4b25      	ldr	r3, [pc, #148]	; (8003f38 <_ZN4RF2418pinModeRF24_ce_csnEv+0x1b0>)
 8003ea2:	699b      	ldr	r3, [r3, #24]
 8003ea4:	4a24      	ldr	r2, [pc, #144]	; (8003f38 <_ZN4RF2418pinModeRF24_ce_csnEv+0x1b0>)
 8003ea6:	f043 0320 	orr.w	r3, r3, #32
 8003eaa:	6193      	str	r3, [r2, #24]
 8003eac:	4b22      	ldr	r3, [pc, #136]	; (8003f38 <_ZN4RF2418pinModeRF24_ce_csnEv+0x1b0>)
 8003eae:	699b      	ldr	r3, [r3, #24]
 8003eb0:	f003 0320 	and.w	r3, r3, #32
 8003eb4:	60bb      	str	r3, [r7, #8]
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	bf00      	nop
	//__HAL_RCC_GPIOA_CLK_ENABLE();
	//__HAL_RCC_GPIOB_CLK_ENABLE();

	/*Configure GPIO pin Output Level */
	//HAL_GPIO_WritePin(csn_pin_GPIO_Port, csn_pin_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(csn_port, csn_pin, GPIO_PIN_SET);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6898      	ldr	r0, [r3, #8]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	899b      	ldrh	r3, [r3, #12]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	4619      	mov	r1, r3
 8003ec6:	f7fd f91f 	bl	8001108 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(ce_port, ce_pin, GPIO_PIN_RESET);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6818      	ldr	r0, [r3, #0]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	889b      	ldrh	r3, [r3, #4]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	4619      	mov	r1, r3
 8003ed6:	f7fd f917 	bl	8001108 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : csn_pin_Pin */
	GPIO_InitStruct.Pin = csn_pin;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	899b      	ldrh	r3, [r3, #12]
 8003ede:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003ee8:	2303      	movs	r3, #3
 8003eea:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(csn_port, &GPIO_InitStruct);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003ef4:	4611      	mov	r1, r2
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f7fc ffac 	bl	8000e54 <HAL_GPIO_Init>

	/*Configure GPIO pin : ce_pin_Pin */
	GPIO_InitStruct.Pin = ce_pin;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	889b      	ldrh	r3, [r3, #4]
 8003f00:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f02:	2301      	movs	r3, #1
 8003f04:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f06:	2300      	movs	r3, #0
 8003f08:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003f0a:	2303      	movs	r3, #3
 8003f0c:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(ce_port, &GPIO_InitStruct);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003f16:	4611      	mov	r1, r2
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f7fc ff9b 	bl	8000e54 <HAL_GPIO_Init>
}
 8003f1e:	bf00      	nop
 8003f20:	3738      	adds	r7, #56	; 0x38
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}
 8003f26:	bf00      	nop
 8003f28:	40010c00 	.word	0x40010c00
 8003f2c:	40010800 	.word	0x40010800
 8003f30:	40011000 	.word	0x40011000
 8003f34:	40011400 	.word	0x40011400
 8003f38:	40021000 	.word	0x40021000

08003f3c <_ZN8SPI_RF24C1Ev>:
#include "main.h"
#include "RF24_config.hpp"

#define RF24_SPIDEV_BITS 8

SPI_RF24::SPI_RF24()
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b088      	sub	sp, #32
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
        :fd(-1), _spi_speed(RF24_SPI_SPEED)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003f4a:	659a      	str	r2, [r3, #88]	; 0x58
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	4a21      	ldr	r2, [pc, #132]	; (8003fd4 <_ZN8SPI_RF24C1Ev+0x98>)
 8003f50:	65da      	str	r2, [r3, #92]	; 0x5c
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2200      	movs	r2, #0
 8003f56:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
{
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f5a:	f107 0310 	add.w	r3, r7, #16
 8003f5e:	2200      	movs	r2, #0
 8003f60:	601a      	str	r2, [r3, #0]
 8003f62:	605a      	str	r2, [r3, #4]
 8003f64:	609a      	str	r2, [r3, #8]
 8003f66:	60da      	str	r2, [r3, #12]
	/* Peripheral clock enable */
	__HAL_RCC_SPI1_CLK_ENABLE();
 8003f68:	4b1b      	ldr	r3, [pc, #108]	; (8003fd8 <_ZN8SPI_RF24C1Ev+0x9c>)
 8003f6a:	699b      	ldr	r3, [r3, #24]
 8003f6c:	4a1a      	ldr	r2, [pc, #104]	; (8003fd8 <_ZN8SPI_RF24C1Ev+0x9c>)
 8003f6e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003f72:	6193      	str	r3, [r2, #24]
 8003f74:	4b18      	ldr	r3, [pc, #96]	; (8003fd8 <_ZN8SPI_RF24C1Ev+0x9c>)
 8003f76:	699b      	ldr	r3, [r3, #24]
 8003f78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f7c:	60fb      	str	r3, [r7, #12]
 8003f7e:	68fb      	ldr	r3, [r7, #12]

	__HAL_RCC_GPIOA_CLK_ENABLE();
 8003f80:	4b15      	ldr	r3, [pc, #84]	; (8003fd8 <_ZN8SPI_RF24C1Ev+0x9c>)
 8003f82:	699b      	ldr	r3, [r3, #24]
 8003f84:	4a14      	ldr	r2, [pc, #80]	; (8003fd8 <_ZN8SPI_RF24C1Ev+0x9c>)
 8003f86:	f043 0304 	orr.w	r3, r3, #4
 8003f8a:	6193      	str	r3, [r2, #24]
 8003f8c:	4b12      	ldr	r3, [pc, #72]	; (8003fd8 <_ZN8SPI_RF24C1Ev+0x9c>)
 8003f8e:	699b      	ldr	r3, [r3, #24]
 8003f90:	f003 0304 	and.w	r3, r3, #4
 8003f94:	60bb      	str	r3, [r7, #8]
 8003f96:	68bb      	ldr	r3, [r7, #8]
	/**SPI1 GPIO Configuration
	    PA5     ------> SPI1_SCK
	    PA6     ------> SPI1_MISO
	    PA7     ------> SPI1_MOSI
	 */
	GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8003f98:	23a0      	movs	r3, #160	; 0xa0
 8003f9a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f9c:	2302      	movs	r3, #2
 8003f9e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003fa0:	2303      	movs	r3, #3
 8003fa2:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fa4:	f107 0310 	add.w	r3, r7, #16
 8003fa8:	4619      	mov	r1, r3
 8003faa:	480c      	ldr	r0, [pc, #48]	; (8003fdc <_ZN8SPI_RF24C1Ev+0xa0>)
 8003fac:	f7fc ff52 	bl	8000e54 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003fb0:	2340      	movs	r3, #64	; 0x40
 8003fb2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fbc:	f107 0310 	add.w	r3, r7, #16
 8003fc0:	4619      	mov	r1, r3
 8003fc2:	4806      	ldr	r0, [pc, #24]	; (8003fdc <_ZN8SPI_RF24C1Ev+0xa0>)
 8003fc4:	f7fc ff46 	bl	8000e54 <HAL_GPIO_Init>
}
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3720      	adds	r7, #32
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}
 8003fd2:	bf00      	nop
 8003fd4:	00989680 	.word	0x00989680
 8003fd8:	40021000 	.word	0x40021000
 8003fdc:	40010800 	.word	0x40010800

08003fe0 <_ZN8SPI_RF245beginEm>:

void SPI_RF24::begin(uint32_t spi_speed)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b082      	sub	sp, #8
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
 8003fe8:	6039      	str	r1, [r7, #0]

    if (this->spiIsInitialized) {
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d108      	bne.n	8004006 <_ZN8SPI_RF245beginEm+0x26>
        return;
    }

    this->spiIsInitialized = true;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    init(spi_speed);
 8003ffc:	6839      	ldr	r1, [r7, #0]
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f000 f805 	bl	800400e <_ZN8SPI_RF244initEm>
 8004004:	e000      	b.n	8004008 <_ZN8SPI_RF245beginEm+0x28>
        return;
 8004006:	bf00      	nop
}
 8004008:	3708      	adds	r7, #8
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}

0800400e <_ZN8SPI_RF244initEm>:

void SPI_RF24::init(uint32_t speed)
{
 800400e:	b580      	push	{r7, lr}
 8004010:	b082      	sub	sp, #8
 8004012:	af00      	add	r7, sp, #0
 8004014:	6078      	str	r0, [r7, #4]
 8004016:	6039      	str	r1, [r7, #0]
	MX_SPI1_Init();
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	f000 f819 	bl	8004050 <_ZN8SPI_RF2412MX_SPI1_InitEv>
}
 800401e:	bf00      	nop
 8004020:	3708      	adds	r7, #8
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}

08004026 <_ZN8SPI_RF248transferEh>:

uint8_t SPI_RF24::transfer(uint8_t tx)
{
 8004026:	b580      	push	{r7, lr}
 8004028:	b086      	sub	sp, #24
 800402a:	af02      	add	r7, sp, #8
 800402c:	6078      	str	r0, [r7, #4]
 800402e:	460b      	mov	r3, r1
 8004030:	70fb      	strb	r3, [r7, #3]
    uint8_t rx;
    HAL_SPI_TransmitReceive(&hspi1, &tx, &rx, 1, 1000);
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f107 020f 	add.w	r2, r7, #15
 8004038:	1cf9      	adds	r1, r7, #3
 800403a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800403e:	9300      	str	r3, [sp, #0]
 8004040:	2301      	movs	r3, #1
 8004042:	f7fd fd19 	bl	8001a78 <HAL_SPI_TransmitReceive>

    return rx;
 8004046:	7bfb      	ldrb	r3, [r7, #15]
}
 8004048:	4618      	mov	r0, r3
 800404a:	3710      	adds	r7, #16
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}

08004050 <_ZN8SPI_RF2412MX_SPI1_InitEv>:
	*/
	HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
}

void SPI_RF24::MX_SPI1_Init(void)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b082      	sub	sp, #8
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	4a1b      	ldr	r2, [pc, #108]	; (80040c8 <_ZN8SPI_RF2412MX_SPI1_InitEv+0x78>)
 800405c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004064:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2200      	movs	r2, #0
 800406a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2200      	movs	r2, #0
 800407c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004084:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2210      	movs	r2, #16
 800408a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2200      	movs	r2, #0
 8004090:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2200      	movs	r2, #0
 8004096:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	220a      	movs	r2, #10
 80040a2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	4618      	mov	r0, r3
 80040a8:	f7fd fc62 	bl	8001970 <HAL_SPI_Init>
 80040ac:	4603      	mov	r3, r0
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	bf14      	ite	ne
 80040b2:	2301      	movne	r3, #1
 80040b4:	2300      	moveq	r3, #0
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d001      	beq.n	80040c0 <_ZN8SPI_RF2412MX_SPI1_InitEv+0x70>
  {
    Error_Handler();
 80040bc:	f7fc fb5a 	bl	8000774 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */
}
 80040c0:	bf00      	nop
 80040c2:	3708      	adds	r7, #8
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}
 80040c8:	40013000 	.word	0x40013000

080040cc <_ZN10TIMER_RF24C1Ev>:

#include "TimerRF24.hpp"
#include "main.h"
#include "RF24_config.hpp"


 80040cc:	b480      	push	{r7}
 80040ce:	b085      	sub	sp, #20
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
TIMER_RF24::TIMER_RF24()
{
 80040dc:	4b08      	ldr	r3, [pc, #32]	; (8004100 <_ZN10TIMER_RF24C1Ev+0x34>)
 80040de:	699b      	ldr	r3, [r3, #24]
 80040e0:	4a07      	ldr	r2, [pc, #28]	; (8004100 <_ZN10TIMER_RF24C1Ev+0x34>)
 80040e2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80040e6:	6193      	str	r3, [r2, #24]
 80040e8:	4b05      	ldr	r3, [pc, #20]	; (8004100 <_ZN10TIMER_RF24C1Ev+0x34>)
 80040ea:	699b      	ldr	r3, [r3, #24]
 80040ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040f0:	60fb      	str	r3, [r7, #12]
 80040f2:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_TIM1_CLK_ENABLE();
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	4618      	mov	r0, r3
 80040f8:	3714      	adds	r7, #20
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bc80      	pop	{r7}
 80040fe:	4770      	bx	lr
 8004100:	40021000 	.word	0x40021000

08004104 <_ZN10TIMER_RF245beginEv>:
}

void TIMER_RF24::begin()
 8004104:	b580      	push	{r7, lr}
 8004106:	b082      	sub	sp, #8
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
{

 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8004112:	2b00      	cmp	r3, #0
 8004114:	d10b      	bne.n	800412e <_ZN10TIMER_RF245beginEv+0x2a>
    if (this->timerIsInitialized) {
        return;
    }

 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2201      	movs	r2, #1
 800411a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    this->timerIsInitialized = true;
    //__HAL_RCC_TIM1_CLK_ENABLE();
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f000 f816 	bl	8004150 <_ZN10TIMER_RF244initEv>
    init();

 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	4618      	mov	r0, r3
 8004128:	f7fd ff3e 	bl	8001fa8 <HAL_TIM_Base_Start>
 800412c:	e000      	b.n	8004130 <_ZN10TIMER_RF245beginEv+0x2c>
    if (this->timerIsInitialized) {
 800412e:	bf00      	nop
    HAL_TIM_Base_Start(&htim_us);
 8004130:	3708      	adds	r7, #8
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}

08004136 <_ZN10TIMER_RF246getCNTEv>:
}

void TIMER_RF24::setCNT(uint16_t val){
	__HAL_TIM_SET_COUNTER(&htim_us,val);  // set the counter value a 0
}

 8004136:	b480      	push	{r7}
 8004138:	b083      	sub	sp, #12
 800413a:	af00      	add	r7, sp, #0
 800413c:	6078      	str	r0, [r7, #4]
uint16_t TIMER_RF24::getCNT(void){
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004144:	b29b      	uxth	r3, r3
	return (__HAL_TIM_GET_COUNTER(&htim_us));  // get the counter value
 8004146:	4618      	mov	r0, r3
 8004148:	370c      	adds	r7, #12
 800414a:	46bd      	mov	sp, r7
 800414c:	bc80      	pop	{r7}
 800414e:	4770      	bx	lr

08004150 <_ZN10TIMER_RF244initEv>:
}

void TIMER_RF24::init()
 8004150:	b580      	push	{r7, lr}
 8004152:	b082      	sub	sp, #8
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
{
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	f000 f805 	bl	8004168 <_ZN10TIMER_RF2412MX_TIM1_InitEv>
	MX_TIM1_Init();
 800415e:	bf00      	nop
 8004160:	3708      	adds	r7, #8
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}
	...

08004168 <_ZN10TIMER_RF2412MX_TIM1_InitEv>:
TIMER_RF24::~TIMER_RF24()
{
	__HAL_RCC_TIM1_CLK_DISABLE();
}

void TIMER_RF24::MX_TIM1_Init(void)
 8004168:	b580      	push	{r7, lr}
 800416a:	b088      	sub	sp, #32
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
{

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

 8004170:	f107 0310 	add.w	r3, r7, #16
 8004174:	2200      	movs	r2, #0
 8004176:	601a      	str	r2, [r3, #0]
 8004178:	605a      	str	r2, [r3, #4]
 800417a:	609a      	str	r2, [r3, #8]
 800417c:	60da      	str	r2, [r3, #12]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800417e:	f107 0308 	add.w	r3, r7, #8
 8004182:	2200      	movs	r2, #0
 8004184:	601a      	str	r2, [r3, #0]
 8004186:	605a      	str	r2, [r3, #4]
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	4a28      	ldr	r2, [pc, #160]	; (800422c <_ZN10TIMER_RF2412MX_TIM1_InitEv+0xc4>)
 800418c:	601a      	str	r2, [r3, #0]
  htim_us.Instance = TIM1;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2247      	movs	r2, #71	; 0x47
 8004192:	605a      	str	r2, [r3, #4]
  htim_us.Init.Prescaler = 72-1;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2200      	movs	r2, #0
 8004198:	609a      	str	r2, [r3, #8]
  htim_us.Init.CounterMode = TIM_COUNTERMODE_UP;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80041a0:	60da      	str	r2, [r3, #12]
  htim_us.Init.Period = 65535-1;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2200      	movs	r2, #0
 80041a6:	611a      	str	r2, [r3, #16]
  htim_us.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	615a      	str	r2, [r3, #20]
  htim_us.Init.RepetitionCounter = 0;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2280      	movs	r2, #128	; 0x80
 80041b2:	619a      	str	r2, [r3, #24]
  htim_us.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	4618      	mov	r0, r3
 80041b8:	f7fd fea6 	bl	8001f08 <HAL_TIM_Base_Init>
 80041bc:	4603      	mov	r3, r0
 80041be:	2b00      	cmp	r3, #0
 80041c0:	bf14      	ite	ne
 80041c2:	2301      	movne	r3, #1
 80041c4:	2300      	moveq	r3, #0
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d001      	beq.n	80041d0 <_ZN10TIMER_RF2412MX_TIM1_InitEv+0x68>
  if (HAL_TIM_Base_Init(&htim_us) != HAL_OK)
  {
 80041cc:	f7fc fad2 	bl	8000774 <Error_Handler>
    Error_Handler();
  }
 80041d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80041d4:	613b      	str	r3, [r7, #16]
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f107 0210 	add.w	r2, r7, #16
 80041dc:	4611      	mov	r1, r2
 80041de:	4618      	mov	r0, r3
 80041e0:	f7fd ff2c 	bl	800203c <HAL_TIM_ConfigClockSource>
 80041e4:	4603      	mov	r3, r0
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	bf14      	ite	ne
 80041ea:	2301      	movne	r3, #1
 80041ec:	2300      	moveq	r3, #0
 80041ee:	b2db      	uxtb	r3, r3
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d001      	beq.n	80041f8 <_ZN10TIMER_RF2412MX_TIM1_InitEv+0x90>
  if (HAL_TIM_ConfigClockSource(&htim_us, &sClockSourceConfig) != HAL_OK)
  {
 80041f4:	f7fc fabe 	bl	8000774 <Error_Handler>
    Error_Handler();
  }
 80041f8:	2300      	movs	r3, #0
 80041fa:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80041fc:	2300      	movs	r3, #0
 80041fe:	60fb      	str	r3, [r7, #12]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	f107 0208 	add.w	r2, r7, #8
 8004206:	4611      	mov	r1, r2
 8004208:	4618      	mov	r0, r3
 800420a:	f7fe f8c7 	bl	800239c <HAL_TIMEx_MasterConfigSynchronization>
 800420e:	4603      	mov	r3, r0
 8004210:	2b00      	cmp	r3, #0
 8004212:	bf14      	ite	ne
 8004214:	2301      	movne	r3, #1
 8004216:	2300      	moveq	r3, #0
 8004218:	b2db      	uxtb	r3, r3
 800421a:	2b00      	cmp	r3, #0
 800421c:	d001      	beq.n	8004222 <_ZN10TIMER_RF2412MX_TIM1_InitEv+0xba>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim_us, &sMasterConfig) != HAL_OK)
  {
 800421e:	f7fc faa9 	bl	8000774 <Error_Handler>
    Error_Handler();
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
 8004222:	bf00      	nop
 8004224:	3720      	adds	r7, #32
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
 800422a:	bf00      	nop
 800422c:	40012c00 	.word	0x40012c00

08004230 <_ZN9UART_RF24C1Ev>:
#include "main.h"
#include "RF24_config.hpp"
#include <stdio.h>
#include <string.h>

UART_RF24::UART_RF24()
 8004230:	b580      	push	{r7, lr}
 8004232:	b088      	sub	sp, #32
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2200      	movs	r2, #0
 800423c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
{
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004240:	f107 0310 	add.w	r3, r7, #16
 8004244:	2200      	movs	r2, #0
 8004246:	601a      	str	r2, [r3, #0]
 8004248:	605a      	str	r2, [r3, #4]
 800424a:	609a      	str	r2, [r3, #8]
 800424c:	60da      	str	r2, [r3, #12]
	/* Peripheral clock enable */
	__HAL_RCC_USART1_CLK_ENABLE();
 800424e:	4b1b      	ldr	r3, [pc, #108]	; (80042bc <_ZN9UART_RF24C1Ev+0x8c>)
 8004250:	699b      	ldr	r3, [r3, #24]
 8004252:	4a1a      	ldr	r2, [pc, #104]	; (80042bc <_ZN9UART_RF24C1Ev+0x8c>)
 8004254:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004258:	6193      	str	r3, [r2, #24]
 800425a:	4b18      	ldr	r3, [pc, #96]	; (80042bc <_ZN9UART_RF24C1Ev+0x8c>)
 800425c:	699b      	ldr	r3, [r3, #24]
 800425e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004262:	60fb      	str	r3, [r7, #12]
 8004264:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8004266:	4b15      	ldr	r3, [pc, #84]	; (80042bc <_ZN9UART_RF24C1Ev+0x8c>)
 8004268:	699b      	ldr	r3, [r3, #24]
 800426a:	4a14      	ldr	r2, [pc, #80]	; (80042bc <_ZN9UART_RF24C1Ev+0x8c>)
 800426c:	f043 0304 	orr.w	r3, r3, #4
 8004270:	6193      	str	r3, [r2, #24]
 8004272:	4b12      	ldr	r3, [pc, #72]	; (80042bc <_ZN9UART_RF24C1Ev+0x8c>)
 8004274:	699b      	ldr	r3, [r3, #24]
 8004276:	f003 0304 	and.w	r3, r3, #4
 800427a:	60bb      	str	r3, [r7, #8]
 800427c:	68bb      	ldr	r3, [r7, #8]
	/**USART1 GPIO Configuration
	    PA9     ------> USART1_TX
	    PA10     ------> USART1_RX
	 */
	GPIO_InitStruct.Pin = GPIO_PIN_9;
 800427e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004282:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004284:	2302      	movs	r3, #2
 8004286:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004288:	2303      	movs	r3, #3
 800428a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800428c:	f107 0310 	add.w	r3, r7, #16
 8004290:	4619      	mov	r1, r3
 8004292:	480b      	ldr	r0, [pc, #44]	; (80042c0 <_ZN9UART_RF24C1Ev+0x90>)
 8004294:	f7fc fdde 	bl	8000e54 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004298:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800429c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800429e:	2300      	movs	r3, #0
 80042a0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042a2:	2300      	movs	r3, #0
 80042a4:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042a6:	f107 0310 	add.w	r3, r7, #16
 80042aa:	4619      	mov	r1, r3
 80042ac:	4804      	ldr	r0, [pc, #16]	; (80042c0 <_ZN9UART_RF24C1Ev+0x90>)
 80042ae:	f7fc fdd1 	bl	8000e54 <HAL_GPIO_Init>
}
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	4618      	mov	r0, r3
 80042b6:	3720      	adds	r7, #32
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}
 80042bc:	40021000 	.word	0x40021000
 80042c0:	40010800 	.word	0x40010800

080042c4 <_ZN9UART_RF248gethUARTEv>:
UART_HandleTypeDef UART_RF24::gethUART(void){
 80042c4:	b4b0      	push	{r4, r5, r7}
 80042c6:	b083      	sub	sp, #12
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
 80042cc:	6039      	str	r1, [r7, #0]
	return (huartRF24);
 80042ce:	687a      	ldr	r2, [r7, #4]
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	4614      	mov	r4, r2
 80042d4:	461d      	mov	r5, r3
 80042d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80042d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80042da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80042dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80042de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80042e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80042e2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80042e6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	370c      	adds	r7, #12
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bcb0      	pop	{r4, r5, r7}
 80042f2:	4770      	bx	lr

080042f4 <_ZN9UART_RF245beginEv>:

void UART_RF24::begin()
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b082      	sub	sp, #8
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]

    if (this->uartIsInitialized) {
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004302:	2b00      	cmp	r3, #0
 8004304:	d107      	bne.n	8004316 <_ZN9UART_RF245beginEv+0x22>
        return;
    }

    this->uartIsInitialized = true;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2201      	movs	r2, #1
 800430a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    init();
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f000 f805 	bl	800431e <_ZN9UART_RF244initEv>
 8004314:	e000      	b.n	8004318 <_ZN9UART_RF245beginEv+0x24>
        return;
 8004316:	bf00      	nop
}
 8004318:	3708      	adds	r7, #8
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}

0800431e <_ZN9UART_RF244initEv>:

void UART_RF24::init()
{
 800431e:	b580      	push	{r7, lr}
 8004320:	b082      	sub	sp, #8
 8004322:	af00      	add	r7, sp, #0
 8004324:	6078      	str	r0, [r7, #4]
	MX_USART1_UART_Init();
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f000 f804 	bl	8004334 <_ZN9UART_RF2419MX_USART1_UART_InitEv>
}
 800432c:	bf00      	nop
 800432e:	3708      	adds	r7, #8
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}

08004334 <_ZN9UART_RF2419MX_USART1_UART_InitEv>:
	sprintf(loc_buf, format, param1);
	transmit(loc_buf, strlen((char *) param1));
}

void UART_RF24::MX_USART1_UART_Init(void)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b082      	sub	sp, #8
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huartRF24.Instance = USART1;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	4a15      	ldr	r2, [pc, #84]	; (8004394 <_ZN9UART_RF2419MX_USART1_UART_InitEv+0x60>)
 8004340:	601a      	str	r2, [r3, #0]
  huartRF24.Init.BaudRate = 115200;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004348:	605a      	str	r2, [r3, #4]
  huartRF24.Init.WordLength = UART_WORDLENGTH_8B;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2200      	movs	r2, #0
 800434e:	609a      	str	r2, [r3, #8]
  huartRF24.Init.StopBits = UART_STOPBITS_1;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2200      	movs	r2, #0
 8004354:	60da      	str	r2, [r3, #12]
  huartRF24.Init.Parity = UART_PARITY_NONE;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2200      	movs	r2, #0
 800435a:	611a      	str	r2, [r3, #16]
  huartRF24.Init.Mode = UART_MODE_TX_RX;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	220c      	movs	r2, #12
 8004360:	615a      	str	r2, [r3, #20]
  huartRF24.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2200      	movs	r2, #0
 8004366:	619a      	str	r2, [r3, #24]
  huartRF24.Init.OverSampling = UART_OVERSAMPLING_16;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2200      	movs	r2, #0
 800436c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huartRF24) != HAL_OK)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	4618      	mov	r0, r3
 8004372:	f7fe f871 	bl	8002458 <HAL_UART_Init>
 8004376:	4603      	mov	r3, r0
 8004378:	2b00      	cmp	r3, #0
 800437a:	bf14      	ite	ne
 800437c:	2301      	movne	r3, #1
 800437e:	2300      	moveq	r3, #0
 8004380:	b2db      	uxtb	r3, r3
 8004382:	2b00      	cmp	r3, #0
 8004384:	d001      	beq.n	800438a <_ZN9UART_RF2419MX_USART1_UART_InitEv+0x56>
  {
    Error_Handler();
 8004386:	f7fc f9f5 	bl	8000774 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800438a:	bf00      	nop
 800438c:	3708      	adds	r7, #8
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}
 8004392:	bf00      	nop
 8004394:	40013800 	.word	0x40013800

08004398 <__errno>:
 8004398:	4b01      	ldr	r3, [pc, #4]	; (80043a0 <__errno+0x8>)
 800439a:	6818      	ldr	r0, [r3, #0]
 800439c:	4770      	bx	lr
 800439e:	bf00      	nop
 80043a0:	2000000c 	.word	0x2000000c

080043a4 <getchar>:
 80043a4:	4b07      	ldr	r3, [pc, #28]	; (80043c4 <getchar+0x20>)
 80043a6:	b510      	push	{r4, lr}
 80043a8:	681c      	ldr	r4, [r3, #0]
 80043aa:	b124      	cbz	r4, 80043b6 <getchar+0x12>
 80043ac:	69a3      	ldr	r3, [r4, #24]
 80043ae:	b913      	cbnz	r3, 80043b6 <getchar+0x12>
 80043b0:	4620      	mov	r0, r4
 80043b2:	f000 fa7f 	bl	80048b4 <__sinit>
 80043b6:	6861      	ldr	r1, [r4, #4]
 80043b8:	4620      	mov	r0, r4
 80043ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043be:	f000 bb1f 	b.w	8004a00 <_getc_r>
 80043c2:	bf00      	nop
 80043c4:	2000000c 	.word	0x2000000c

080043c8 <__libc_init_array>:
 80043c8:	b570      	push	{r4, r5, r6, lr}
 80043ca:	2500      	movs	r5, #0
 80043cc:	4e0c      	ldr	r6, [pc, #48]	; (8004400 <__libc_init_array+0x38>)
 80043ce:	4c0d      	ldr	r4, [pc, #52]	; (8004404 <__libc_init_array+0x3c>)
 80043d0:	1ba4      	subs	r4, r4, r6
 80043d2:	10a4      	asrs	r4, r4, #2
 80043d4:	42a5      	cmp	r5, r4
 80043d6:	d109      	bne.n	80043ec <__libc_init_array+0x24>
 80043d8:	f001 f89c 	bl	8005514 <_init>
 80043dc:	2500      	movs	r5, #0
 80043de:	4e0a      	ldr	r6, [pc, #40]	; (8004408 <__libc_init_array+0x40>)
 80043e0:	4c0a      	ldr	r4, [pc, #40]	; (800440c <__libc_init_array+0x44>)
 80043e2:	1ba4      	subs	r4, r4, r6
 80043e4:	10a4      	asrs	r4, r4, #2
 80043e6:	42a5      	cmp	r5, r4
 80043e8:	d105      	bne.n	80043f6 <__libc_init_array+0x2e>
 80043ea:	bd70      	pop	{r4, r5, r6, pc}
 80043ec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80043f0:	4798      	blx	r3
 80043f2:	3501      	adds	r5, #1
 80043f4:	e7ee      	b.n	80043d4 <__libc_init_array+0xc>
 80043f6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80043fa:	4798      	blx	r3
 80043fc:	3501      	adds	r5, #1
 80043fe:	e7f2      	b.n	80043e6 <__libc_init_array+0x1e>
 8004400:	08005cb4 	.word	0x08005cb4
 8004404:	08005cb4 	.word	0x08005cb4
 8004408:	08005cb4 	.word	0x08005cb4
 800440c:	08005cb8 	.word	0x08005cb8

08004410 <memcpy>:
 8004410:	b510      	push	{r4, lr}
 8004412:	1e43      	subs	r3, r0, #1
 8004414:	440a      	add	r2, r1
 8004416:	4291      	cmp	r1, r2
 8004418:	d100      	bne.n	800441c <memcpy+0xc>
 800441a:	bd10      	pop	{r4, pc}
 800441c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004420:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004424:	e7f7      	b.n	8004416 <memcpy+0x6>

08004426 <memset>:
 8004426:	4603      	mov	r3, r0
 8004428:	4402      	add	r2, r0
 800442a:	4293      	cmp	r3, r2
 800442c:	d100      	bne.n	8004430 <memset+0xa>
 800442e:	4770      	bx	lr
 8004430:	f803 1b01 	strb.w	r1, [r3], #1
 8004434:	e7f9      	b.n	800442a <memset+0x4>
	...

08004438 <iprintf>:
 8004438:	b40f      	push	{r0, r1, r2, r3}
 800443a:	4b0a      	ldr	r3, [pc, #40]	; (8004464 <iprintf+0x2c>)
 800443c:	b513      	push	{r0, r1, r4, lr}
 800443e:	681c      	ldr	r4, [r3, #0]
 8004440:	b124      	cbz	r4, 800444c <iprintf+0x14>
 8004442:	69a3      	ldr	r3, [r4, #24]
 8004444:	b913      	cbnz	r3, 800444c <iprintf+0x14>
 8004446:	4620      	mov	r0, r4
 8004448:	f000 fa34 	bl	80048b4 <__sinit>
 800444c:	ab05      	add	r3, sp, #20
 800444e:	9a04      	ldr	r2, [sp, #16]
 8004450:	68a1      	ldr	r1, [r4, #8]
 8004452:	4620      	mov	r0, r4
 8004454:	9301      	str	r3, [sp, #4]
 8004456:	f000 fc31 	bl	8004cbc <_vfiprintf_r>
 800445a:	b002      	add	sp, #8
 800445c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004460:	b004      	add	sp, #16
 8004462:	4770      	bx	lr
 8004464:	2000000c 	.word	0x2000000c

08004468 <_puts_r>:
 8004468:	b570      	push	{r4, r5, r6, lr}
 800446a:	460e      	mov	r6, r1
 800446c:	4605      	mov	r5, r0
 800446e:	b118      	cbz	r0, 8004478 <_puts_r+0x10>
 8004470:	6983      	ldr	r3, [r0, #24]
 8004472:	b90b      	cbnz	r3, 8004478 <_puts_r+0x10>
 8004474:	f000 fa1e 	bl	80048b4 <__sinit>
 8004478:	69ab      	ldr	r3, [r5, #24]
 800447a:	68ac      	ldr	r4, [r5, #8]
 800447c:	b913      	cbnz	r3, 8004484 <_puts_r+0x1c>
 800447e:	4628      	mov	r0, r5
 8004480:	f000 fa18 	bl	80048b4 <__sinit>
 8004484:	4b23      	ldr	r3, [pc, #140]	; (8004514 <_puts_r+0xac>)
 8004486:	429c      	cmp	r4, r3
 8004488:	d117      	bne.n	80044ba <_puts_r+0x52>
 800448a:	686c      	ldr	r4, [r5, #4]
 800448c:	89a3      	ldrh	r3, [r4, #12]
 800448e:	071b      	lsls	r3, r3, #28
 8004490:	d51d      	bpl.n	80044ce <_puts_r+0x66>
 8004492:	6923      	ldr	r3, [r4, #16]
 8004494:	b1db      	cbz	r3, 80044ce <_puts_r+0x66>
 8004496:	3e01      	subs	r6, #1
 8004498:	68a3      	ldr	r3, [r4, #8]
 800449a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800449e:	3b01      	subs	r3, #1
 80044a0:	60a3      	str	r3, [r4, #8]
 80044a2:	b9e9      	cbnz	r1, 80044e0 <_puts_r+0x78>
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	da2e      	bge.n	8004506 <_puts_r+0x9e>
 80044a8:	4622      	mov	r2, r4
 80044aa:	210a      	movs	r1, #10
 80044ac:	4628      	mov	r0, r5
 80044ae:	f000 f83f 	bl	8004530 <__swbuf_r>
 80044b2:	3001      	adds	r0, #1
 80044b4:	d011      	beq.n	80044da <_puts_r+0x72>
 80044b6:	200a      	movs	r0, #10
 80044b8:	e011      	b.n	80044de <_puts_r+0x76>
 80044ba:	4b17      	ldr	r3, [pc, #92]	; (8004518 <_puts_r+0xb0>)
 80044bc:	429c      	cmp	r4, r3
 80044be:	d101      	bne.n	80044c4 <_puts_r+0x5c>
 80044c0:	68ac      	ldr	r4, [r5, #8]
 80044c2:	e7e3      	b.n	800448c <_puts_r+0x24>
 80044c4:	4b15      	ldr	r3, [pc, #84]	; (800451c <_puts_r+0xb4>)
 80044c6:	429c      	cmp	r4, r3
 80044c8:	bf08      	it	eq
 80044ca:	68ec      	ldreq	r4, [r5, #12]
 80044cc:	e7de      	b.n	800448c <_puts_r+0x24>
 80044ce:	4621      	mov	r1, r4
 80044d0:	4628      	mov	r0, r5
 80044d2:	f000 f87f 	bl	80045d4 <__swsetup_r>
 80044d6:	2800      	cmp	r0, #0
 80044d8:	d0dd      	beq.n	8004496 <_puts_r+0x2e>
 80044da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80044de:	bd70      	pop	{r4, r5, r6, pc}
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	da04      	bge.n	80044ee <_puts_r+0x86>
 80044e4:	69a2      	ldr	r2, [r4, #24]
 80044e6:	429a      	cmp	r2, r3
 80044e8:	dc06      	bgt.n	80044f8 <_puts_r+0x90>
 80044ea:	290a      	cmp	r1, #10
 80044ec:	d004      	beq.n	80044f8 <_puts_r+0x90>
 80044ee:	6823      	ldr	r3, [r4, #0]
 80044f0:	1c5a      	adds	r2, r3, #1
 80044f2:	6022      	str	r2, [r4, #0]
 80044f4:	7019      	strb	r1, [r3, #0]
 80044f6:	e7cf      	b.n	8004498 <_puts_r+0x30>
 80044f8:	4622      	mov	r2, r4
 80044fa:	4628      	mov	r0, r5
 80044fc:	f000 f818 	bl	8004530 <__swbuf_r>
 8004500:	3001      	adds	r0, #1
 8004502:	d1c9      	bne.n	8004498 <_puts_r+0x30>
 8004504:	e7e9      	b.n	80044da <_puts_r+0x72>
 8004506:	200a      	movs	r0, #10
 8004508:	6823      	ldr	r3, [r4, #0]
 800450a:	1c5a      	adds	r2, r3, #1
 800450c:	6022      	str	r2, [r4, #0]
 800450e:	7018      	strb	r0, [r3, #0]
 8004510:	e7e5      	b.n	80044de <_puts_r+0x76>
 8004512:	bf00      	nop
 8004514:	08005c40 	.word	0x08005c40
 8004518:	08005c60 	.word	0x08005c60
 800451c:	08005c20 	.word	0x08005c20

08004520 <puts>:
 8004520:	4b02      	ldr	r3, [pc, #8]	; (800452c <puts+0xc>)
 8004522:	4601      	mov	r1, r0
 8004524:	6818      	ldr	r0, [r3, #0]
 8004526:	f7ff bf9f 	b.w	8004468 <_puts_r>
 800452a:	bf00      	nop
 800452c:	2000000c 	.word	0x2000000c

08004530 <__swbuf_r>:
 8004530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004532:	460e      	mov	r6, r1
 8004534:	4614      	mov	r4, r2
 8004536:	4605      	mov	r5, r0
 8004538:	b118      	cbz	r0, 8004542 <__swbuf_r+0x12>
 800453a:	6983      	ldr	r3, [r0, #24]
 800453c:	b90b      	cbnz	r3, 8004542 <__swbuf_r+0x12>
 800453e:	f000 f9b9 	bl	80048b4 <__sinit>
 8004542:	4b21      	ldr	r3, [pc, #132]	; (80045c8 <__swbuf_r+0x98>)
 8004544:	429c      	cmp	r4, r3
 8004546:	d12a      	bne.n	800459e <__swbuf_r+0x6e>
 8004548:	686c      	ldr	r4, [r5, #4]
 800454a:	69a3      	ldr	r3, [r4, #24]
 800454c:	60a3      	str	r3, [r4, #8]
 800454e:	89a3      	ldrh	r3, [r4, #12]
 8004550:	071a      	lsls	r2, r3, #28
 8004552:	d52e      	bpl.n	80045b2 <__swbuf_r+0x82>
 8004554:	6923      	ldr	r3, [r4, #16]
 8004556:	b363      	cbz	r3, 80045b2 <__swbuf_r+0x82>
 8004558:	6923      	ldr	r3, [r4, #16]
 800455a:	6820      	ldr	r0, [r4, #0]
 800455c:	b2f6      	uxtb	r6, r6
 800455e:	1ac0      	subs	r0, r0, r3
 8004560:	6963      	ldr	r3, [r4, #20]
 8004562:	4637      	mov	r7, r6
 8004564:	4283      	cmp	r3, r0
 8004566:	dc04      	bgt.n	8004572 <__swbuf_r+0x42>
 8004568:	4621      	mov	r1, r4
 800456a:	4628      	mov	r0, r5
 800456c:	f000 f926 	bl	80047bc <_fflush_r>
 8004570:	bb28      	cbnz	r0, 80045be <__swbuf_r+0x8e>
 8004572:	68a3      	ldr	r3, [r4, #8]
 8004574:	3001      	adds	r0, #1
 8004576:	3b01      	subs	r3, #1
 8004578:	60a3      	str	r3, [r4, #8]
 800457a:	6823      	ldr	r3, [r4, #0]
 800457c:	1c5a      	adds	r2, r3, #1
 800457e:	6022      	str	r2, [r4, #0]
 8004580:	701e      	strb	r6, [r3, #0]
 8004582:	6963      	ldr	r3, [r4, #20]
 8004584:	4283      	cmp	r3, r0
 8004586:	d004      	beq.n	8004592 <__swbuf_r+0x62>
 8004588:	89a3      	ldrh	r3, [r4, #12]
 800458a:	07db      	lsls	r3, r3, #31
 800458c:	d519      	bpl.n	80045c2 <__swbuf_r+0x92>
 800458e:	2e0a      	cmp	r6, #10
 8004590:	d117      	bne.n	80045c2 <__swbuf_r+0x92>
 8004592:	4621      	mov	r1, r4
 8004594:	4628      	mov	r0, r5
 8004596:	f000 f911 	bl	80047bc <_fflush_r>
 800459a:	b190      	cbz	r0, 80045c2 <__swbuf_r+0x92>
 800459c:	e00f      	b.n	80045be <__swbuf_r+0x8e>
 800459e:	4b0b      	ldr	r3, [pc, #44]	; (80045cc <__swbuf_r+0x9c>)
 80045a0:	429c      	cmp	r4, r3
 80045a2:	d101      	bne.n	80045a8 <__swbuf_r+0x78>
 80045a4:	68ac      	ldr	r4, [r5, #8]
 80045a6:	e7d0      	b.n	800454a <__swbuf_r+0x1a>
 80045a8:	4b09      	ldr	r3, [pc, #36]	; (80045d0 <__swbuf_r+0xa0>)
 80045aa:	429c      	cmp	r4, r3
 80045ac:	bf08      	it	eq
 80045ae:	68ec      	ldreq	r4, [r5, #12]
 80045b0:	e7cb      	b.n	800454a <__swbuf_r+0x1a>
 80045b2:	4621      	mov	r1, r4
 80045b4:	4628      	mov	r0, r5
 80045b6:	f000 f80d 	bl	80045d4 <__swsetup_r>
 80045ba:	2800      	cmp	r0, #0
 80045bc:	d0cc      	beq.n	8004558 <__swbuf_r+0x28>
 80045be:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80045c2:	4638      	mov	r0, r7
 80045c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045c6:	bf00      	nop
 80045c8:	08005c40 	.word	0x08005c40
 80045cc:	08005c60 	.word	0x08005c60
 80045d0:	08005c20 	.word	0x08005c20

080045d4 <__swsetup_r>:
 80045d4:	4b32      	ldr	r3, [pc, #200]	; (80046a0 <__swsetup_r+0xcc>)
 80045d6:	b570      	push	{r4, r5, r6, lr}
 80045d8:	681d      	ldr	r5, [r3, #0]
 80045da:	4606      	mov	r6, r0
 80045dc:	460c      	mov	r4, r1
 80045de:	b125      	cbz	r5, 80045ea <__swsetup_r+0x16>
 80045e0:	69ab      	ldr	r3, [r5, #24]
 80045e2:	b913      	cbnz	r3, 80045ea <__swsetup_r+0x16>
 80045e4:	4628      	mov	r0, r5
 80045e6:	f000 f965 	bl	80048b4 <__sinit>
 80045ea:	4b2e      	ldr	r3, [pc, #184]	; (80046a4 <__swsetup_r+0xd0>)
 80045ec:	429c      	cmp	r4, r3
 80045ee:	d10f      	bne.n	8004610 <__swsetup_r+0x3c>
 80045f0:	686c      	ldr	r4, [r5, #4]
 80045f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80045f6:	b29a      	uxth	r2, r3
 80045f8:	0715      	lsls	r5, r2, #28
 80045fa:	d42c      	bmi.n	8004656 <__swsetup_r+0x82>
 80045fc:	06d0      	lsls	r0, r2, #27
 80045fe:	d411      	bmi.n	8004624 <__swsetup_r+0x50>
 8004600:	2209      	movs	r2, #9
 8004602:	6032      	str	r2, [r6, #0]
 8004604:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004608:	81a3      	strh	r3, [r4, #12]
 800460a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800460e:	e03e      	b.n	800468e <__swsetup_r+0xba>
 8004610:	4b25      	ldr	r3, [pc, #148]	; (80046a8 <__swsetup_r+0xd4>)
 8004612:	429c      	cmp	r4, r3
 8004614:	d101      	bne.n	800461a <__swsetup_r+0x46>
 8004616:	68ac      	ldr	r4, [r5, #8]
 8004618:	e7eb      	b.n	80045f2 <__swsetup_r+0x1e>
 800461a:	4b24      	ldr	r3, [pc, #144]	; (80046ac <__swsetup_r+0xd8>)
 800461c:	429c      	cmp	r4, r3
 800461e:	bf08      	it	eq
 8004620:	68ec      	ldreq	r4, [r5, #12]
 8004622:	e7e6      	b.n	80045f2 <__swsetup_r+0x1e>
 8004624:	0751      	lsls	r1, r2, #29
 8004626:	d512      	bpl.n	800464e <__swsetup_r+0x7a>
 8004628:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800462a:	b141      	cbz	r1, 800463e <__swsetup_r+0x6a>
 800462c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004630:	4299      	cmp	r1, r3
 8004632:	d002      	beq.n	800463a <__swsetup_r+0x66>
 8004634:	4630      	mov	r0, r6
 8004636:	f000 fa73 	bl	8004b20 <_free_r>
 800463a:	2300      	movs	r3, #0
 800463c:	6363      	str	r3, [r4, #52]	; 0x34
 800463e:	89a3      	ldrh	r3, [r4, #12]
 8004640:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004644:	81a3      	strh	r3, [r4, #12]
 8004646:	2300      	movs	r3, #0
 8004648:	6063      	str	r3, [r4, #4]
 800464a:	6923      	ldr	r3, [r4, #16]
 800464c:	6023      	str	r3, [r4, #0]
 800464e:	89a3      	ldrh	r3, [r4, #12]
 8004650:	f043 0308 	orr.w	r3, r3, #8
 8004654:	81a3      	strh	r3, [r4, #12]
 8004656:	6923      	ldr	r3, [r4, #16]
 8004658:	b94b      	cbnz	r3, 800466e <__swsetup_r+0x9a>
 800465a:	89a3      	ldrh	r3, [r4, #12]
 800465c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004660:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004664:	d003      	beq.n	800466e <__swsetup_r+0x9a>
 8004666:	4621      	mov	r1, r4
 8004668:	4630      	mov	r0, r6
 800466a:	f000 fa19 	bl	8004aa0 <__smakebuf_r>
 800466e:	89a2      	ldrh	r2, [r4, #12]
 8004670:	f012 0301 	ands.w	r3, r2, #1
 8004674:	d00c      	beq.n	8004690 <__swsetup_r+0xbc>
 8004676:	2300      	movs	r3, #0
 8004678:	60a3      	str	r3, [r4, #8]
 800467a:	6963      	ldr	r3, [r4, #20]
 800467c:	425b      	negs	r3, r3
 800467e:	61a3      	str	r3, [r4, #24]
 8004680:	6923      	ldr	r3, [r4, #16]
 8004682:	b953      	cbnz	r3, 800469a <__swsetup_r+0xc6>
 8004684:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004688:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800468c:	d1ba      	bne.n	8004604 <__swsetup_r+0x30>
 800468e:	bd70      	pop	{r4, r5, r6, pc}
 8004690:	0792      	lsls	r2, r2, #30
 8004692:	bf58      	it	pl
 8004694:	6963      	ldrpl	r3, [r4, #20]
 8004696:	60a3      	str	r3, [r4, #8]
 8004698:	e7f2      	b.n	8004680 <__swsetup_r+0xac>
 800469a:	2000      	movs	r0, #0
 800469c:	e7f7      	b.n	800468e <__swsetup_r+0xba>
 800469e:	bf00      	nop
 80046a0:	2000000c 	.word	0x2000000c
 80046a4:	08005c40 	.word	0x08005c40
 80046a8:	08005c60 	.word	0x08005c60
 80046ac:	08005c20 	.word	0x08005c20

080046b0 <__sflush_r>:
 80046b0:	898a      	ldrh	r2, [r1, #12]
 80046b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046b6:	4605      	mov	r5, r0
 80046b8:	0710      	lsls	r0, r2, #28
 80046ba:	460c      	mov	r4, r1
 80046bc:	d458      	bmi.n	8004770 <__sflush_r+0xc0>
 80046be:	684b      	ldr	r3, [r1, #4]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	dc05      	bgt.n	80046d0 <__sflush_r+0x20>
 80046c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	dc02      	bgt.n	80046d0 <__sflush_r+0x20>
 80046ca:	2000      	movs	r0, #0
 80046cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80046d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80046d2:	2e00      	cmp	r6, #0
 80046d4:	d0f9      	beq.n	80046ca <__sflush_r+0x1a>
 80046d6:	2300      	movs	r3, #0
 80046d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80046dc:	682f      	ldr	r7, [r5, #0]
 80046de:	6a21      	ldr	r1, [r4, #32]
 80046e0:	602b      	str	r3, [r5, #0]
 80046e2:	d032      	beq.n	800474a <__sflush_r+0x9a>
 80046e4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80046e6:	89a3      	ldrh	r3, [r4, #12]
 80046e8:	075a      	lsls	r2, r3, #29
 80046ea:	d505      	bpl.n	80046f8 <__sflush_r+0x48>
 80046ec:	6863      	ldr	r3, [r4, #4]
 80046ee:	1ac0      	subs	r0, r0, r3
 80046f0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80046f2:	b10b      	cbz	r3, 80046f8 <__sflush_r+0x48>
 80046f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80046f6:	1ac0      	subs	r0, r0, r3
 80046f8:	2300      	movs	r3, #0
 80046fa:	4602      	mov	r2, r0
 80046fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80046fe:	6a21      	ldr	r1, [r4, #32]
 8004700:	4628      	mov	r0, r5
 8004702:	47b0      	blx	r6
 8004704:	1c43      	adds	r3, r0, #1
 8004706:	89a3      	ldrh	r3, [r4, #12]
 8004708:	d106      	bne.n	8004718 <__sflush_r+0x68>
 800470a:	6829      	ldr	r1, [r5, #0]
 800470c:	291d      	cmp	r1, #29
 800470e:	d848      	bhi.n	80047a2 <__sflush_r+0xf2>
 8004710:	4a29      	ldr	r2, [pc, #164]	; (80047b8 <__sflush_r+0x108>)
 8004712:	40ca      	lsrs	r2, r1
 8004714:	07d6      	lsls	r6, r2, #31
 8004716:	d544      	bpl.n	80047a2 <__sflush_r+0xf2>
 8004718:	2200      	movs	r2, #0
 800471a:	6062      	str	r2, [r4, #4]
 800471c:	6922      	ldr	r2, [r4, #16]
 800471e:	04d9      	lsls	r1, r3, #19
 8004720:	6022      	str	r2, [r4, #0]
 8004722:	d504      	bpl.n	800472e <__sflush_r+0x7e>
 8004724:	1c42      	adds	r2, r0, #1
 8004726:	d101      	bne.n	800472c <__sflush_r+0x7c>
 8004728:	682b      	ldr	r3, [r5, #0]
 800472a:	b903      	cbnz	r3, 800472e <__sflush_r+0x7e>
 800472c:	6560      	str	r0, [r4, #84]	; 0x54
 800472e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004730:	602f      	str	r7, [r5, #0]
 8004732:	2900      	cmp	r1, #0
 8004734:	d0c9      	beq.n	80046ca <__sflush_r+0x1a>
 8004736:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800473a:	4299      	cmp	r1, r3
 800473c:	d002      	beq.n	8004744 <__sflush_r+0x94>
 800473e:	4628      	mov	r0, r5
 8004740:	f000 f9ee 	bl	8004b20 <_free_r>
 8004744:	2000      	movs	r0, #0
 8004746:	6360      	str	r0, [r4, #52]	; 0x34
 8004748:	e7c0      	b.n	80046cc <__sflush_r+0x1c>
 800474a:	2301      	movs	r3, #1
 800474c:	4628      	mov	r0, r5
 800474e:	47b0      	blx	r6
 8004750:	1c41      	adds	r1, r0, #1
 8004752:	d1c8      	bne.n	80046e6 <__sflush_r+0x36>
 8004754:	682b      	ldr	r3, [r5, #0]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d0c5      	beq.n	80046e6 <__sflush_r+0x36>
 800475a:	2b1d      	cmp	r3, #29
 800475c:	d001      	beq.n	8004762 <__sflush_r+0xb2>
 800475e:	2b16      	cmp	r3, #22
 8004760:	d101      	bne.n	8004766 <__sflush_r+0xb6>
 8004762:	602f      	str	r7, [r5, #0]
 8004764:	e7b1      	b.n	80046ca <__sflush_r+0x1a>
 8004766:	89a3      	ldrh	r3, [r4, #12]
 8004768:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800476c:	81a3      	strh	r3, [r4, #12]
 800476e:	e7ad      	b.n	80046cc <__sflush_r+0x1c>
 8004770:	690f      	ldr	r7, [r1, #16]
 8004772:	2f00      	cmp	r7, #0
 8004774:	d0a9      	beq.n	80046ca <__sflush_r+0x1a>
 8004776:	0793      	lsls	r3, r2, #30
 8004778:	bf18      	it	ne
 800477a:	2300      	movne	r3, #0
 800477c:	680e      	ldr	r6, [r1, #0]
 800477e:	bf08      	it	eq
 8004780:	694b      	ldreq	r3, [r1, #20]
 8004782:	eba6 0807 	sub.w	r8, r6, r7
 8004786:	600f      	str	r7, [r1, #0]
 8004788:	608b      	str	r3, [r1, #8]
 800478a:	f1b8 0f00 	cmp.w	r8, #0
 800478e:	dd9c      	ble.n	80046ca <__sflush_r+0x1a>
 8004790:	4643      	mov	r3, r8
 8004792:	463a      	mov	r2, r7
 8004794:	6a21      	ldr	r1, [r4, #32]
 8004796:	4628      	mov	r0, r5
 8004798:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800479a:	47b0      	blx	r6
 800479c:	2800      	cmp	r0, #0
 800479e:	dc06      	bgt.n	80047ae <__sflush_r+0xfe>
 80047a0:	89a3      	ldrh	r3, [r4, #12]
 80047a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047a6:	81a3      	strh	r3, [r4, #12]
 80047a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80047ac:	e78e      	b.n	80046cc <__sflush_r+0x1c>
 80047ae:	4407      	add	r7, r0
 80047b0:	eba8 0800 	sub.w	r8, r8, r0
 80047b4:	e7e9      	b.n	800478a <__sflush_r+0xda>
 80047b6:	bf00      	nop
 80047b8:	20400001 	.word	0x20400001

080047bc <_fflush_r>:
 80047bc:	b538      	push	{r3, r4, r5, lr}
 80047be:	690b      	ldr	r3, [r1, #16]
 80047c0:	4605      	mov	r5, r0
 80047c2:	460c      	mov	r4, r1
 80047c4:	b1db      	cbz	r3, 80047fe <_fflush_r+0x42>
 80047c6:	b118      	cbz	r0, 80047d0 <_fflush_r+0x14>
 80047c8:	6983      	ldr	r3, [r0, #24]
 80047ca:	b90b      	cbnz	r3, 80047d0 <_fflush_r+0x14>
 80047cc:	f000 f872 	bl	80048b4 <__sinit>
 80047d0:	4b0c      	ldr	r3, [pc, #48]	; (8004804 <_fflush_r+0x48>)
 80047d2:	429c      	cmp	r4, r3
 80047d4:	d109      	bne.n	80047ea <_fflush_r+0x2e>
 80047d6:	686c      	ldr	r4, [r5, #4]
 80047d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80047dc:	b17b      	cbz	r3, 80047fe <_fflush_r+0x42>
 80047de:	4621      	mov	r1, r4
 80047e0:	4628      	mov	r0, r5
 80047e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80047e6:	f7ff bf63 	b.w	80046b0 <__sflush_r>
 80047ea:	4b07      	ldr	r3, [pc, #28]	; (8004808 <_fflush_r+0x4c>)
 80047ec:	429c      	cmp	r4, r3
 80047ee:	d101      	bne.n	80047f4 <_fflush_r+0x38>
 80047f0:	68ac      	ldr	r4, [r5, #8]
 80047f2:	e7f1      	b.n	80047d8 <_fflush_r+0x1c>
 80047f4:	4b05      	ldr	r3, [pc, #20]	; (800480c <_fflush_r+0x50>)
 80047f6:	429c      	cmp	r4, r3
 80047f8:	bf08      	it	eq
 80047fa:	68ec      	ldreq	r4, [r5, #12]
 80047fc:	e7ec      	b.n	80047d8 <_fflush_r+0x1c>
 80047fe:	2000      	movs	r0, #0
 8004800:	bd38      	pop	{r3, r4, r5, pc}
 8004802:	bf00      	nop
 8004804:	08005c40 	.word	0x08005c40
 8004808:	08005c60 	.word	0x08005c60
 800480c:	08005c20 	.word	0x08005c20

08004810 <fflush>:
 8004810:	4601      	mov	r1, r0
 8004812:	b920      	cbnz	r0, 800481e <fflush+0xe>
 8004814:	4b04      	ldr	r3, [pc, #16]	; (8004828 <fflush+0x18>)
 8004816:	4905      	ldr	r1, [pc, #20]	; (800482c <fflush+0x1c>)
 8004818:	6818      	ldr	r0, [r3, #0]
 800481a:	f000 b8d3 	b.w	80049c4 <_fwalk_reent>
 800481e:	4b04      	ldr	r3, [pc, #16]	; (8004830 <fflush+0x20>)
 8004820:	6818      	ldr	r0, [r3, #0]
 8004822:	f7ff bfcb 	b.w	80047bc <_fflush_r>
 8004826:	bf00      	nop
 8004828:	08005c1c 	.word	0x08005c1c
 800482c:	080047bd 	.word	0x080047bd
 8004830:	2000000c 	.word	0x2000000c

08004834 <std>:
 8004834:	2300      	movs	r3, #0
 8004836:	b510      	push	{r4, lr}
 8004838:	4604      	mov	r4, r0
 800483a:	e9c0 3300 	strd	r3, r3, [r0]
 800483e:	6083      	str	r3, [r0, #8]
 8004840:	8181      	strh	r1, [r0, #12]
 8004842:	6643      	str	r3, [r0, #100]	; 0x64
 8004844:	81c2      	strh	r2, [r0, #14]
 8004846:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800484a:	6183      	str	r3, [r0, #24]
 800484c:	4619      	mov	r1, r3
 800484e:	2208      	movs	r2, #8
 8004850:	305c      	adds	r0, #92	; 0x5c
 8004852:	f7ff fde8 	bl	8004426 <memset>
 8004856:	4b05      	ldr	r3, [pc, #20]	; (800486c <std+0x38>)
 8004858:	6224      	str	r4, [r4, #32]
 800485a:	6263      	str	r3, [r4, #36]	; 0x24
 800485c:	4b04      	ldr	r3, [pc, #16]	; (8004870 <std+0x3c>)
 800485e:	62a3      	str	r3, [r4, #40]	; 0x28
 8004860:	4b04      	ldr	r3, [pc, #16]	; (8004874 <std+0x40>)
 8004862:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004864:	4b04      	ldr	r3, [pc, #16]	; (8004878 <std+0x44>)
 8004866:	6323      	str	r3, [r4, #48]	; 0x30
 8004868:	bd10      	pop	{r4, pc}
 800486a:	bf00      	nop
 800486c:	08005271 	.word	0x08005271
 8004870:	08005293 	.word	0x08005293
 8004874:	080052cb 	.word	0x080052cb
 8004878:	080052ef 	.word	0x080052ef

0800487c <_cleanup_r>:
 800487c:	4901      	ldr	r1, [pc, #4]	; (8004884 <_cleanup_r+0x8>)
 800487e:	f000 b8a1 	b.w	80049c4 <_fwalk_reent>
 8004882:	bf00      	nop
 8004884:	080047bd 	.word	0x080047bd

08004888 <__sfmoreglue>:
 8004888:	b570      	push	{r4, r5, r6, lr}
 800488a:	2568      	movs	r5, #104	; 0x68
 800488c:	1e4a      	subs	r2, r1, #1
 800488e:	4355      	muls	r5, r2
 8004890:	460e      	mov	r6, r1
 8004892:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004896:	f000 f98f 	bl	8004bb8 <_malloc_r>
 800489a:	4604      	mov	r4, r0
 800489c:	b140      	cbz	r0, 80048b0 <__sfmoreglue+0x28>
 800489e:	2100      	movs	r1, #0
 80048a0:	e9c0 1600 	strd	r1, r6, [r0]
 80048a4:	300c      	adds	r0, #12
 80048a6:	60a0      	str	r0, [r4, #8]
 80048a8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80048ac:	f7ff fdbb 	bl	8004426 <memset>
 80048b0:	4620      	mov	r0, r4
 80048b2:	bd70      	pop	{r4, r5, r6, pc}

080048b4 <__sinit>:
 80048b4:	6983      	ldr	r3, [r0, #24]
 80048b6:	b510      	push	{r4, lr}
 80048b8:	4604      	mov	r4, r0
 80048ba:	bb33      	cbnz	r3, 800490a <__sinit+0x56>
 80048bc:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80048c0:	6503      	str	r3, [r0, #80]	; 0x50
 80048c2:	4b12      	ldr	r3, [pc, #72]	; (800490c <__sinit+0x58>)
 80048c4:	4a12      	ldr	r2, [pc, #72]	; (8004910 <__sinit+0x5c>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	6282      	str	r2, [r0, #40]	; 0x28
 80048ca:	4298      	cmp	r0, r3
 80048cc:	bf04      	itt	eq
 80048ce:	2301      	moveq	r3, #1
 80048d0:	6183      	streq	r3, [r0, #24]
 80048d2:	f000 f81f 	bl	8004914 <__sfp>
 80048d6:	6060      	str	r0, [r4, #4]
 80048d8:	4620      	mov	r0, r4
 80048da:	f000 f81b 	bl	8004914 <__sfp>
 80048de:	60a0      	str	r0, [r4, #8]
 80048e0:	4620      	mov	r0, r4
 80048e2:	f000 f817 	bl	8004914 <__sfp>
 80048e6:	2200      	movs	r2, #0
 80048e8:	60e0      	str	r0, [r4, #12]
 80048ea:	2104      	movs	r1, #4
 80048ec:	6860      	ldr	r0, [r4, #4]
 80048ee:	f7ff ffa1 	bl	8004834 <std>
 80048f2:	2201      	movs	r2, #1
 80048f4:	2109      	movs	r1, #9
 80048f6:	68a0      	ldr	r0, [r4, #8]
 80048f8:	f7ff ff9c 	bl	8004834 <std>
 80048fc:	2202      	movs	r2, #2
 80048fe:	2112      	movs	r1, #18
 8004900:	68e0      	ldr	r0, [r4, #12]
 8004902:	f7ff ff97 	bl	8004834 <std>
 8004906:	2301      	movs	r3, #1
 8004908:	61a3      	str	r3, [r4, #24]
 800490a:	bd10      	pop	{r4, pc}
 800490c:	08005c1c 	.word	0x08005c1c
 8004910:	0800487d 	.word	0x0800487d

08004914 <__sfp>:
 8004914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004916:	4b1b      	ldr	r3, [pc, #108]	; (8004984 <__sfp+0x70>)
 8004918:	4607      	mov	r7, r0
 800491a:	681e      	ldr	r6, [r3, #0]
 800491c:	69b3      	ldr	r3, [r6, #24]
 800491e:	b913      	cbnz	r3, 8004926 <__sfp+0x12>
 8004920:	4630      	mov	r0, r6
 8004922:	f7ff ffc7 	bl	80048b4 <__sinit>
 8004926:	3648      	adds	r6, #72	; 0x48
 8004928:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800492c:	3b01      	subs	r3, #1
 800492e:	d503      	bpl.n	8004938 <__sfp+0x24>
 8004930:	6833      	ldr	r3, [r6, #0]
 8004932:	b133      	cbz	r3, 8004942 <__sfp+0x2e>
 8004934:	6836      	ldr	r6, [r6, #0]
 8004936:	e7f7      	b.n	8004928 <__sfp+0x14>
 8004938:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800493c:	b16d      	cbz	r5, 800495a <__sfp+0x46>
 800493e:	3468      	adds	r4, #104	; 0x68
 8004940:	e7f4      	b.n	800492c <__sfp+0x18>
 8004942:	2104      	movs	r1, #4
 8004944:	4638      	mov	r0, r7
 8004946:	f7ff ff9f 	bl	8004888 <__sfmoreglue>
 800494a:	6030      	str	r0, [r6, #0]
 800494c:	2800      	cmp	r0, #0
 800494e:	d1f1      	bne.n	8004934 <__sfp+0x20>
 8004950:	230c      	movs	r3, #12
 8004952:	4604      	mov	r4, r0
 8004954:	603b      	str	r3, [r7, #0]
 8004956:	4620      	mov	r0, r4
 8004958:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800495a:	4b0b      	ldr	r3, [pc, #44]	; (8004988 <__sfp+0x74>)
 800495c:	6665      	str	r5, [r4, #100]	; 0x64
 800495e:	e9c4 5500 	strd	r5, r5, [r4]
 8004962:	60a5      	str	r5, [r4, #8]
 8004964:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8004968:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800496c:	2208      	movs	r2, #8
 800496e:	4629      	mov	r1, r5
 8004970:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004974:	f7ff fd57 	bl	8004426 <memset>
 8004978:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800497c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004980:	e7e9      	b.n	8004956 <__sfp+0x42>
 8004982:	bf00      	nop
 8004984:	08005c1c 	.word	0x08005c1c
 8004988:	ffff0001 	.word	0xffff0001

0800498c <_fwalk>:
 800498c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004990:	4688      	mov	r8, r1
 8004992:	2600      	movs	r6, #0
 8004994:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004998:	b914      	cbnz	r4, 80049a0 <_fwalk+0x14>
 800499a:	4630      	mov	r0, r6
 800499c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80049a0:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80049a4:	3f01      	subs	r7, #1
 80049a6:	d501      	bpl.n	80049ac <_fwalk+0x20>
 80049a8:	6824      	ldr	r4, [r4, #0]
 80049aa:	e7f5      	b.n	8004998 <_fwalk+0xc>
 80049ac:	89ab      	ldrh	r3, [r5, #12]
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	d906      	bls.n	80049c0 <_fwalk+0x34>
 80049b2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80049b6:	3301      	adds	r3, #1
 80049b8:	d002      	beq.n	80049c0 <_fwalk+0x34>
 80049ba:	4628      	mov	r0, r5
 80049bc:	47c0      	blx	r8
 80049be:	4306      	orrs	r6, r0
 80049c0:	3568      	adds	r5, #104	; 0x68
 80049c2:	e7ef      	b.n	80049a4 <_fwalk+0x18>

080049c4 <_fwalk_reent>:
 80049c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80049c8:	4680      	mov	r8, r0
 80049ca:	4689      	mov	r9, r1
 80049cc:	2600      	movs	r6, #0
 80049ce:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80049d2:	b914      	cbnz	r4, 80049da <_fwalk_reent+0x16>
 80049d4:	4630      	mov	r0, r6
 80049d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80049da:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80049de:	3f01      	subs	r7, #1
 80049e0:	d501      	bpl.n	80049e6 <_fwalk_reent+0x22>
 80049e2:	6824      	ldr	r4, [r4, #0]
 80049e4:	e7f5      	b.n	80049d2 <_fwalk_reent+0xe>
 80049e6:	89ab      	ldrh	r3, [r5, #12]
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d907      	bls.n	80049fc <_fwalk_reent+0x38>
 80049ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80049f0:	3301      	adds	r3, #1
 80049f2:	d003      	beq.n	80049fc <_fwalk_reent+0x38>
 80049f4:	4629      	mov	r1, r5
 80049f6:	4640      	mov	r0, r8
 80049f8:	47c8      	blx	r9
 80049fa:	4306      	orrs	r6, r0
 80049fc:	3568      	adds	r5, #104	; 0x68
 80049fe:	e7ee      	b.n	80049de <_fwalk_reent+0x1a>

08004a00 <_getc_r>:
 8004a00:	b538      	push	{r3, r4, r5, lr}
 8004a02:	460c      	mov	r4, r1
 8004a04:	4605      	mov	r5, r0
 8004a06:	b118      	cbz	r0, 8004a10 <_getc_r+0x10>
 8004a08:	6983      	ldr	r3, [r0, #24]
 8004a0a:	b90b      	cbnz	r3, 8004a10 <_getc_r+0x10>
 8004a0c:	f7ff ff52 	bl	80048b4 <__sinit>
 8004a10:	4b0e      	ldr	r3, [pc, #56]	; (8004a4c <_getc_r+0x4c>)
 8004a12:	429c      	cmp	r4, r3
 8004a14:	d10b      	bne.n	8004a2e <_getc_r+0x2e>
 8004a16:	686c      	ldr	r4, [r5, #4]
 8004a18:	6863      	ldr	r3, [r4, #4]
 8004a1a:	3b01      	subs	r3, #1
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	6063      	str	r3, [r4, #4]
 8004a20:	da0f      	bge.n	8004a42 <_getc_r+0x42>
 8004a22:	4621      	mov	r1, r4
 8004a24:	4628      	mov	r0, r5
 8004a26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004a2a:	f000 bbe5 	b.w	80051f8 <__srget_r>
 8004a2e:	4b08      	ldr	r3, [pc, #32]	; (8004a50 <_getc_r+0x50>)
 8004a30:	429c      	cmp	r4, r3
 8004a32:	d101      	bne.n	8004a38 <_getc_r+0x38>
 8004a34:	68ac      	ldr	r4, [r5, #8]
 8004a36:	e7ef      	b.n	8004a18 <_getc_r+0x18>
 8004a38:	4b06      	ldr	r3, [pc, #24]	; (8004a54 <_getc_r+0x54>)
 8004a3a:	429c      	cmp	r4, r3
 8004a3c:	bf08      	it	eq
 8004a3e:	68ec      	ldreq	r4, [r5, #12]
 8004a40:	e7ea      	b.n	8004a18 <_getc_r+0x18>
 8004a42:	6823      	ldr	r3, [r4, #0]
 8004a44:	1c5a      	adds	r2, r3, #1
 8004a46:	6022      	str	r2, [r4, #0]
 8004a48:	7818      	ldrb	r0, [r3, #0]
 8004a4a:	bd38      	pop	{r3, r4, r5, pc}
 8004a4c:	08005c40 	.word	0x08005c40
 8004a50:	08005c60 	.word	0x08005c60
 8004a54:	08005c20 	.word	0x08005c20

08004a58 <__swhatbuf_r>:
 8004a58:	b570      	push	{r4, r5, r6, lr}
 8004a5a:	460e      	mov	r6, r1
 8004a5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a60:	b096      	sub	sp, #88	; 0x58
 8004a62:	2900      	cmp	r1, #0
 8004a64:	4614      	mov	r4, r2
 8004a66:	461d      	mov	r5, r3
 8004a68:	da07      	bge.n	8004a7a <__swhatbuf_r+0x22>
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	602b      	str	r3, [r5, #0]
 8004a6e:	89b3      	ldrh	r3, [r6, #12]
 8004a70:	061a      	lsls	r2, r3, #24
 8004a72:	d410      	bmi.n	8004a96 <__swhatbuf_r+0x3e>
 8004a74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a78:	e00e      	b.n	8004a98 <__swhatbuf_r+0x40>
 8004a7a:	466a      	mov	r2, sp
 8004a7c:	f000 fc5e 	bl	800533c <_fstat_r>
 8004a80:	2800      	cmp	r0, #0
 8004a82:	dbf2      	blt.n	8004a6a <__swhatbuf_r+0x12>
 8004a84:	9a01      	ldr	r2, [sp, #4]
 8004a86:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004a8a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004a8e:	425a      	negs	r2, r3
 8004a90:	415a      	adcs	r2, r3
 8004a92:	602a      	str	r2, [r5, #0]
 8004a94:	e7ee      	b.n	8004a74 <__swhatbuf_r+0x1c>
 8004a96:	2340      	movs	r3, #64	; 0x40
 8004a98:	2000      	movs	r0, #0
 8004a9a:	6023      	str	r3, [r4, #0]
 8004a9c:	b016      	add	sp, #88	; 0x58
 8004a9e:	bd70      	pop	{r4, r5, r6, pc}

08004aa0 <__smakebuf_r>:
 8004aa0:	898b      	ldrh	r3, [r1, #12]
 8004aa2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004aa4:	079d      	lsls	r5, r3, #30
 8004aa6:	4606      	mov	r6, r0
 8004aa8:	460c      	mov	r4, r1
 8004aaa:	d507      	bpl.n	8004abc <__smakebuf_r+0x1c>
 8004aac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004ab0:	6023      	str	r3, [r4, #0]
 8004ab2:	6123      	str	r3, [r4, #16]
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	6163      	str	r3, [r4, #20]
 8004ab8:	b002      	add	sp, #8
 8004aba:	bd70      	pop	{r4, r5, r6, pc}
 8004abc:	ab01      	add	r3, sp, #4
 8004abe:	466a      	mov	r2, sp
 8004ac0:	f7ff ffca 	bl	8004a58 <__swhatbuf_r>
 8004ac4:	9900      	ldr	r1, [sp, #0]
 8004ac6:	4605      	mov	r5, r0
 8004ac8:	4630      	mov	r0, r6
 8004aca:	f000 f875 	bl	8004bb8 <_malloc_r>
 8004ace:	b948      	cbnz	r0, 8004ae4 <__smakebuf_r+0x44>
 8004ad0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ad4:	059a      	lsls	r2, r3, #22
 8004ad6:	d4ef      	bmi.n	8004ab8 <__smakebuf_r+0x18>
 8004ad8:	f023 0303 	bic.w	r3, r3, #3
 8004adc:	f043 0302 	orr.w	r3, r3, #2
 8004ae0:	81a3      	strh	r3, [r4, #12]
 8004ae2:	e7e3      	b.n	8004aac <__smakebuf_r+0xc>
 8004ae4:	4b0d      	ldr	r3, [pc, #52]	; (8004b1c <__smakebuf_r+0x7c>)
 8004ae6:	62b3      	str	r3, [r6, #40]	; 0x28
 8004ae8:	89a3      	ldrh	r3, [r4, #12]
 8004aea:	6020      	str	r0, [r4, #0]
 8004aec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004af0:	81a3      	strh	r3, [r4, #12]
 8004af2:	9b00      	ldr	r3, [sp, #0]
 8004af4:	6120      	str	r0, [r4, #16]
 8004af6:	6163      	str	r3, [r4, #20]
 8004af8:	9b01      	ldr	r3, [sp, #4]
 8004afa:	b15b      	cbz	r3, 8004b14 <__smakebuf_r+0x74>
 8004afc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004b00:	4630      	mov	r0, r6
 8004b02:	f000 fc2d 	bl	8005360 <_isatty_r>
 8004b06:	b128      	cbz	r0, 8004b14 <__smakebuf_r+0x74>
 8004b08:	89a3      	ldrh	r3, [r4, #12]
 8004b0a:	f023 0303 	bic.w	r3, r3, #3
 8004b0e:	f043 0301 	orr.w	r3, r3, #1
 8004b12:	81a3      	strh	r3, [r4, #12]
 8004b14:	89a3      	ldrh	r3, [r4, #12]
 8004b16:	431d      	orrs	r5, r3
 8004b18:	81a5      	strh	r5, [r4, #12]
 8004b1a:	e7cd      	b.n	8004ab8 <__smakebuf_r+0x18>
 8004b1c:	0800487d 	.word	0x0800487d

08004b20 <_free_r>:
 8004b20:	b538      	push	{r3, r4, r5, lr}
 8004b22:	4605      	mov	r5, r0
 8004b24:	2900      	cmp	r1, #0
 8004b26:	d043      	beq.n	8004bb0 <_free_r+0x90>
 8004b28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b2c:	1f0c      	subs	r4, r1, #4
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	bfb8      	it	lt
 8004b32:	18e4      	addlt	r4, r4, r3
 8004b34:	f000 fc44 	bl	80053c0 <__malloc_lock>
 8004b38:	4a1e      	ldr	r2, [pc, #120]	; (8004bb4 <_free_r+0x94>)
 8004b3a:	6813      	ldr	r3, [r2, #0]
 8004b3c:	4610      	mov	r0, r2
 8004b3e:	b933      	cbnz	r3, 8004b4e <_free_r+0x2e>
 8004b40:	6063      	str	r3, [r4, #4]
 8004b42:	6014      	str	r4, [r2, #0]
 8004b44:	4628      	mov	r0, r5
 8004b46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004b4a:	f000 bc3a 	b.w	80053c2 <__malloc_unlock>
 8004b4e:	42a3      	cmp	r3, r4
 8004b50:	d90b      	bls.n	8004b6a <_free_r+0x4a>
 8004b52:	6821      	ldr	r1, [r4, #0]
 8004b54:	1862      	adds	r2, r4, r1
 8004b56:	4293      	cmp	r3, r2
 8004b58:	bf01      	itttt	eq
 8004b5a:	681a      	ldreq	r2, [r3, #0]
 8004b5c:	685b      	ldreq	r3, [r3, #4]
 8004b5e:	1852      	addeq	r2, r2, r1
 8004b60:	6022      	streq	r2, [r4, #0]
 8004b62:	6063      	str	r3, [r4, #4]
 8004b64:	6004      	str	r4, [r0, #0]
 8004b66:	e7ed      	b.n	8004b44 <_free_r+0x24>
 8004b68:	4613      	mov	r3, r2
 8004b6a:	685a      	ldr	r2, [r3, #4]
 8004b6c:	b10a      	cbz	r2, 8004b72 <_free_r+0x52>
 8004b6e:	42a2      	cmp	r2, r4
 8004b70:	d9fa      	bls.n	8004b68 <_free_r+0x48>
 8004b72:	6819      	ldr	r1, [r3, #0]
 8004b74:	1858      	adds	r0, r3, r1
 8004b76:	42a0      	cmp	r0, r4
 8004b78:	d10b      	bne.n	8004b92 <_free_r+0x72>
 8004b7a:	6820      	ldr	r0, [r4, #0]
 8004b7c:	4401      	add	r1, r0
 8004b7e:	1858      	adds	r0, r3, r1
 8004b80:	4282      	cmp	r2, r0
 8004b82:	6019      	str	r1, [r3, #0]
 8004b84:	d1de      	bne.n	8004b44 <_free_r+0x24>
 8004b86:	6810      	ldr	r0, [r2, #0]
 8004b88:	6852      	ldr	r2, [r2, #4]
 8004b8a:	4401      	add	r1, r0
 8004b8c:	6019      	str	r1, [r3, #0]
 8004b8e:	605a      	str	r2, [r3, #4]
 8004b90:	e7d8      	b.n	8004b44 <_free_r+0x24>
 8004b92:	d902      	bls.n	8004b9a <_free_r+0x7a>
 8004b94:	230c      	movs	r3, #12
 8004b96:	602b      	str	r3, [r5, #0]
 8004b98:	e7d4      	b.n	8004b44 <_free_r+0x24>
 8004b9a:	6820      	ldr	r0, [r4, #0]
 8004b9c:	1821      	adds	r1, r4, r0
 8004b9e:	428a      	cmp	r2, r1
 8004ba0:	bf01      	itttt	eq
 8004ba2:	6811      	ldreq	r1, [r2, #0]
 8004ba4:	6852      	ldreq	r2, [r2, #4]
 8004ba6:	1809      	addeq	r1, r1, r0
 8004ba8:	6021      	streq	r1, [r4, #0]
 8004baa:	6062      	str	r2, [r4, #4]
 8004bac:	605c      	str	r4, [r3, #4]
 8004bae:	e7c9      	b.n	8004b44 <_free_r+0x24>
 8004bb0:	bd38      	pop	{r3, r4, r5, pc}
 8004bb2:	bf00      	nop
 8004bb4:	200000f0 	.word	0x200000f0

08004bb8 <_malloc_r>:
 8004bb8:	b570      	push	{r4, r5, r6, lr}
 8004bba:	1ccd      	adds	r5, r1, #3
 8004bbc:	f025 0503 	bic.w	r5, r5, #3
 8004bc0:	3508      	adds	r5, #8
 8004bc2:	2d0c      	cmp	r5, #12
 8004bc4:	bf38      	it	cc
 8004bc6:	250c      	movcc	r5, #12
 8004bc8:	2d00      	cmp	r5, #0
 8004bca:	4606      	mov	r6, r0
 8004bcc:	db01      	blt.n	8004bd2 <_malloc_r+0x1a>
 8004bce:	42a9      	cmp	r1, r5
 8004bd0:	d903      	bls.n	8004bda <_malloc_r+0x22>
 8004bd2:	230c      	movs	r3, #12
 8004bd4:	6033      	str	r3, [r6, #0]
 8004bd6:	2000      	movs	r0, #0
 8004bd8:	bd70      	pop	{r4, r5, r6, pc}
 8004bda:	f000 fbf1 	bl	80053c0 <__malloc_lock>
 8004bde:	4a21      	ldr	r2, [pc, #132]	; (8004c64 <_malloc_r+0xac>)
 8004be0:	6814      	ldr	r4, [r2, #0]
 8004be2:	4621      	mov	r1, r4
 8004be4:	b991      	cbnz	r1, 8004c0c <_malloc_r+0x54>
 8004be6:	4c20      	ldr	r4, [pc, #128]	; (8004c68 <_malloc_r+0xb0>)
 8004be8:	6823      	ldr	r3, [r4, #0]
 8004bea:	b91b      	cbnz	r3, 8004bf4 <_malloc_r+0x3c>
 8004bec:	4630      	mov	r0, r6
 8004bee:	f000 fb2f 	bl	8005250 <_sbrk_r>
 8004bf2:	6020      	str	r0, [r4, #0]
 8004bf4:	4629      	mov	r1, r5
 8004bf6:	4630      	mov	r0, r6
 8004bf8:	f000 fb2a 	bl	8005250 <_sbrk_r>
 8004bfc:	1c43      	adds	r3, r0, #1
 8004bfe:	d124      	bne.n	8004c4a <_malloc_r+0x92>
 8004c00:	230c      	movs	r3, #12
 8004c02:	4630      	mov	r0, r6
 8004c04:	6033      	str	r3, [r6, #0]
 8004c06:	f000 fbdc 	bl	80053c2 <__malloc_unlock>
 8004c0a:	e7e4      	b.n	8004bd6 <_malloc_r+0x1e>
 8004c0c:	680b      	ldr	r3, [r1, #0]
 8004c0e:	1b5b      	subs	r3, r3, r5
 8004c10:	d418      	bmi.n	8004c44 <_malloc_r+0x8c>
 8004c12:	2b0b      	cmp	r3, #11
 8004c14:	d90f      	bls.n	8004c36 <_malloc_r+0x7e>
 8004c16:	600b      	str	r3, [r1, #0]
 8004c18:	18cc      	adds	r4, r1, r3
 8004c1a:	50cd      	str	r5, [r1, r3]
 8004c1c:	4630      	mov	r0, r6
 8004c1e:	f000 fbd0 	bl	80053c2 <__malloc_unlock>
 8004c22:	f104 000b 	add.w	r0, r4, #11
 8004c26:	1d23      	adds	r3, r4, #4
 8004c28:	f020 0007 	bic.w	r0, r0, #7
 8004c2c:	1ac3      	subs	r3, r0, r3
 8004c2e:	d0d3      	beq.n	8004bd8 <_malloc_r+0x20>
 8004c30:	425a      	negs	r2, r3
 8004c32:	50e2      	str	r2, [r4, r3]
 8004c34:	e7d0      	b.n	8004bd8 <_malloc_r+0x20>
 8004c36:	684b      	ldr	r3, [r1, #4]
 8004c38:	428c      	cmp	r4, r1
 8004c3a:	bf16      	itet	ne
 8004c3c:	6063      	strne	r3, [r4, #4]
 8004c3e:	6013      	streq	r3, [r2, #0]
 8004c40:	460c      	movne	r4, r1
 8004c42:	e7eb      	b.n	8004c1c <_malloc_r+0x64>
 8004c44:	460c      	mov	r4, r1
 8004c46:	6849      	ldr	r1, [r1, #4]
 8004c48:	e7cc      	b.n	8004be4 <_malloc_r+0x2c>
 8004c4a:	1cc4      	adds	r4, r0, #3
 8004c4c:	f024 0403 	bic.w	r4, r4, #3
 8004c50:	42a0      	cmp	r0, r4
 8004c52:	d005      	beq.n	8004c60 <_malloc_r+0xa8>
 8004c54:	1a21      	subs	r1, r4, r0
 8004c56:	4630      	mov	r0, r6
 8004c58:	f000 fafa 	bl	8005250 <_sbrk_r>
 8004c5c:	3001      	adds	r0, #1
 8004c5e:	d0cf      	beq.n	8004c00 <_malloc_r+0x48>
 8004c60:	6025      	str	r5, [r4, #0]
 8004c62:	e7db      	b.n	8004c1c <_malloc_r+0x64>
 8004c64:	200000f0 	.word	0x200000f0
 8004c68:	200000f4 	.word	0x200000f4

08004c6c <__sfputc_r>:
 8004c6c:	6893      	ldr	r3, [r2, #8]
 8004c6e:	b410      	push	{r4}
 8004c70:	3b01      	subs	r3, #1
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	6093      	str	r3, [r2, #8]
 8004c76:	da07      	bge.n	8004c88 <__sfputc_r+0x1c>
 8004c78:	6994      	ldr	r4, [r2, #24]
 8004c7a:	42a3      	cmp	r3, r4
 8004c7c:	db01      	blt.n	8004c82 <__sfputc_r+0x16>
 8004c7e:	290a      	cmp	r1, #10
 8004c80:	d102      	bne.n	8004c88 <__sfputc_r+0x1c>
 8004c82:	bc10      	pop	{r4}
 8004c84:	f7ff bc54 	b.w	8004530 <__swbuf_r>
 8004c88:	6813      	ldr	r3, [r2, #0]
 8004c8a:	1c58      	adds	r0, r3, #1
 8004c8c:	6010      	str	r0, [r2, #0]
 8004c8e:	7019      	strb	r1, [r3, #0]
 8004c90:	4608      	mov	r0, r1
 8004c92:	bc10      	pop	{r4}
 8004c94:	4770      	bx	lr

08004c96 <__sfputs_r>:
 8004c96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c98:	4606      	mov	r6, r0
 8004c9a:	460f      	mov	r7, r1
 8004c9c:	4614      	mov	r4, r2
 8004c9e:	18d5      	adds	r5, r2, r3
 8004ca0:	42ac      	cmp	r4, r5
 8004ca2:	d101      	bne.n	8004ca8 <__sfputs_r+0x12>
 8004ca4:	2000      	movs	r0, #0
 8004ca6:	e007      	b.n	8004cb8 <__sfputs_r+0x22>
 8004ca8:	463a      	mov	r2, r7
 8004caa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004cae:	4630      	mov	r0, r6
 8004cb0:	f7ff ffdc 	bl	8004c6c <__sfputc_r>
 8004cb4:	1c43      	adds	r3, r0, #1
 8004cb6:	d1f3      	bne.n	8004ca0 <__sfputs_r+0xa>
 8004cb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004cbc <_vfiprintf_r>:
 8004cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cc0:	460c      	mov	r4, r1
 8004cc2:	b09d      	sub	sp, #116	; 0x74
 8004cc4:	4617      	mov	r7, r2
 8004cc6:	461d      	mov	r5, r3
 8004cc8:	4606      	mov	r6, r0
 8004cca:	b118      	cbz	r0, 8004cd4 <_vfiprintf_r+0x18>
 8004ccc:	6983      	ldr	r3, [r0, #24]
 8004cce:	b90b      	cbnz	r3, 8004cd4 <_vfiprintf_r+0x18>
 8004cd0:	f7ff fdf0 	bl	80048b4 <__sinit>
 8004cd4:	4b7c      	ldr	r3, [pc, #496]	; (8004ec8 <_vfiprintf_r+0x20c>)
 8004cd6:	429c      	cmp	r4, r3
 8004cd8:	d158      	bne.n	8004d8c <_vfiprintf_r+0xd0>
 8004cda:	6874      	ldr	r4, [r6, #4]
 8004cdc:	89a3      	ldrh	r3, [r4, #12]
 8004cde:	0718      	lsls	r0, r3, #28
 8004ce0:	d55e      	bpl.n	8004da0 <_vfiprintf_r+0xe4>
 8004ce2:	6923      	ldr	r3, [r4, #16]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d05b      	beq.n	8004da0 <_vfiprintf_r+0xe4>
 8004ce8:	2300      	movs	r3, #0
 8004cea:	9309      	str	r3, [sp, #36]	; 0x24
 8004cec:	2320      	movs	r3, #32
 8004cee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004cf2:	2330      	movs	r3, #48	; 0x30
 8004cf4:	f04f 0b01 	mov.w	fp, #1
 8004cf8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004cfc:	9503      	str	r5, [sp, #12]
 8004cfe:	46b8      	mov	r8, r7
 8004d00:	4645      	mov	r5, r8
 8004d02:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004d06:	b10b      	cbz	r3, 8004d0c <_vfiprintf_r+0x50>
 8004d08:	2b25      	cmp	r3, #37	; 0x25
 8004d0a:	d154      	bne.n	8004db6 <_vfiprintf_r+0xfa>
 8004d0c:	ebb8 0a07 	subs.w	sl, r8, r7
 8004d10:	d00b      	beq.n	8004d2a <_vfiprintf_r+0x6e>
 8004d12:	4653      	mov	r3, sl
 8004d14:	463a      	mov	r2, r7
 8004d16:	4621      	mov	r1, r4
 8004d18:	4630      	mov	r0, r6
 8004d1a:	f7ff ffbc 	bl	8004c96 <__sfputs_r>
 8004d1e:	3001      	adds	r0, #1
 8004d20:	f000 80c2 	beq.w	8004ea8 <_vfiprintf_r+0x1ec>
 8004d24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d26:	4453      	add	r3, sl
 8004d28:	9309      	str	r3, [sp, #36]	; 0x24
 8004d2a:	f898 3000 	ldrb.w	r3, [r8]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	f000 80ba 	beq.w	8004ea8 <_vfiprintf_r+0x1ec>
 8004d34:	2300      	movs	r3, #0
 8004d36:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004d3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004d3e:	9304      	str	r3, [sp, #16]
 8004d40:	9307      	str	r3, [sp, #28]
 8004d42:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004d46:	931a      	str	r3, [sp, #104]	; 0x68
 8004d48:	46a8      	mov	r8, r5
 8004d4a:	2205      	movs	r2, #5
 8004d4c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8004d50:	485e      	ldr	r0, [pc, #376]	; (8004ecc <_vfiprintf_r+0x210>)
 8004d52:	f000 fb27 	bl	80053a4 <memchr>
 8004d56:	9b04      	ldr	r3, [sp, #16]
 8004d58:	bb78      	cbnz	r0, 8004dba <_vfiprintf_r+0xfe>
 8004d5a:	06d9      	lsls	r1, r3, #27
 8004d5c:	bf44      	itt	mi
 8004d5e:	2220      	movmi	r2, #32
 8004d60:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004d64:	071a      	lsls	r2, r3, #28
 8004d66:	bf44      	itt	mi
 8004d68:	222b      	movmi	r2, #43	; 0x2b
 8004d6a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004d6e:	782a      	ldrb	r2, [r5, #0]
 8004d70:	2a2a      	cmp	r2, #42	; 0x2a
 8004d72:	d02a      	beq.n	8004dca <_vfiprintf_r+0x10e>
 8004d74:	46a8      	mov	r8, r5
 8004d76:	2000      	movs	r0, #0
 8004d78:	250a      	movs	r5, #10
 8004d7a:	9a07      	ldr	r2, [sp, #28]
 8004d7c:	4641      	mov	r1, r8
 8004d7e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004d82:	3b30      	subs	r3, #48	; 0x30
 8004d84:	2b09      	cmp	r3, #9
 8004d86:	d969      	bls.n	8004e5c <_vfiprintf_r+0x1a0>
 8004d88:	b360      	cbz	r0, 8004de4 <_vfiprintf_r+0x128>
 8004d8a:	e024      	b.n	8004dd6 <_vfiprintf_r+0x11a>
 8004d8c:	4b50      	ldr	r3, [pc, #320]	; (8004ed0 <_vfiprintf_r+0x214>)
 8004d8e:	429c      	cmp	r4, r3
 8004d90:	d101      	bne.n	8004d96 <_vfiprintf_r+0xda>
 8004d92:	68b4      	ldr	r4, [r6, #8]
 8004d94:	e7a2      	b.n	8004cdc <_vfiprintf_r+0x20>
 8004d96:	4b4f      	ldr	r3, [pc, #316]	; (8004ed4 <_vfiprintf_r+0x218>)
 8004d98:	429c      	cmp	r4, r3
 8004d9a:	bf08      	it	eq
 8004d9c:	68f4      	ldreq	r4, [r6, #12]
 8004d9e:	e79d      	b.n	8004cdc <_vfiprintf_r+0x20>
 8004da0:	4621      	mov	r1, r4
 8004da2:	4630      	mov	r0, r6
 8004da4:	f7ff fc16 	bl	80045d4 <__swsetup_r>
 8004da8:	2800      	cmp	r0, #0
 8004daa:	d09d      	beq.n	8004ce8 <_vfiprintf_r+0x2c>
 8004dac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004db0:	b01d      	add	sp, #116	; 0x74
 8004db2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004db6:	46a8      	mov	r8, r5
 8004db8:	e7a2      	b.n	8004d00 <_vfiprintf_r+0x44>
 8004dba:	4a44      	ldr	r2, [pc, #272]	; (8004ecc <_vfiprintf_r+0x210>)
 8004dbc:	4645      	mov	r5, r8
 8004dbe:	1a80      	subs	r0, r0, r2
 8004dc0:	fa0b f000 	lsl.w	r0, fp, r0
 8004dc4:	4318      	orrs	r0, r3
 8004dc6:	9004      	str	r0, [sp, #16]
 8004dc8:	e7be      	b.n	8004d48 <_vfiprintf_r+0x8c>
 8004dca:	9a03      	ldr	r2, [sp, #12]
 8004dcc:	1d11      	adds	r1, r2, #4
 8004dce:	6812      	ldr	r2, [r2, #0]
 8004dd0:	9103      	str	r1, [sp, #12]
 8004dd2:	2a00      	cmp	r2, #0
 8004dd4:	db01      	blt.n	8004dda <_vfiprintf_r+0x11e>
 8004dd6:	9207      	str	r2, [sp, #28]
 8004dd8:	e004      	b.n	8004de4 <_vfiprintf_r+0x128>
 8004dda:	4252      	negs	r2, r2
 8004ddc:	f043 0302 	orr.w	r3, r3, #2
 8004de0:	9207      	str	r2, [sp, #28]
 8004de2:	9304      	str	r3, [sp, #16]
 8004de4:	f898 3000 	ldrb.w	r3, [r8]
 8004de8:	2b2e      	cmp	r3, #46	; 0x2e
 8004dea:	d10e      	bne.n	8004e0a <_vfiprintf_r+0x14e>
 8004dec:	f898 3001 	ldrb.w	r3, [r8, #1]
 8004df0:	2b2a      	cmp	r3, #42	; 0x2a
 8004df2:	d138      	bne.n	8004e66 <_vfiprintf_r+0x1aa>
 8004df4:	9b03      	ldr	r3, [sp, #12]
 8004df6:	f108 0802 	add.w	r8, r8, #2
 8004dfa:	1d1a      	adds	r2, r3, #4
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	9203      	str	r2, [sp, #12]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	bfb8      	it	lt
 8004e04:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004e08:	9305      	str	r3, [sp, #20]
 8004e0a:	4d33      	ldr	r5, [pc, #204]	; (8004ed8 <_vfiprintf_r+0x21c>)
 8004e0c:	2203      	movs	r2, #3
 8004e0e:	f898 1000 	ldrb.w	r1, [r8]
 8004e12:	4628      	mov	r0, r5
 8004e14:	f000 fac6 	bl	80053a4 <memchr>
 8004e18:	b140      	cbz	r0, 8004e2c <_vfiprintf_r+0x170>
 8004e1a:	2340      	movs	r3, #64	; 0x40
 8004e1c:	1b40      	subs	r0, r0, r5
 8004e1e:	fa03 f000 	lsl.w	r0, r3, r0
 8004e22:	9b04      	ldr	r3, [sp, #16]
 8004e24:	f108 0801 	add.w	r8, r8, #1
 8004e28:	4303      	orrs	r3, r0
 8004e2a:	9304      	str	r3, [sp, #16]
 8004e2c:	f898 1000 	ldrb.w	r1, [r8]
 8004e30:	2206      	movs	r2, #6
 8004e32:	482a      	ldr	r0, [pc, #168]	; (8004edc <_vfiprintf_r+0x220>)
 8004e34:	f108 0701 	add.w	r7, r8, #1
 8004e38:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004e3c:	f000 fab2 	bl	80053a4 <memchr>
 8004e40:	2800      	cmp	r0, #0
 8004e42:	d037      	beq.n	8004eb4 <_vfiprintf_r+0x1f8>
 8004e44:	4b26      	ldr	r3, [pc, #152]	; (8004ee0 <_vfiprintf_r+0x224>)
 8004e46:	bb1b      	cbnz	r3, 8004e90 <_vfiprintf_r+0x1d4>
 8004e48:	9b03      	ldr	r3, [sp, #12]
 8004e4a:	3307      	adds	r3, #7
 8004e4c:	f023 0307 	bic.w	r3, r3, #7
 8004e50:	3308      	adds	r3, #8
 8004e52:	9303      	str	r3, [sp, #12]
 8004e54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e56:	444b      	add	r3, r9
 8004e58:	9309      	str	r3, [sp, #36]	; 0x24
 8004e5a:	e750      	b.n	8004cfe <_vfiprintf_r+0x42>
 8004e5c:	fb05 3202 	mla	r2, r5, r2, r3
 8004e60:	2001      	movs	r0, #1
 8004e62:	4688      	mov	r8, r1
 8004e64:	e78a      	b.n	8004d7c <_vfiprintf_r+0xc0>
 8004e66:	2300      	movs	r3, #0
 8004e68:	250a      	movs	r5, #10
 8004e6a:	4619      	mov	r1, r3
 8004e6c:	f108 0801 	add.w	r8, r8, #1
 8004e70:	9305      	str	r3, [sp, #20]
 8004e72:	4640      	mov	r0, r8
 8004e74:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004e78:	3a30      	subs	r2, #48	; 0x30
 8004e7a:	2a09      	cmp	r2, #9
 8004e7c:	d903      	bls.n	8004e86 <_vfiprintf_r+0x1ca>
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d0c3      	beq.n	8004e0a <_vfiprintf_r+0x14e>
 8004e82:	9105      	str	r1, [sp, #20]
 8004e84:	e7c1      	b.n	8004e0a <_vfiprintf_r+0x14e>
 8004e86:	fb05 2101 	mla	r1, r5, r1, r2
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	4680      	mov	r8, r0
 8004e8e:	e7f0      	b.n	8004e72 <_vfiprintf_r+0x1b6>
 8004e90:	ab03      	add	r3, sp, #12
 8004e92:	9300      	str	r3, [sp, #0]
 8004e94:	4622      	mov	r2, r4
 8004e96:	4b13      	ldr	r3, [pc, #76]	; (8004ee4 <_vfiprintf_r+0x228>)
 8004e98:	a904      	add	r1, sp, #16
 8004e9a:	4630      	mov	r0, r6
 8004e9c:	f3af 8000 	nop.w
 8004ea0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8004ea4:	4681      	mov	r9, r0
 8004ea6:	d1d5      	bne.n	8004e54 <_vfiprintf_r+0x198>
 8004ea8:	89a3      	ldrh	r3, [r4, #12]
 8004eaa:	065b      	lsls	r3, r3, #25
 8004eac:	f53f af7e 	bmi.w	8004dac <_vfiprintf_r+0xf0>
 8004eb0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004eb2:	e77d      	b.n	8004db0 <_vfiprintf_r+0xf4>
 8004eb4:	ab03      	add	r3, sp, #12
 8004eb6:	9300      	str	r3, [sp, #0]
 8004eb8:	4622      	mov	r2, r4
 8004eba:	4b0a      	ldr	r3, [pc, #40]	; (8004ee4 <_vfiprintf_r+0x228>)
 8004ebc:	a904      	add	r1, sp, #16
 8004ebe:	4630      	mov	r0, r6
 8004ec0:	f000 f888 	bl	8004fd4 <_printf_i>
 8004ec4:	e7ec      	b.n	8004ea0 <_vfiprintf_r+0x1e4>
 8004ec6:	bf00      	nop
 8004ec8:	08005c40 	.word	0x08005c40
 8004ecc:	08005c80 	.word	0x08005c80
 8004ed0:	08005c60 	.word	0x08005c60
 8004ed4:	08005c20 	.word	0x08005c20
 8004ed8:	08005c86 	.word	0x08005c86
 8004edc:	08005c8a 	.word	0x08005c8a
 8004ee0:	00000000 	.word	0x00000000
 8004ee4:	08004c97 	.word	0x08004c97

08004ee8 <_printf_common>:
 8004ee8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004eec:	4691      	mov	r9, r2
 8004eee:	461f      	mov	r7, r3
 8004ef0:	688a      	ldr	r2, [r1, #8]
 8004ef2:	690b      	ldr	r3, [r1, #16]
 8004ef4:	4606      	mov	r6, r0
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	bfb8      	it	lt
 8004efa:	4613      	movlt	r3, r2
 8004efc:	f8c9 3000 	str.w	r3, [r9]
 8004f00:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004f04:	460c      	mov	r4, r1
 8004f06:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004f0a:	b112      	cbz	r2, 8004f12 <_printf_common+0x2a>
 8004f0c:	3301      	adds	r3, #1
 8004f0e:	f8c9 3000 	str.w	r3, [r9]
 8004f12:	6823      	ldr	r3, [r4, #0]
 8004f14:	0699      	lsls	r1, r3, #26
 8004f16:	bf42      	ittt	mi
 8004f18:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004f1c:	3302      	addmi	r3, #2
 8004f1e:	f8c9 3000 	strmi.w	r3, [r9]
 8004f22:	6825      	ldr	r5, [r4, #0]
 8004f24:	f015 0506 	ands.w	r5, r5, #6
 8004f28:	d107      	bne.n	8004f3a <_printf_common+0x52>
 8004f2a:	f104 0a19 	add.w	sl, r4, #25
 8004f2e:	68e3      	ldr	r3, [r4, #12]
 8004f30:	f8d9 2000 	ldr.w	r2, [r9]
 8004f34:	1a9b      	subs	r3, r3, r2
 8004f36:	42ab      	cmp	r3, r5
 8004f38:	dc29      	bgt.n	8004f8e <_printf_common+0xa6>
 8004f3a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004f3e:	6822      	ldr	r2, [r4, #0]
 8004f40:	3300      	adds	r3, #0
 8004f42:	bf18      	it	ne
 8004f44:	2301      	movne	r3, #1
 8004f46:	0692      	lsls	r2, r2, #26
 8004f48:	d42e      	bmi.n	8004fa8 <_printf_common+0xc0>
 8004f4a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004f4e:	4639      	mov	r1, r7
 8004f50:	4630      	mov	r0, r6
 8004f52:	47c0      	blx	r8
 8004f54:	3001      	adds	r0, #1
 8004f56:	d021      	beq.n	8004f9c <_printf_common+0xb4>
 8004f58:	6823      	ldr	r3, [r4, #0]
 8004f5a:	68e5      	ldr	r5, [r4, #12]
 8004f5c:	f003 0306 	and.w	r3, r3, #6
 8004f60:	2b04      	cmp	r3, #4
 8004f62:	bf18      	it	ne
 8004f64:	2500      	movne	r5, #0
 8004f66:	f8d9 2000 	ldr.w	r2, [r9]
 8004f6a:	f04f 0900 	mov.w	r9, #0
 8004f6e:	bf08      	it	eq
 8004f70:	1aad      	subeq	r5, r5, r2
 8004f72:	68a3      	ldr	r3, [r4, #8]
 8004f74:	6922      	ldr	r2, [r4, #16]
 8004f76:	bf08      	it	eq
 8004f78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	bfc4      	itt	gt
 8004f80:	1a9b      	subgt	r3, r3, r2
 8004f82:	18ed      	addgt	r5, r5, r3
 8004f84:	341a      	adds	r4, #26
 8004f86:	454d      	cmp	r5, r9
 8004f88:	d11a      	bne.n	8004fc0 <_printf_common+0xd8>
 8004f8a:	2000      	movs	r0, #0
 8004f8c:	e008      	b.n	8004fa0 <_printf_common+0xb8>
 8004f8e:	2301      	movs	r3, #1
 8004f90:	4652      	mov	r2, sl
 8004f92:	4639      	mov	r1, r7
 8004f94:	4630      	mov	r0, r6
 8004f96:	47c0      	blx	r8
 8004f98:	3001      	adds	r0, #1
 8004f9a:	d103      	bne.n	8004fa4 <_printf_common+0xbc>
 8004f9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004fa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fa4:	3501      	adds	r5, #1
 8004fa6:	e7c2      	b.n	8004f2e <_printf_common+0x46>
 8004fa8:	2030      	movs	r0, #48	; 0x30
 8004faa:	18e1      	adds	r1, r4, r3
 8004fac:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004fb0:	1c5a      	adds	r2, r3, #1
 8004fb2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004fb6:	4422      	add	r2, r4
 8004fb8:	3302      	adds	r3, #2
 8004fba:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004fbe:	e7c4      	b.n	8004f4a <_printf_common+0x62>
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	4622      	mov	r2, r4
 8004fc4:	4639      	mov	r1, r7
 8004fc6:	4630      	mov	r0, r6
 8004fc8:	47c0      	blx	r8
 8004fca:	3001      	adds	r0, #1
 8004fcc:	d0e6      	beq.n	8004f9c <_printf_common+0xb4>
 8004fce:	f109 0901 	add.w	r9, r9, #1
 8004fd2:	e7d8      	b.n	8004f86 <_printf_common+0x9e>

08004fd4 <_printf_i>:
 8004fd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004fd8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004fdc:	460c      	mov	r4, r1
 8004fde:	7e09      	ldrb	r1, [r1, #24]
 8004fe0:	b085      	sub	sp, #20
 8004fe2:	296e      	cmp	r1, #110	; 0x6e
 8004fe4:	4617      	mov	r7, r2
 8004fe6:	4606      	mov	r6, r0
 8004fe8:	4698      	mov	r8, r3
 8004fea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004fec:	f000 80b3 	beq.w	8005156 <_printf_i+0x182>
 8004ff0:	d822      	bhi.n	8005038 <_printf_i+0x64>
 8004ff2:	2963      	cmp	r1, #99	; 0x63
 8004ff4:	d036      	beq.n	8005064 <_printf_i+0x90>
 8004ff6:	d80a      	bhi.n	800500e <_printf_i+0x3a>
 8004ff8:	2900      	cmp	r1, #0
 8004ffa:	f000 80b9 	beq.w	8005170 <_printf_i+0x19c>
 8004ffe:	2958      	cmp	r1, #88	; 0x58
 8005000:	f000 8083 	beq.w	800510a <_printf_i+0x136>
 8005004:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005008:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800500c:	e032      	b.n	8005074 <_printf_i+0xa0>
 800500e:	2964      	cmp	r1, #100	; 0x64
 8005010:	d001      	beq.n	8005016 <_printf_i+0x42>
 8005012:	2969      	cmp	r1, #105	; 0x69
 8005014:	d1f6      	bne.n	8005004 <_printf_i+0x30>
 8005016:	6820      	ldr	r0, [r4, #0]
 8005018:	6813      	ldr	r3, [r2, #0]
 800501a:	0605      	lsls	r5, r0, #24
 800501c:	f103 0104 	add.w	r1, r3, #4
 8005020:	d52a      	bpl.n	8005078 <_printf_i+0xa4>
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	6011      	str	r1, [r2, #0]
 8005026:	2b00      	cmp	r3, #0
 8005028:	da03      	bge.n	8005032 <_printf_i+0x5e>
 800502a:	222d      	movs	r2, #45	; 0x2d
 800502c:	425b      	negs	r3, r3
 800502e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005032:	486f      	ldr	r0, [pc, #444]	; (80051f0 <_printf_i+0x21c>)
 8005034:	220a      	movs	r2, #10
 8005036:	e039      	b.n	80050ac <_printf_i+0xd8>
 8005038:	2973      	cmp	r1, #115	; 0x73
 800503a:	f000 809d 	beq.w	8005178 <_printf_i+0x1a4>
 800503e:	d808      	bhi.n	8005052 <_printf_i+0x7e>
 8005040:	296f      	cmp	r1, #111	; 0x6f
 8005042:	d020      	beq.n	8005086 <_printf_i+0xb2>
 8005044:	2970      	cmp	r1, #112	; 0x70
 8005046:	d1dd      	bne.n	8005004 <_printf_i+0x30>
 8005048:	6823      	ldr	r3, [r4, #0]
 800504a:	f043 0320 	orr.w	r3, r3, #32
 800504e:	6023      	str	r3, [r4, #0]
 8005050:	e003      	b.n	800505a <_printf_i+0x86>
 8005052:	2975      	cmp	r1, #117	; 0x75
 8005054:	d017      	beq.n	8005086 <_printf_i+0xb2>
 8005056:	2978      	cmp	r1, #120	; 0x78
 8005058:	d1d4      	bne.n	8005004 <_printf_i+0x30>
 800505a:	2378      	movs	r3, #120	; 0x78
 800505c:	4865      	ldr	r0, [pc, #404]	; (80051f4 <_printf_i+0x220>)
 800505e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005062:	e055      	b.n	8005110 <_printf_i+0x13c>
 8005064:	6813      	ldr	r3, [r2, #0]
 8005066:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800506a:	1d19      	adds	r1, r3, #4
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	6011      	str	r1, [r2, #0]
 8005070:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005074:	2301      	movs	r3, #1
 8005076:	e08c      	b.n	8005192 <_printf_i+0x1be>
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800507e:	6011      	str	r1, [r2, #0]
 8005080:	bf18      	it	ne
 8005082:	b21b      	sxthne	r3, r3
 8005084:	e7cf      	b.n	8005026 <_printf_i+0x52>
 8005086:	6813      	ldr	r3, [r2, #0]
 8005088:	6825      	ldr	r5, [r4, #0]
 800508a:	1d18      	adds	r0, r3, #4
 800508c:	6010      	str	r0, [r2, #0]
 800508e:	0628      	lsls	r0, r5, #24
 8005090:	d501      	bpl.n	8005096 <_printf_i+0xc2>
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	e002      	b.n	800509c <_printf_i+0xc8>
 8005096:	0668      	lsls	r0, r5, #25
 8005098:	d5fb      	bpl.n	8005092 <_printf_i+0xbe>
 800509a:	881b      	ldrh	r3, [r3, #0]
 800509c:	296f      	cmp	r1, #111	; 0x6f
 800509e:	bf14      	ite	ne
 80050a0:	220a      	movne	r2, #10
 80050a2:	2208      	moveq	r2, #8
 80050a4:	4852      	ldr	r0, [pc, #328]	; (80051f0 <_printf_i+0x21c>)
 80050a6:	2100      	movs	r1, #0
 80050a8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80050ac:	6865      	ldr	r5, [r4, #4]
 80050ae:	2d00      	cmp	r5, #0
 80050b0:	60a5      	str	r5, [r4, #8]
 80050b2:	f2c0 8095 	blt.w	80051e0 <_printf_i+0x20c>
 80050b6:	6821      	ldr	r1, [r4, #0]
 80050b8:	f021 0104 	bic.w	r1, r1, #4
 80050bc:	6021      	str	r1, [r4, #0]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d13d      	bne.n	800513e <_printf_i+0x16a>
 80050c2:	2d00      	cmp	r5, #0
 80050c4:	f040 808e 	bne.w	80051e4 <_printf_i+0x210>
 80050c8:	4665      	mov	r5, ip
 80050ca:	2a08      	cmp	r2, #8
 80050cc:	d10b      	bne.n	80050e6 <_printf_i+0x112>
 80050ce:	6823      	ldr	r3, [r4, #0]
 80050d0:	07db      	lsls	r3, r3, #31
 80050d2:	d508      	bpl.n	80050e6 <_printf_i+0x112>
 80050d4:	6923      	ldr	r3, [r4, #16]
 80050d6:	6862      	ldr	r2, [r4, #4]
 80050d8:	429a      	cmp	r2, r3
 80050da:	bfde      	ittt	le
 80050dc:	2330      	movle	r3, #48	; 0x30
 80050de:	f805 3c01 	strble.w	r3, [r5, #-1]
 80050e2:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80050e6:	ebac 0305 	sub.w	r3, ip, r5
 80050ea:	6123      	str	r3, [r4, #16]
 80050ec:	f8cd 8000 	str.w	r8, [sp]
 80050f0:	463b      	mov	r3, r7
 80050f2:	aa03      	add	r2, sp, #12
 80050f4:	4621      	mov	r1, r4
 80050f6:	4630      	mov	r0, r6
 80050f8:	f7ff fef6 	bl	8004ee8 <_printf_common>
 80050fc:	3001      	adds	r0, #1
 80050fe:	d14d      	bne.n	800519c <_printf_i+0x1c8>
 8005100:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005104:	b005      	add	sp, #20
 8005106:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800510a:	4839      	ldr	r0, [pc, #228]	; (80051f0 <_printf_i+0x21c>)
 800510c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005110:	6813      	ldr	r3, [r2, #0]
 8005112:	6821      	ldr	r1, [r4, #0]
 8005114:	1d1d      	adds	r5, r3, #4
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	6015      	str	r5, [r2, #0]
 800511a:	060a      	lsls	r2, r1, #24
 800511c:	d50b      	bpl.n	8005136 <_printf_i+0x162>
 800511e:	07ca      	lsls	r2, r1, #31
 8005120:	bf44      	itt	mi
 8005122:	f041 0120 	orrmi.w	r1, r1, #32
 8005126:	6021      	strmi	r1, [r4, #0]
 8005128:	b91b      	cbnz	r3, 8005132 <_printf_i+0x15e>
 800512a:	6822      	ldr	r2, [r4, #0]
 800512c:	f022 0220 	bic.w	r2, r2, #32
 8005130:	6022      	str	r2, [r4, #0]
 8005132:	2210      	movs	r2, #16
 8005134:	e7b7      	b.n	80050a6 <_printf_i+0xd2>
 8005136:	064d      	lsls	r5, r1, #25
 8005138:	bf48      	it	mi
 800513a:	b29b      	uxthmi	r3, r3
 800513c:	e7ef      	b.n	800511e <_printf_i+0x14a>
 800513e:	4665      	mov	r5, ip
 8005140:	fbb3 f1f2 	udiv	r1, r3, r2
 8005144:	fb02 3311 	mls	r3, r2, r1, r3
 8005148:	5cc3      	ldrb	r3, [r0, r3]
 800514a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800514e:	460b      	mov	r3, r1
 8005150:	2900      	cmp	r1, #0
 8005152:	d1f5      	bne.n	8005140 <_printf_i+0x16c>
 8005154:	e7b9      	b.n	80050ca <_printf_i+0xf6>
 8005156:	6813      	ldr	r3, [r2, #0]
 8005158:	6825      	ldr	r5, [r4, #0]
 800515a:	1d18      	adds	r0, r3, #4
 800515c:	6961      	ldr	r1, [r4, #20]
 800515e:	6010      	str	r0, [r2, #0]
 8005160:	0628      	lsls	r0, r5, #24
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	d501      	bpl.n	800516a <_printf_i+0x196>
 8005166:	6019      	str	r1, [r3, #0]
 8005168:	e002      	b.n	8005170 <_printf_i+0x19c>
 800516a:	066a      	lsls	r2, r5, #25
 800516c:	d5fb      	bpl.n	8005166 <_printf_i+0x192>
 800516e:	8019      	strh	r1, [r3, #0]
 8005170:	2300      	movs	r3, #0
 8005172:	4665      	mov	r5, ip
 8005174:	6123      	str	r3, [r4, #16]
 8005176:	e7b9      	b.n	80050ec <_printf_i+0x118>
 8005178:	6813      	ldr	r3, [r2, #0]
 800517a:	1d19      	adds	r1, r3, #4
 800517c:	6011      	str	r1, [r2, #0]
 800517e:	681d      	ldr	r5, [r3, #0]
 8005180:	6862      	ldr	r2, [r4, #4]
 8005182:	2100      	movs	r1, #0
 8005184:	4628      	mov	r0, r5
 8005186:	f000 f90d 	bl	80053a4 <memchr>
 800518a:	b108      	cbz	r0, 8005190 <_printf_i+0x1bc>
 800518c:	1b40      	subs	r0, r0, r5
 800518e:	6060      	str	r0, [r4, #4]
 8005190:	6863      	ldr	r3, [r4, #4]
 8005192:	6123      	str	r3, [r4, #16]
 8005194:	2300      	movs	r3, #0
 8005196:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800519a:	e7a7      	b.n	80050ec <_printf_i+0x118>
 800519c:	6923      	ldr	r3, [r4, #16]
 800519e:	462a      	mov	r2, r5
 80051a0:	4639      	mov	r1, r7
 80051a2:	4630      	mov	r0, r6
 80051a4:	47c0      	blx	r8
 80051a6:	3001      	adds	r0, #1
 80051a8:	d0aa      	beq.n	8005100 <_printf_i+0x12c>
 80051aa:	6823      	ldr	r3, [r4, #0]
 80051ac:	079b      	lsls	r3, r3, #30
 80051ae:	d413      	bmi.n	80051d8 <_printf_i+0x204>
 80051b0:	68e0      	ldr	r0, [r4, #12]
 80051b2:	9b03      	ldr	r3, [sp, #12]
 80051b4:	4298      	cmp	r0, r3
 80051b6:	bfb8      	it	lt
 80051b8:	4618      	movlt	r0, r3
 80051ba:	e7a3      	b.n	8005104 <_printf_i+0x130>
 80051bc:	2301      	movs	r3, #1
 80051be:	464a      	mov	r2, r9
 80051c0:	4639      	mov	r1, r7
 80051c2:	4630      	mov	r0, r6
 80051c4:	47c0      	blx	r8
 80051c6:	3001      	adds	r0, #1
 80051c8:	d09a      	beq.n	8005100 <_printf_i+0x12c>
 80051ca:	3501      	adds	r5, #1
 80051cc:	68e3      	ldr	r3, [r4, #12]
 80051ce:	9a03      	ldr	r2, [sp, #12]
 80051d0:	1a9b      	subs	r3, r3, r2
 80051d2:	42ab      	cmp	r3, r5
 80051d4:	dcf2      	bgt.n	80051bc <_printf_i+0x1e8>
 80051d6:	e7eb      	b.n	80051b0 <_printf_i+0x1dc>
 80051d8:	2500      	movs	r5, #0
 80051da:	f104 0919 	add.w	r9, r4, #25
 80051de:	e7f5      	b.n	80051cc <_printf_i+0x1f8>
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d1ac      	bne.n	800513e <_printf_i+0x16a>
 80051e4:	7803      	ldrb	r3, [r0, #0]
 80051e6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80051ea:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80051ee:	e76c      	b.n	80050ca <_printf_i+0xf6>
 80051f0:	08005c91 	.word	0x08005c91
 80051f4:	08005ca2 	.word	0x08005ca2

080051f8 <__srget_r>:
 80051f8:	b538      	push	{r3, r4, r5, lr}
 80051fa:	460c      	mov	r4, r1
 80051fc:	4605      	mov	r5, r0
 80051fe:	b118      	cbz	r0, 8005208 <__srget_r+0x10>
 8005200:	6983      	ldr	r3, [r0, #24]
 8005202:	b90b      	cbnz	r3, 8005208 <__srget_r+0x10>
 8005204:	f7ff fb56 	bl	80048b4 <__sinit>
 8005208:	4b0e      	ldr	r3, [pc, #56]	; (8005244 <__srget_r+0x4c>)
 800520a:	429c      	cmp	r4, r3
 800520c:	d10d      	bne.n	800522a <__srget_r+0x32>
 800520e:	686c      	ldr	r4, [r5, #4]
 8005210:	4621      	mov	r1, r4
 8005212:	4628      	mov	r0, r5
 8005214:	f000 f8f2 	bl	80053fc <__srefill_r>
 8005218:	b988      	cbnz	r0, 800523e <__srget_r+0x46>
 800521a:	6863      	ldr	r3, [r4, #4]
 800521c:	3b01      	subs	r3, #1
 800521e:	6063      	str	r3, [r4, #4]
 8005220:	6823      	ldr	r3, [r4, #0]
 8005222:	1c5a      	adds	r2, r3, #1
 8005224:	6022      	str	r2, [r4, #0]
 8005226:	7818      	ldrb	r0, [r3, #0]
 8005228:	bd38      	pop	{r3, r4, r5, pc}
 800522a:	4b07      	ldr	r3, [pc, #28]	; (8005248 <__srget_r+0x50>)
 800522c:	429c      	cmp	r4, r3
 800522e:	d101      	bne.n	8005234 <__srget_r+0x3c>
 8005230:	68ac      	ldr	r4, [r5, #8]
 8005232:	e7ed      	b.n	8005210 <__srget_r+0x18>
 8005234:	4b05      	ldr	r3, [pc, #20]	; (800524c <__srget_r+0x54>)
 8005236:	429c      	cmp	r4, r3
 8005238:	bf08      	it	eq
 800523a:	68ec      	ldreq	r4, [r5, #12]
 800523c:	e7e8      	b.n	8005210 <__srget_r+0x18>
 800523e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005242:	e7f1      	b.n	8005228 <__srget_r+0x30>
 8005244:	08005c40 	.word	0x08005c40
 8005248:	08005c60 	.word	0x08005c60
 800524c:	08005c20 	.word	0x08005c20

08005250 <_sbrk_r>:
 8005250:	b538      	push	{r3, r4, r5, lr}
 8005252:	2300      	movs	r3, #0
 8005254:	4c05      	ldr	r4, [pc, #20]	; (800526c <_sbrk_r+0x1c>)
 8005256:	4605      	mov	r5, r0
 8005258:	4608      	mov	r0, r1
 800525a:	6023      	str	r3, [r4, #0]
 800525c:	f7fb fc30 	bl	8000ac0 <_sbrk>
 8005260:	1c43      	adds	r3, r0, #1
 8005262:	d102      	bne.n	800526a <_sbrk_r+0x1a>
 8005264:	6823      	ldr	r3, [r4, #0]
 8005266:	b103      	cbz	r3, 800526a <_sbrk_r+0x1a>
 8005268:	602b      	str	r3, [r5, #0]
 800526a:	bd38      	pop	{r3, r4, r5, pc}
 800526c:	200000fc 	.word	0x200000fc

08005270 <__sread>:
 8005270:	b510      	push	{r4, lr}
 8005272:	460c      	mov	r4, r1
 8005274:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005278:	f000 f8a4 	bl	80053c4 <_read_r>
 800527c:	2800      	cmp	r0, #0
 800527e:	bfab      	itete	ge
 8005280:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005282:	89a3      	ldrhlt	r3, [r4, #12]
 8005284:	181b      	addge	r3, r3, r0
 8005286:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800528a:	bfac      	ite	ge
 800528c:	6563      	strge	r3, [r4, #84]	; 0x54
 800528e:	81a3      	strhlt	r3, [r4, #12]
 8005290:	bd10      	pop	{r4, pc}

08005292 <__swrite>:
 8005292:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005296:	461f      	mov	r7, r3
 8005298:	898b      	ldrh	r3, [r1, #12]
 800529a:	4605      	mov	r5, r0
 800529c:	05db      	lsls	r3, r3, #23
 800529e:	460c      	mov	r4, r1
 80052a0:	4616      	mov	r6, r2
 80052a2:	d505      	bpl.n	80052b0 <__swrite+0x1e>
 80052a4:	2302      	movs	r3, #2
 80052a6:	2200      	movs	r2, #0
 80052a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052ac:	f000 f868 	bl	8005380 <_lseek_r>
 80052b0:	89a3      	ldrh	r3, [r4, #12]
 80052b2:	4632      	mov	r2, r6
 80052b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80052b8:	81a3      	strh	r3, [r4, #12]
 80052ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80052be:	463b      	mov	r3, r7
 80052c0:	4628      	mov	r0, r5
 80052c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80052c6:	f000 b817 	b.w	80052f8 <_write_r>

080052ca <__sseek>:
 80052ca:	b510      	push	{r4, lr}
 80052cc:	460c      	mov	r4, r1
 80052ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052d2:	f000 f855 	bl	8005380 <_lseek_r>
 80052d6:	1c43      	adds	r3, r0, #1
 80052d8:	89a3      	ldrh	r3, [r4, #12]
 80052da:	bf15      	itete	ne
 80052dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80052de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80052e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80052e6:	81a3      	strheq	r3, [r4, #12]
 80052e8:	bf18      	it	ne
 80052ea:	81a3      	strhne	r3, [r4, #12]
 80052ec:	bd10      	pop	{r4, pc}

080052ee <__sclose>:
 80052ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052f2:	f000 b813 	b.w	800531c <_close_r>
	...

080052f8 <_write_r>:
 80052f8:	b538      	push	{r3, r4, r5, lr}
 80052fa:	4605      	mov	r5, r0
 80052fc:	4608      	mov	r0, r1
 80052fe:	4611      	mov	r1, r2
 8005300:	2200      	movs	r2, #0
 8005302:	4c05      	ldr	r4, [pc, #20]	; (8005318 <_write_r+0x20>)
 8005304:	6022      	str	r2, [r4, #0]
 8005306:	461a      	mov	r2, r3
 8005308:	f7fb fb8e 	bl	8000a28 <_write>
 800530c:	1c43      	adds	r3, r0, #1
 800530e:	d102      	bne.n	8005316 <_write_r+0x1e>
 8005310:	6823      	ldr	r3, [r4, #0]
 8005312:	b103      	cbz	r3, 8005316 <_write_r+0x1e>
 8005314:	602b      	str	r3, [r5, #0]
 8005316:	bd38      	pop	{r3, r4, r5, pc}
 8005318:	200000fc 	.word	0x200000fc

0800531c <_close_r>:
 800531c:	b538      	push	{r3, r4, r5, lr}
 800531e:	2300      	movs	r3, #0
 8005320:	4c05      	ldr	r4, [pc, #20]	; (8005338 <_close_r+0x1c>)
 8005322:	4605      	mov	r5, r0
 8005324:	4608      	mov	r0, r1
 8005326:	6023      	str	r3, [r4, #0]
 8005328:	f7fb fb9a 	bl	8000a60 <_close>
 800532c:	1c43      	adds	r3, r0, #1
 800532e:	d102      	bne.n	8005336 <_close_r+0x1a>
 8005330:	6823      	ldr	r3, [r4, #0]
 8005332:	b103      	cbz	r3, 8005336 <_close_r+0x1a>
 8005334:	602b      	str	r3, [r5, #0]
 8005336:	bd38      	pop	{r3, r4, r5, pc}
 8005338:	200000fc 	.word	0x200000fc

0800533c <_fstat_r>:
 800533c:	b538      	push	{r3, r4, r5, lr}
 800533e:	2300      	movs	r3, #0
 8005340:	4c06      	ldr	r4, [pc, #24]	; (800535c <_fstat_r+0x20>)
 8005342:	4605      	mov	r5, r0
 8005344:	4608      	mov	r0, r1
 8005346:	4611      	mov	r1, r2
 8005348:	6023      	str	r3, [r4, #0]
 800534a:	f7fb fb94 	bl	8000a76 <_fstat>
 800534e:	1c43      	adds	r3, r0, #1
 8005350:	d102      	bne.n	8005358 <_fstat_r+0x1c>
 8005352:	6823      	ldr	r3, [r4, #0]
 8005354:	b103      	cbz	r3, 8005358 <_fstat_r+0x1c>
 8005356:	602b      	str	r3, [r5, #0]
 8005358:	bd38      	pop	{r3, r4, r5, pc}
 800535a:	bf00      	nop
 800535c:	200000fc 	.word	0x200000fc

08005360 <_isatty_r>:
 8005360:	b538      	push	{r3, r4, r5, lr}
 8005362:	2300      	movs	r3, #0
 8005364:	4c05      	ldr	r4, [pc, #20]	; (800537c <_isatty_r+0x1c>)
 8005366:	4605      	mov	r5, r0
 8005368:	4608      	mov	r0, r1
 800536a:	6023      	str	r3, [r4, #0]
 800536c:	f7fb fb92 	bl	8000a94 <_isatty>
 8005370:	1c43      	adds	r3, r0, #1
 8005372:	d102      	bne.n	800537a <_isatty_r+0x1a>
 8005374:	6823      	ldr	r3, [r4, #0]
 8005376:	b103      	cbz	r3, 800537a <_isatty_r+0x1a>
 8005378:	602b      	str	r3, [r5, #0]
 800537a:	bd38      	pop	{r3, r4, r5, pc}
 800537c:	200000fc 	.word	0x200000fc

08005380 <_lseek_r>:
 8005380:	b538      	push	{r3, r4, r5, lr}
 8005382:	4605      	mov	r5, r0
 8005384:	4608      	mov	r0, r1
 8005386:	4611      	mov	r1, r2
 8005388:	2200      	movs	r2, #0
 800538a:	4c05      	ldr	r4, [pc, #20]	; (80053a0 <_lseek_r+0x20>)
 800538c:	6022      	str	r2, [r4, #0]
 800538e:	461a      	mov	r2, r3
 8005390:	f7fb fb8a 	bl	8000aa8 <_lseek>
 8005394:	1c43      	adds	r3, r0, #1
 8005396:	d102      	bne.n	800539e <_lseek_r+0x1e>
 8005398:	6823      	ldr	r3, [r4, #0]
 800539a:	b103      	cbz	r3, 800539e <_lseek_r+0x1e>
 800539c:	602b      	str	r3, [r5, #0]
 800539e:	bd38      	pop	{r3, r4, r5, pc}
 80053a0:	200000fc 	.word	0x200000fc

080053a4 <memchr>:
 80053a4:	b510      	push	{r4, lr}
 80053a6:	b2c9      	uxtb	r1, r1
 80053a8:	4402      	add	r2, r0
 80053aa:	4290      	cmp	r0, r2
 80053ac:	4603      	mov	r3, r0
 80053ae:	d101      	bne.n	80053b4 <memchr+0x10>
 80053b0:	2300      	movs	r3, #0
 80053b2:	e003      	b.n	80053bc <memchr+0x18>
 80053b4:	781c      	ldrb	r4, [r3, #0]
 80053b6:	3001      	adds	r0, #1
 80053b8:	428c      	cmp	r4, r1
 80053ba:	d1f6      	bne.n	80053aa <memchr+0x6>
 80053bc:	4618      	mov	r0, r3
 80053be:	bd10      	pop	{r4, pc}

080053c0 <__malloc_lock>:
 80053c0:	4770      	bx	lr

080053c2 <__malloc_unlock>:
 80053c2:	4770      	bx	lr

080053c4 <_read_r>:
 80053c4:	b538      	push	{r3, r4, r5, lr}
 80053c6:	4605      	mov	r5, r0
 80053c8:	4608      	mov	r0, r1
 80053ca:	4611      	mov	r1, r2
 80053cc:	2200      	movs	r2, #0
 80053ce:	4c05      	ldr	r4, [pc, #20]	; (80053e4 <_read_r+0x20>)
 80053d0:	6022      	str	r2, [r4, #0]
 80053d2:	461a      	mov	r2, r3
 80053d4:	f7fb fafa 	bl	80009cc <_read>
 80053d8:	1c43      	adds	r3, r0, #1
 80053da:	d102      	bne.n	80053e2 <_read_r+0x1e>
 80053dc:	6823      	ldr	r3, [r4, #0]
 80053de:	b103      	cbz	r3, 80053e2 <_read_r+0x1e>
 80053e0:	602b      	str	r3, [r5, #0]
 80053e2:	bd38      	pop	{r3, r4, r5, pc}
 80053e4:	200000fc 	.word	0x200000fc

080053e8 <lflush>:
 80053e8:	8983      	ldrh	r3, [r0, #12]
 80053ea:	f003 0309 	and.w	r3, r3, #9
 80053ee:	2b09      	cmp	r3, #9
 80053f0:	d101      	bne.n	80053f6 <lflush+0xe>
 80053f2:	f7ff ba0d 	b.w	8004810 <fflush>
 80053f6:	2000      	movs	r0, #0
 80053f8:	4770      	bx	lr
	...

080053fc <__srefill_r>:
 80053fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053fe:	460c      	mov	r4, r1
 8005400:	4605      	mov	r5, r0
 8005402:	b118      	cbz	r0, 800540c <__srefill_r+0x10>
 8005404:	6983      	ldr	r3, [r0, #24]
 8005406:	b90b      	cbnz	r3, 800540c <__srefill_r+0x10>
 8005408:	f7ff fa54 	bl	80048b4 <__sinit>
 800540c:	4b3c      	ldr	r3, [pc, #240]	; (8005500 <__srefill_r+0x104>)
 800540e:	429c      	cmp	r4, r3
 8005410:	d10a      	bne.n	8005428 <__srefill_r+0x2c>
 8005412:	686c      	ldr	r4, [r5, #4]
 8005414:	2300      	movs	r3, #0
 8005416:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800541a:	6063      	str	r3, [r4, #4]
 800541c:	b293      	uxth	r3, r2
 800541e:	069e      	lsls	r6, r3, #26
 8005420:	d50c      	bpl.n	800543c <__srefill_r+0x40>
 8005422:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005426:	e068      	b.n	80054fa <__srefill_r+0xfe>
 8005428:	4b36      	ldr	r3, [pc, #216]	; (8005504 <__srefill_r+0x108>)
 800542a:	429c      	cmp	r4, r3
 800542c:	d101      	bne.n	8005432 <__srefill_r+0x36>
 800542e:	68ac      	ldr	r4, [r5, #8]
 8005430:	e7f0      	b.n	8005414 <__srefill_r+0x18>
 8005432:	4b35      	ldr	r3, [pc, #212]	; (8005508 <__srefill_r+0x10c>)
 8005434:	429c      	cmp	r4, r3
 8005436:	bf08      	it	eq
 8005438:	68ec      	ldreq	r4, [r5, #12]
 800543a:	e7eb      	b.n	8005414 <__srefill_r+0x18>
 800543c:	0758      	lsls	r0, r3, #29
 800543e:	d44a      	bmi.n	80054d6 <__srefill_r+0xda>
 8005440:	06d9      	lsls	r1, r3, #27
 8005442:	d405      	bmi.n	8005450 <__srefill_r+0x54>
 8005444:	2309      	movs	r3, #9
 8005446:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800544a:	602b      	str	r3, [r5, #0]
 800544c:	81a2      	strh	r2, [r4, #12]
 800544e:	e7e8      	b.n	8005422 <__srefill_r+0x26>
 8005450:	071a      	lsls	r2, r3, #28
 8005452:	d50b      	bpl.n	800546c <__srefill_r+0x70>
 8005454:	4621      	mov	r1, r4
 8005456:	4628      	mov	r0, r5
 8005458:	f7ff f9b0 	bl	80047bc <_fflush_r>
 800545c:	2800      	cmp	r0, #0
 800545e:	d1e0      	bne.n	8005422 <__srefill_r+0x26>
 8005460:	89a3      	ldrh	r3, [r4, #12]
 8005462:	60a0      	str	r0, [r4, #8]
 8005464:	f023 0308 	bic.w	r3, r3, #8
 8005468:	81a3      	strh	r3, [r4, #12]
 800546a:	61a0      	str	r0, [r4, #24]
 800546c:	89a3      	ldrh	r3, [r4, #12]
 800546e:	f043 0304 	orr.w	r3, r3, #4
 8005472:	81a3      	strh	r3, [r4, #12]
 8005474:	6923      	ldr	r3, [r4, #16]
 8005476:	b91b      	cbnz	r3, 8005480 <__srefill_r+0x84>
 8005478:	4621      	mov	r1, r4
 800547a:	4628      	mov	r0, r5
 800547c:	f7ff fb10 	bl	8004aa0 <__smakebuf_r>
 8005480:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8005484:	b2be      	uxth	r6, r7
 8005486:	07b3      	lsls	r3, r6, #30
 8005488:	d00f      	beq.n	80054aa <__srefill_r+0xae>
 800548a:	2301      	movs	r3, #1
 800548c:	81a3      	strh	r3, [r4, #12]
 800548e:	4b1f      	ldr	r3, [pc, #124]	; (800550c <__srefill_r+0x110>)
 8005490:	491f      	ldr	r1, [pc, #124]	; (8005510 <__srefill_r+0x114>)
 8005492:	6818      	ldr	r0, [r3, #0]
 8005494:	f006 0609 	and.w	r6, r6, #9
 8005498:	f7ff fa78 	bl	800498c <_fwalk>
 800549c:	2e09      	cmp	r6, #9
 800549e:	81a7      	strh	r7, [r4, #12]
 80054a0:	d103      	bne.n	80054aa <__srefill_r+0xae>
 80054a2:	4621      	mov	r1, r4
 80054a4:	4628      	mov	r0, r5
 80054a6:	f7ff f903 	bl	80046b0 <__sflush_r>
 80054aa:	6922      	ldr	r2, [r4, #16]
 80054ac:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80054ae:	6022      	str	r2, [r4, #0]
 80054b0:	6963      	ldr	r3, [r4, #20]
 80054b2:	6a21      	ldr	r1, [r4, #32]
 80054b4:	4628      	mov	r0, r5
 80054b6:	47b0      	blx	r6
 80054b8:	2800      	cmp	r0, #0
 80054ba:	6060      	str	r0, [r4, #4]
 80054bc:	dc1e      	bgt.n	80054fc <__srefill_r+0x100>
 80054be:	bf18      	it	ne
 80054c0:	2200      	movne	r2, #0
 80054c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80054c6:	bf16      	itet	ne
 80054c8:	6062      	strne	r2, [r4, #4]
 80054ca:	f043 0320 	orreq.w	r3, r3, #32
 80054ce:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 80054d2:	81a3      	strh	r3, [r4, #12]
 80054d4:	e7a5      	b.n	8005422 <__srefill_r+0x26>
 80054d6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80054d8:	2900      	cmp	r1, #0
 80054da:	d0cb      	beq.n	8005474 <__srefill_r+0x78>
 80054dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80054e0:	4299      	cmp	r1, r3
 80054e2:	d002      	beq.n	80054ea <__srefill_r+0xee>
 80054e4:	4628      	mov	r0, r5
 80054e6:	f7ff fb1b 	bl	8004b20 <_free_r>
 80054ea:	2000      	movs	r0, #0
 80054ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80054ee:	6360      	str	r0, [r4, #52]	; 0x34
 80054f0:	6063      	str	r3, [r4, #4]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d0be      	beq.n	8005474 <__srefill_r+0x78>
 80054f6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80054f8:	6023      	str	r3, [r4, #0]
 80054fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054fc:	2000      	movs	r0, #0
 80054fe:	e7fc      	b.n	80054fa <__srefill_r+0xfe>
 8005500:	08005c40 	.word	0x08005c40
 8005504:	08005c60 	.word	0x08005c60
 8005508:	08005c20 	.word	0x08005c20
 800550c:	08005c1c 	.word	0x08005c1c
 8005510:	080053e9 	.word	0x080053e9

08005514 <_init>:
 8005514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005516:	bf00      	nop
 8005518:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800551a:	bc08      	pop	{r3}
 800551c:	469e      	mov	lr, r3
 800551e:	4770      	bx	lr

08005520 <_fini>:
 8005520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005522:	bf00      	nop
 8005524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005526:	bc08      	pop	{r3}
 8005528:	469e      	mov	lr, r3
 800552a:	4770      	bx	lr
